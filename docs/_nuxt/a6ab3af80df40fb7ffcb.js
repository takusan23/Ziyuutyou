(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{309:function(n){n.exports=JSON.parse('{"a":{"contents/posts/json/taglist.json":{"title":"タグのページ作った","created_at":"2020-06-03T18:48:00.000Z","tags":["その他","Nuxt.js","自作ブログ","JavaScript"],"dir":"contents/posts/json","base":"taglist.json","ext":".json","sourceBase":"taglist.md","sourceExt":".md"},"contents/posts/json/first.json":{"title":"Nuxt.jsとprocessmdでブログ作りたい。","created_at":"2020-05-30 21:10:00","tags":["Nuxt.js","Markdown","JavaScript"],"dir":"contents/posts/json","base":"first.json","ext":".json","sourceBase":"first.md","sourceExt":".md"},"contents/posts/json/taihendattakoto.json":{"title":"これ作るのに大変だったこと","created_at":"2020-06-02T00:00:00.000Z","tags":["その他","自作ブログ"],"dir":"contents/posts/json","base":"taihendattakoto.json","ext":".json","sourceBase":"taihendattakoto.md","sourceExt":".md"},"contents/posts/json/usersmanual.json":{"title":"自作ブログ(Nuxt.js+processmd)の使い方","created_at":"2020-05-31 21:10:00","tags":["とりせつ","その他","Markdown","Nuxt.js","自作ブログ","JavaScript"],"dir":"contents/posts/json","base":"usersmanual.json","ext":".json","sourceBase":"usersmanual.md","sourceExt":".md"}},"b":["contents/posts/markdown/first.md","contents/posts/markdown/taglist.md","contents/posts/markdown/taihendattakoto.md","contents/posts/markdown/usersmanual.md"]}')},314:function(n,t,r){"use strict";var e={props:["tags"],data:function(){return{}},methods:{}},o=r(62),l=r(82),c=r.n(l),d=r(337),component=Object(o.a)(e,(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("div",n._l(n.tags,(function(t){return r("v-chip",{key:t,staticClass:"ma-1",attrs:{small:"",color:"indigo","text-color":"white",to:"../../posts/tag/"+t}},[n._v(n._s(t))])})),1)}),[],!1,null,null,null);t.a=component.exports;c()(component,{VChip:d.a})},326:function(n,t,r){var map={"./first.json":327,"./taglist.json":328,"./taihendattakoto.json":329,"./usersmanual.json":330};function e(n){var t=o(n);return r(t)}function o(n){if(!r.o(map,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return map[n]}e.keys=function(){return Object.keys(map)},e.resolve=o,n.exports=e,e.id=326},327:function(n){n.exports=JSON.parse('{"title":"Nuxt.jsとprocessmdでブログ作りたい。","created_at":"2020-05-30 21:10:00","tags":["Nuxt.js","Markdown","JavaScript"],"bodyContent":"**Nuxt.js+processmd**でブログ作るよ\\r\\n\\r\\n# 環境\\r\\n| なまえ | あたい         |\\r\\n|--------|----------------|\\r\\n| OS     | Windows 10 Pro |\\r\\n| Node   | 12.14.1        |\\r\\n\\r\\n# Nuxt.jsプロジェクト作成\\r\\n\\r\\n```console\\r\\nnpx create-nuxt-app nuxtblog\\r\\n```\\r\\n\\r\\nあとは好きな方を選んでいきます\\r\\n- programming language\\r\\n    - TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）\\r\\n- UI framework\\r\\n    - Vuetifyがマテリアルデザイン（今回はElement使ってみる）\\r\\n- あとは適当に（PWA入れといた）\\r\\n\\r\\n```console\\r\\n✨  Generating Nuxt.js project in nuxtblog\\r\\n? Project name nuxtblog\\r\\n? Project description My cool Nuxt.js project\\r\\n? Author name takusan23\\r\\n? Choose programming language TypeScript     \\r\\n? Choose the package manager Npm      \\r\\n? Choose UI framework Element\\r\\n? Choose custom server framework None (Recommended) \\r\\n? Choose the runtime for TypeScript Default\\r\\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\\r\\n? Choose linting tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\\r\\n? Choose test framework None\\r\\n? Choose rendering mode Single Page App\\r\\n? Choose development tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\\r\\n```\\r\\n\\r\\nそしたら移動して、サーバー起動させます\\r\\n\\r\\n```console\\r\\ncd nuxt blog\\r\\nnpm run dev\\r\\n```\\r\\n\\r\\n![Imgur](https://i.imgur.com/fsdnyw3.png)\\r\\n\\r\\n# Markdownファイルの保存場所を作る\\r\\n\\r\\nnuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に  \\r\\n**contentsフォルダ**を作り、その中に  \\r\\n**postsフォルダ**を作り、その中に  \\r\\n**markdownフォルダ**を作成します。\\r\\n\\r\\nこんな感じに\\r\\n\\r\\n![Imgur](https://i.imgur.com/9MkedEP.png)\\r\\n\\r\\n後は**Markdownフォルダ**にMarkdownファイルを置いていきます。  \\r\\n\\r\\n今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。\\r\\n\\r\\n```markdown\\r\\n---\\r\\ntitle: Nuxt.jsの練習\\r\\ncreated_at: 2020-05-31\\r\\ntags:\\r\\n- JavaScript\\r\\n---\\r\\n# Hello World\\r\\n\\r\\n```\\r\\n\\r\\n# Markdownファイルの情報をJSONに変換するprocessmd\\r\\n\\r\\n## processmd入れます\\r\\n\\r\\n\\r\\n```console\\r\\nnpm install --save-dev processmd\\r\\n```\\r\\n\\r\\n## コマンド長いのでpackage.jsonに書き足します\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\": \\"nuxtblog\\",\\r\\n  \\"version\\": \\"1.0.0\\",\\r\\n  \\"description\\": \\"My cool Nuxt.js project\\",\\r\\n  \\"author\\": \\"takusan23\\",\\r\\n  \\"private\\": true,\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"nuxt\\",\\r\\n    \\"build\\": \\"nuxt build\\",\\r\\n    \\"start\\": \\"nuxt start\\",\\r\\n    \\"generate\\": \\"nuxt generate\\",\\r\\n    \\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"nuxt\\": \\"^2.0.0\\",\\r\\n    \\"element-ui\\": \\"^2.4.11\\",\\r\\n    \\"@nuxtjs/pwa\\": \\"^3.0.0-0\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@nuxt/typescript-build\\": \\"^0.6.0\\",\\r\\n    \\"processmd\\": \\"^4.5.0\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nscriptsの中にmdの一行書き足せばおｋ\\r\\n```json\\r\\n\\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\\"\\r\\n```\\r\\n\\r\\nあとはターミナルで以下叩きます。  \\r\\nこの作業は記事を追加したら毎回叩く必要があります。\\r\\n```console\\r\\nnpm run md\\r\\n```\\r\\n\\r\\n叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも\\r\\n\\r\\n# Nuxt.jsで記事一覧用意する\\r\\n\\r\\nこっからはコピペです。いくぞおおおおお  \\r\\n**pages/index.vue**を開いて以下のJSをどーん\\r\\n```vue\\r\\n<template>\\r\\n  <div class=\\"container\\">\\r\\n    <div>\\r\\n      <el-card class=\\"box-card\\" v-for=\\"item in blogItems\\" :key=\\"item\\">\\r\\n        <nuxt-link class=\\"text item\\" :to=\\"`posts/${item.fileName}`\\">{{ item.title }}</nuxt-link>\\r\\n      </el-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script lang=\\"js\\">\\r\\nimport Vue from \'vue\'\\r\\nimport { fileMap } from \\"../contents/posts/summary.json\\";\\r\\n\\r\\nexport default {\\r\\n  data: () => {\\r\\n    return {\\r\\n      blogItems: []\\r\\n    };\\r\\n  },\\r\\n  created() {\\r\\n    // キーを取り出す\\r\\n    Object.keys(fileMap).forEach(title => {\\r\\n      // 記事一個ずつ取る\\r\\n      const blog = fileMap[title];\\r\\n      // 名前\\r\\n      const name = blog.sourceBase.replace(\\".md\\", \\"\\");\\r\\n      blog.fileName = name;\\r\\n      this.blogItems.push(blog);\\r\\n    });\\r\\n  }\\r\\n};\\r\\n<\/script>\\r\\n```\\r\\n\\r\\nここではタイトルしか出てませんが、日付とかタグとかも出せると思います。\\r\\n\\r\\n![Imgur](https://i.imgur.com/LJF3l5H.png)\\r\\n\\r\\n> localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）\\r\\n\\r\\n# 記事一覧ページを作る\\r\\n\\r\\n## 動的ルーティング # とは\\r\\nよくわからんけど静的サイトジェネレートに必要。  \\r\\nというわけで**nuxt.config.js**開いてね\\r\\n\\r\\n参考：https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\\r\\n参考：https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/\\r\\n\\r\\n開いたらJS書き足していきます。\\r\\n\\r\\n```js\\r\\nconst { sourceFileArray } = require(\'./contents/posts/summary.json\');\\r\\n\\r\\n/** パス生成 */\\r\\nconst sourceFileNameToUrl = filepath => {\\r\\n  const name = filepath.replace(\'contents/posts/markdown/\', \'\').replace(\'.md\', \'\')\\r\\n  return `/posts/${name}`\\r\\n}\\r\\n\\r\\nconst generateDynamicRoutes = callback => {\\r\\n  const routes = sourceFileArray.map(sourceFileName => {\\r\\n    return sourceFileNameToUrl(sourceFileName);\\r\\n  });\\r\\n  callback(null, routes);\\r\\n};\\r\\n\\r\\nexport default {\\r\\n// 省略\\r\\n  generate: {\\r\\n    routes: generateDynamicRoutes\\r\\n  },\\r\\n}\\r\\n```\\r\\n\\r\\nsourceFileNameToUrl()関数は`posts/${ファイル名}`の文字列を返す関数です。\\r\\n\\r\\nこうすることでURLが`posts/{タイトル}`になるはずです。  \\r\\nですがこれだけではまだ生成できません。\\r\\n\\r\\n生成するには、  \\r\\n**pagesフォルダ**に**posts**フォルダを作成して、  \\r\\nその中に **_slug.vue** ファイルを作成します。\\r\\n\\r\\n![Imgur](https://imgur.com/DSJ9WSc.png)\\r\\n\\r\\n## _slug.vueの中身\\r\\n**_slug.vue**は記事の表示に使います。  \\r\\n\\r\\n```vue\\r\\n<template>\\r\\n  <div class=\\"container\\">\\r\\n    <div>\\r\\n      <el-card class=\\"box-card\\">\\r\\n        <div>{{(new Date(created_at).toLocaleDateString())}} 投稿</div>\\r\\n        <div v-html=\\"bodyHtml\\"></div>\\r\\n      </el-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nimport { sourceFileArray } from \\"../../contents/posts/summary.json\\";\\r\\n\\r\\nexport default {\\r\\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\\r\\n  validate({ params }) {\\r\\n    return sourceFileArray.includes(\\r\\n      `contents/posts/markdown/${params.slug}.md`\\r\\n    );\\r\\n  },\\r\\n  // 各記事のJSONファイルを読み込んでる。\\r\\n  asyncData({ params }) {\\r\\n    return Object.assign(\\r\\n      {},\\r\\n      require(`~/contents/posts/json/${params.slug}.json`),\\r\\n      { params }\\r\\n    );\\r\\n  },\\r\\n  mounted() {\\r\\n    // DOM生成後\\r\\n  },\\r\\n  // さあ？\\r\\n  head() {\\r\\n    const title = `${this.title}`;\\r\\n    const url = `posts/${this.params.slug}/`;\\r\\n    return {\\r\\n      title: title,\\r\\n      meta: [\\r\\n        { hid: \\"og:url\\", property: \\"og:url\\", content: url },\\r\\n        { hid: \\"og:title\\", property: \\"og:title\\", content: title }\\r\\n      ],\\r\\n      link: [{ rel: \\"canonical\\", href: url }]\\r\\n    };\\r\\n  }\\r\\n};\\r\\n<\/script>\\r\\n```\\r\\n\\r\\n記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。\\r\\n\\r\\n![Imgur](https://i.imgur.com/qbUf0P4.png)\\r\\n\\r\\n# おまけ 静的サイトジェネレートしてみる\\r\\n\\r\\n以下の一行をターミナルに入れます\\r\\n\\r\\n```console\\r\\nnpm run generate\\r\\n```\\r\\n\\r\\nこれで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。  \\r\\n今回は**Web Server for Chrome**が入ってたのでそれ使って見てみます。  \\r\\n\\r\\n`npm run generate`の出力先は**dist**になってるのでそれを指定してWeb鯖立てます。\\r\\n\\r\\n![Imgur](https://i.imgur.com/O6uBFod.png)\\r\\n\\r\\n以上です。  \\r\\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。\\r\\n\\r\\n![Imgur](https://i.imgur.com/74quEU3.png)\\r\\n\\r\\nPWAも入れてあるので試せる。\\r\\n\\r\\n# おまけ\\r\\nGitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。\\r\\n\\r\\n```js\\r\\nexport default {\\r\\n// 省略\\r\\n  router: {\\r\\n    base: \'/リポジトリ名/\'\\r\\n  },\\r\\n  generate: {\\r\\n    routes: generateDynamicRoutes,\\r\\n    dir: \'docs\',\\r\\n  },\\r\\n}\\r\\n```\\r\\n\\r\\n# おわりに\\r\\n**nuxt.config.js**の`mode: \'spa\'`ってSPAであってるの？\\r\\n静的サイトジェネレートの時は書いてなかったんだけど？\\r\\n\\r\\nソースコード：https://github.com/takusan23/NuxtBlog","bodyHtml":"<p><strong>Nuxt.js+processmd</strong>でブログ作るよ</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>OS</td>\\n<td>Windows 10 Pro</td>\\n</tr>\\n<tr>\\n<td>Node</td>\\n<td>12.14.1</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>Nuxt.jsプロジェクト作成</h1>\\n<pre><code class=\\"hljs\\">npx create-nuxt-app nuxtblog</code></pre><p>あとは好きな方を選んでいきます</p>\\n<ul>\\n<li>programming language\\n<ul>\\n<li>TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）</li>\\n</ul>\\n</li>\\n<li>UI framework\\n<ul>\\n<li>Vuetifyがマテリアルデザイン（今回はElement使ってみる）</li>\\n</ul>\\n</li>\\n<li>あとは適当に（PWA入れといた）</li>\\n</ul>\\n<pre><code class=\\"hljs\\">✨  Generating Nuxt.js project in nuxtblog\\n? Project name nuxtblog\\n? Project description My cool Nuxt.js project\\n? Author name takusan23\\n? Choose programming language TypeScript     \\n? Choose the package manager Npm      \\n? Choose UI framework Element\\n? Choose custom server framework None (Recommended) \\n? Choose the runtime for TypeScript Default\\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\\n? Choose linting tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\\n? Choose test framework None\\n? Choose rendering mode Single Page App\\n? Choose development tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</code></pre><p>そしたら移動して、サーバー起動させます</p>\\n<pre><code class=\\"hljs\\">cd nuxt blog\\nnpm run dev</code></pre><p><img src=\\"https://i.imgur.com/fsdnyw3.png\\" alt=\\"Imgur\\"></p>\\n<h1>Markdownファイルの保存場所を作る</h1>\\n<p>nuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に<br>\\n<strong>contentsフォルダ</strong>を作り、その中に<br>\\n<strong>postsフォルダ</strong>を作り、その中に<br>\\n<strong>markdownフォルダ</strong>を作成します。</p>\\n<p>こんな感じに</p>\\n<p><img src=\\"https://i.imgur.com/9MkedEP.png\\" alt=\\"Imgur\\"></p>\\n<p>後は<strong>Markdownフォルダ</strong>にMarkdownファイルを置いていきます。</p>\\n<p>今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。</p>\\n<pre><code class=\\"hljs\\">---\\ntitle: Nuxt.jsの練習\\ncreated_at: 2020-05-31\\ntags:\\n<span class=\\"hljs-section\\">- JavaScript\\n---</span>\\n<span class=\\"hljs-section\\"># Hello World</span></code></pre><h1>Markdownファイルの情報をJSONに変換するprocessmd</h1>\\n<h2>processmd入れます</h2>\\n<pre><code class=\\"hljs\\">npm install --save-dev processmd</code></pre><h2>コマンド長いのでpackage.jsonに書き足します</h2>\\n<pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">\\"name\\"</span>: <span class=\\"hljs-string\\">\\"nuxtblog\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"version\\"</span>: <span class=\\"hljs-string\\">\\"1.0.0\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"description\\"</span>: <span class=\\"hljs-string\\">\\"My cool Nuxt.js project\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"author\\"</span>: <span class=\\"hljs-string\\">\\"takusan23\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"private\\"</span>: <span class=\\"hljs-literal\\">true</span>,\\n  <span class=\\"hljs-attr\\">\\"scripts\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"dev\\"</span>: <span class=\\"hljs-string\\">\\"nuxt\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"build\\"</span>: <span class=\\"hljs-string\\">\\"nuxt build\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"start\\"</span>: <span class=\\"hljs-string\\">\\"nuxt start\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"generate\\"</span>: <span class=\\"hljs-string\\">\\"nuxt generate\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"md\\"</span>: <span class=\\"hljs-string\\">\\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\\"</span>\\n  },\\n  <span class=\\"hljs-attr\\">\\"dependencies\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"nuxt\\"</span>: <span class=\\"hljs-string\\">\\"^2.0.0\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"element-ui\\"</span>: <span class=\\"hljs-string\\">\\"^2.4.11\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"@nuxtjs/pwa\\"</span>: <span class=\\"hljs-string\\">\\"^3.0.0-0\\"</span>\\n  },\\n  <span class=\\"hljs-attr\\">\\"devDependencies\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"@nuxt/typescript-build\\"</span>: <span class=\\"hljs-string\\">\\"^0.6.0\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"processmd\\"</span>: <span class=\\"hljs-string\\">\\"^4.5.0\\"</span>\\n  }\\n}</code></pre><p>scriptsの中にmdの一行書き足せばおｋ</p>\\n<pre><code class=\\"hljs\\">\\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\\"</code></pre><p>あとはターミナルで以下叩きます。<br>\\nこの作業は記事を追加したら毎回叩く必要があります。</p>\\n<pre><code class=\\"hljs\\">npm run md</code></pre><p>叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも</p>\\n<h1>Nuxt.jsで記事一覧用意する</h1>\\n<p>こっからはコピペです。いくぞおおおおお<br>\\n<strong>pages/index.vue</strong>を開いて以下のJSをどーん</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div class=\\"container\\"&gt;\\n    &lt;div&gt;\\n      &lt;el-card class=\\"box-card\\" v-for=\\"item in blogItems\\" :key=\\"item\\"&gt;\\n        &lt;nuxt-link class=\\"text item\\" :to=\\"`posts/${item.fileName}`\\"&gt;{{ item.title }}&lt;/nuxt-link&gt;\\n      &lt;/el-card&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script lang=\\"js\\"&gt;\\nimport Vue from \'vue\'\\nimport { fileMap } from \\"../contents/posts/summary.json\\";\\n\\nexport default {\\n  data: () =&gt; {\\n    return {\\n      blogItems: []\\n    };\\n  },\\n  created() {\\n    // キーを取り出す\\n    Object.keys(fileMap).forEach(title =&gt; {\\n      // 記事一個ずつ取る\\n      const blog = fileMap[title];\\n      // 名前\\n      const name = blog.sourceBase.replace(\\".md\\", \\"\\");\\n      blog.fileName = name;\\n      this.blogItems.push(blog);\\n    });\\n  }\\n};\\n&lt;/script&gt;</code></pre><p>ここではタイトルしか出てませんが、日付とかタグとかも出せると思います。</p>\\n<p><img src=\\"https://i.imgur.com/LJF3l5H.png\\" alt=\\"Imgur\\"></p>\\n<blockquote>\\n<p>localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）</p>\\n</blockquote>\\n<h1>記事一覧ページを作る</h1>\\n<h2>動的ルーティング # とは</h2>\\n<p>よくわからんけど静的サイトジェネレートに必要。<br>\\nというわけで<strong>nuxt.config.js</strong>開いてね</p>\\n<p>参考：https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\\n参考：https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/</p>\\n<p>開いたらJS書き足していきます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">const</span> { sourceFileArray } = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">\'./contents/posts/summary.json\'</span>);\\n\\n<span class=\\"hljs-comment\\">/** パス生成 */</span>\\n<span class=\\"hljs-keyword\\">const</span> sourceFileNameToUrl = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">filepath</span> =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> name = filepath.replace(<span class=\\"hljs-string\\">\'contents/posts/markdown/\'</span>, <span class=\\"hljs-string\\">\'\'</span>).replace(<span class=\\"hljs-string\\">\'.md\'</span>, <span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">`/posts/<span class=\\"hljs-subst\\">${name}</span>`</span>\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> generateDynamicRoutes = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">callback</span> =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> routes = sourceFileArray.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">sourceFileName</span> =&gt;</span> {\\n    <span class=\\"hljs-keyword\\">return</span> sourceFileNameToUrl(sourceFileName);\\n  });\\n  callback(<span class=\\"hljs-literal\\">null</span>, routes);\\n};\\n\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n<span class=\\"hljs-comment\\">// 省略</span>\\n  <span class=\\"hljs-attr\\">generate</span>: {\\n    <span class=\\"hljs-attr\\">routes</span>: generateDynamicRoutes\\n  },\\n}</code></pre><p>sourceFileNameToUrl()関数は<code>posts/${ファイル名}</code>の文字列を返す関数です。</p>\\n<p>こうすることでURLが<code>posts/{タイトル}</code>になるはずです。<br>\\nですがこれだけではまだ生成できません。</p>\\n<p>生成するには、<br>\\n<strong>pagesフォルダ</strong>に<strong>posts</strong>フォルダを作成して、<br>\\nその中に <strong>_slug.vue</strong> ファイルを作成します。</p>\\n<p><img src=\\"https://imgur.com/DSJ9WSc.png\\" alt=\\"Imgur\\"></p>\\n<h2>_slug.vueの中身</h2>\\n<p><strong>_slug.vue</strong>は記事の表示に使います。</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div class=\\"container\\"&gt;\\n    &lt;div&gt;\\n      &lt;el-card class=\\"box-card\\"&gt;\\n        &lt;div&gt;{{(new Date(created_at).toLocaleDateString())}} 投稿&lt;/div&gt;\\n        &lt;div v-html=\\"bodyHtml\\"&gt;&lt;/div&gt;\\n      &lt;/el-card&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nimport { sourceFileArray } from \\"../../contents/posts/summary.json\\";\\n\\nexport default {\\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\\n  validate({ params }) {\\n    return sourceFileArray.includes(\\n      `contents/posts/markdown/${params.slug}.md`\\n    );\\n  },\\n  // 各記事のJSONファイルを読み込んでる。\\n  asyncData({ params }) {\\n    return Object.assign(\\n      {},\\n      require(`~/contents/posts/json/${params.slug}.json`),\\n      { params }\\n    );\\n  },\\n  mounted() {\\n    // DOM生成後\\n  },\\n  // さあ？\\n  head() {\\n    const title = `${this.title}`;\\n    const url = `posts/${this.params.slug}/`;\\n    return {\\n      title: title,\\n      meta: [\\n        { hid: \\"og:url\\", property: \\"og:url\\", content: url },\\n        { hid: \\"og:title\\", property: \\"og:title\\", content: title }\\n      ],\\n      link: [{ rel: \\"canonical\\", href: url }]\\n    };\\n  }\\n};\\n&lt;/script&gt;</code></pre><p>記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。</p>\\n<p><img src=\\"https://i.imgur.com/qbUf0P4.png\\" alt=\\"Imgur\\"></p>\\n<h1>おまけ 静的サイトジェネレートしてみる</h1>\\n<p>以下の一行をターミナルに入れます</p>\\n<pre><code class=\\"hljs\\">npm run generate</code></pre><p>これで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。<br>\\n今回は<strong>Web Server for Chrome</strong>が入ってたのでそれ使って見てみます。</p>\\n<p><code>npm run generate</code>の出力先は<strong>dist</strong>になってるのでそれを指定してWeb鯖立てます。</p>\\n<p><img src=\\"https://i.imgur.com/O6uBFod.png\\" alt=\\"Imgur\\"></p>\\n<p>以上です。<br>\\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。</p>\\n<p><img src=\\"https://i.imgur.com/74quEU3.png\\" alt=\\"Imgur\\"></p>\\n<p>PWAも入れてあるので試せる。</p>\\n<h1>おまけ</h1>\\n<p>GitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n<span class=\\"hljs-comment\\">// 省略</span>\\n  <span class=\\"hljs-attr\\">router</span>: {\\n    <span class=\\"hljs-attr\\">base</span>: <span class=\\"hljs-string\\">\'/リポジトリ名/\'</span>\\n  },\\n  <span class=\\"hljs-attr\\">generate</span>: {\\n    <span class=\\"hljs-attr\\">routes</span>: generateDynamicRoutes,\\n    <span class=\\"hljs-attr\\">dir</span>: <span class=\\"hljs-string\\">\'docs\'</span>,\\n  },\\n}</code></pre><h1>おわりに</h1>\\n<p><strong>nuxt.config.js</strong>の<code>mode: \'spa\'</code>ってSPAであってるの？\\n静的サイトジェネレートの時は書いてなかったんだけど？</p>\\n<p>ソースコード：https://github.com/takusan23/NuxtBlog</p>\\n","dir":"contents/posts/json","base":"first.json","ext":".json","sourceBase":"first.md","sourceExt":".md"}')},328:function(n){n.exports=JSON.parse('{"title":"タグのページ作った","created_at":"2020-06-03T18:48:00.000Z","tags":["その他","Nuxt.js","自作ブログ","JavaScript"],"bodyContent":"タグのページ作りました。  \\r\\n**まだタグ一覧は作ってませんが**、タグが含まれている記事の一覧表示ならできるようになりました\\r\\n\\r\\n試しにChipを押してみてね。  \\r\\n\\r\\n**あとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる**\\r\\n\\r\\n## 技術的な話\\r\\n\\r\\n`posts/tag/自作ブログ/index.html` みたいなファイルが生成されるようになりました。  \\r\\n\\r\\n```js\\r\\n/** タグが含まれている記事一覧のパス配列生成関数。 */\\r\\nconst generateTagPageRoutesList = () => {\\r\\n  // 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す\\r\\n  const blogItems = Object.keys(postsJSON.fileMap).map(key => postsJSON.fileMap[key])\\r\\n  // タグだけの配列を作る\\r\\n  const allTagItems = blogItems.map(blog => blog.tags).flat()\\r\\n  // 被りを消す。new Set()でいいらしい\\r\\n  const tagList = [...new Set(allTagItems)]\\r\\n  // パス生成。こんな感じの→ /posts/tag/自作ブログ みたいな感じに\\r\\n  const pathList = tagList.map(tagName => `/posts/tag/${tagName}`)\\r\\n  return pathList\\r\\n}\\r\\n// 省略\\r\\n/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */\\r\\nconst generateRoutes = callback => {\\r\\n  callback(null, [generateTagPageRoutesList()].flat())\\r\\n}\\r\\n```\\r\\n\\r\\nJavaScriptの配列、被りを消す方法にこんな方法があったんですね。  \\r\\n```js\\r\\nconsole.log([...new Set([1,2,1])]) // [1,2]\\r\\n```\\r\\n\\r\\nちなみにKotlinだと`array()#distinct()`があります。超便利\\r\\n\\r\\n以上です（？）  \\r\\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。  \\r\\n\\r\\nあと2m確保とが無理じゃね？","bodyHtml":"<p>タグのページ作りました。<br>\\n<strong>まだタグ一覧は作ってませんが</strong>、タグが含まれている記事の一覧表示ならできるようになりました</p>\\n<p>試しにChipを押してみてね。</p>\\n<p><strong>あとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる</strong></p>\\n<h2>技術的な話</h2>\\n<p><code>posts/tag/自作ブログ/index.html</code> みたいなファイルが生成されるようになりました。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/** タグが含まれている記事一覧のパス配列生成関数。 */</span>\\n<span class=\\"hljs-keyword\\">const</span> generateTagPageRoutesList = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span> =&gt;</span> {\\n  <span class=\\"hljs-comment\\">// 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す</span>\\n  <span class=\\"hljs-keyword\\">const</span> blogItems = <span class=\\"hljs-built_in\\">Object</span>.keys(postsJSON.fileMap).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">key</span> =&gt;</span> postsJSON.fileMap[key])\\n  <span class=\\"hljs-comment\\">// タグだけの配列を作る</span>\\n  <span class=\\"hljs-keyword\\">const</span> allTagItems = blogItems.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">blog</span> =&gt;</span> blog.tags).flat()\\n  <span class=\\"hljs-comment\\">// 被りを消す。new Set()でいいらしい</span>\\n  <span class=\\"hljs-keyword\\">const</span> tagList = [...new <span class=\\"hljs-built_in\\">Set</span>(allTagItems)]\\n  <span class=\\"hljs-comment\\">// パス生成。こんな感じの→ /posts/tag/自作ブログ みたいな感じに</span>\\n  <span class=\\"hljs-keyword\\">const</span> pathList = tagList.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">tagName</span> =&gt;</span> <span class=\\"hljs-string\\">`/posts/tag/<span class=\\"hljs-subst\\">${tagName}</span>`</span>)\\n  <span class=\\"hljs-keyword\\">return</span> pathList\\n}\\n<span class=\\"hljs-comment\\">// 省略</span>\\n<span class=\\"hljs-comment\\">/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */</span>\\n<span class=\\"hljs-keyword\\">const</span> generateRoutes = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">callback</span> =&gt;</span> {\\n  callback(<span class=\\"hljs-literal\\">null</span>, [generateTagPageRoutesList()].flat())\\n}</code></pre><p>JavaScriptの配列、被りを消す方法にこんな方法があったんですね。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-built_in\\">console</span>.log([...new <span class=\\"hljs-built_in\\">Set</span>([<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">1</span>])]) <span class=\\"hljs-comment\\">// [1,2]</span></code></pre><p>ちなみにKotlinだと<code>array()#distinct()</code>があります。超便利</p>\\n<p>以上です（？）<br>\\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。</p>\\n<p>あと2m確保とが無理じゃね？</p>\\n","dir":"contents/posts/json","base":"taglist.json","ext":".json","sourceBase":"taglist.md","sourceExt":".md"}')},329:function(n){n.exports=JSON.parse('{"title":"これ作るのに大変だったこと","created_at":"2020-06-02T00:00:00.000Z","tags":["その他","自作ブログ"],"bodyContent":"Hexoってすごいんだなって。\\r\\n\\r\\n## これ作るのに大変だったこと\\r\\n書く。\\r\\n\\r\\n### Vuetifyが`<code>`に色つける。\\r\\n\\r\\nVuetifyくんが勝手に色を付けてくれます。が、なんかいまいちなので頑張ってCSS書いて直したいんですが、  \\r\\nVuetifyくんが許してくれません。？  \\r\\nしかたないので`!important`で黙らせました。    \\r\\n\\r\\nassets/css/styles.css\\r\\n```css\\r\\n/* VuetifyのせいでCodeタグに勝手にCSS適用されるので強制上書き */\\r\\n\\r\\n.v-application code {\\r\\n    box-shadow: initial !important;\\r\\n    border: 1px solid gray;\\r\\n    border-radius: 5px !important;\\r\\n    font-family: \'Koruri Regular\';\\r\\n    margin: 10px;\\r\\n}\\r\\n\\r\\n.v-application code, .v-application kbd {\\r\\n    font-weight: initial !important;\\r\\n}\\r\\n```\\r\\n\\r\\nついでに`highlight.js`のCSS、`vs2015.css`を入れてコードにシンタックスハイライトをつけようとしたんですけど、これもうまく動かなかったので`vs2015.css`に`!important`付けて対応しました。\\r\\n\\r\\n### CSS\\r\\nCSSよくわがんね。\\r\\n\\r\\n```css\\r\\n/* ほばー */\\r\\n.titleHover:hover {\\r\\n    color: #5870cb;\\r\\n    transition: color 0.5s;\\r\\n}\\r\\n```\\r\\n\\r\\nこれは記事一覧のタイトルをマウスオーバーするとジワーッと色が変わるCSSです。  \\r\\n\\r\\n### Processmdくんが時系列順に並べてくれない\\r\\n\\r\\nこれはおま環境かもしれないけど、時系列順に並んでくれません。  \\r\\n流石に時系列順にならないのはきついので、JavaScriptで時系列に並び替えるコードを書きました。sort関数あったし。\\r\\n\\r\\n```js\\r\\n// なんかしらんけど並び順が新しい順とは限らないらしい？\\r\\nconst sortedKeyList = Object.keys(fileMap);\\r\\nsortedKeyList.sort(function(a, b) {\\r\\n  const aDate = new Date(fileMap[a].created_at).getTime();\\r\\n  const bDate = new Date(fileMap[b].created_at).getTime();\\r\\n  if (aDate > bDate) return -1;\\r\\n  if (aDate < bDate) return 1;\\r\\n  return 0;\\r\\n});\\r\\n```\\r\\n\\r\\nKotlinの`sortBy{}`とは使い方が違っててちょっと迷った。\\r\\n\\r\\nあとprocessmdくん、/posts/jsonに消した記事が残ってるんですがそれは、、\\r\\n\\r\\n### ページネーション\\r\\n\\r\\n次のページ、前のページを付けることを、ページネーションって言うそうですよ。  \\r\\nこれ付けないと記事が増えたときのスクロールがとんでもないことになる。  \\r\\n\\r\\n記事一覧はこんな感じに静的に出してほしいので（postsに置くとタイトル被りそうなのでpageフォルダがある。）\\r\\n```js\\r\\n/posts/page/1\\r\\n```\\r\\n\\r\\n特に需要はなさそうですが一応必要なページ数に合わせて`posts/page`の配列を返す関数置いときますね。\\r\\n\\r\\n```js\\r\\n/** 次のページ機能をつける。そうしないと記事一覧にどばーってなってスクロール大変になる */\\r\\nconst generatePagenationRoutesList = () => {\\r\\n  // 何ページ必要か計算する（10で割ればいいっしょ）。ただ1ページ目は最低限必要なので1足す\\r\\n  const calc = Math.floor(postsJSON.sourceFileArray.length / PAGE_LIMIT) + 1\\r\\n  // ページ分だけ動的ルーティングの配列出す？\\r\\n  const dynamicRouterPathList = []\\r\\n  // console.log(`ページ数：${calc} / 記事数：${postsJSON.sourceFileArray.length}`)\\r\\n  // ページ生成。1ページ目から作るので1からスタート\\r\\n  for (let i = 1; i <= calc; i++) {\\r\\n    dynamicRouterPathList.push(`/posts/page/${i}`)\\r\\n  }\\r\\n  return dynamicRouterPathList\\r\\n}\\r\\n\\r\\n// 省略\\r\\n\\r\\n/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */\\r\\nconst generateRoutes = callback => {\\r\\n  callback(null, [generatePagenationRoutesList()].flat())\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nこれ動かすには`postsフォルダ`に`pageフォルダ`を作って中に、`_id.vue`を置いておく必要があります。\\r\\n\\r\\nこれで`posts/page/1`などが生成されるようになります（多分）\\r\\n\\r\\n~~この記事書いてる途中でなんでこれ動いてんのかよくわからなくなったのは内緒~~←やっぱり生成できてなかったので直しました。（2020/06/03）\\r\\n\\r\\n## 特に大変じゃなかったこと\\r\\n\\r\\n### PWA\\r\\n\\r\\nPWAってめんどいんですよ。アイコン画像を用意するのがね！！！。  \\r\\n192x192だったり512x512だったりいっぱい要求してくるんですけど、  \\r\\n`@nuxt/pwa`は指定がない場合、`static/icon.png`を使ってくれるので、512x512のpngを置いておくだけで終わりました。PWA RTA行けそう（は？）  \\r\\n\\r\\n一応`nuxt.config.js`の`manifest`置いておきますね。\\r\\n\\r\\n```js\\r\\n/** \\r\\n * PWA manifest.json\\r\\n */\\r\\nmanifest: {\\r\\n  name: \'たくさんの自由帳\',\\r\\n  title: \'たくさんの自由帳\',\\r\\n  \'og:title\': \'たくさんの自由帳\',\\r\\n  lang: \'ja\',\\r\\n  theme_color: \'#8c9eff\',\\r\\n  background_color: \'#5870cb\',\\r\\n  display: \'standalone\',\\r\\n}\\r\\n```\\r\\n\\r\\n### ダークモード\\r\\n\\r\\nVuetifyなら  \\r\\n```js\\r\\n$vuetify.theme.dark = true\\r\\n```  \\r\\nで終わります。Vuetifyすげー\\r\\n\\r\\nダークモード切り替えスイッチの例置いときますね。\\r\\n\\r\\n```js\\r\\n\x3c!-- ダークモードスイッチ --\x3e\\r\\n<v-switch\\r\\n  class=\\"text-center ma-2\\"\\r\\n  :append-icon=\\"`${$vuetify.theme.dark ? \'mdi-weather-night\' : \'mdi-weather-sunny\'}`\\"\\r\\n  v-model=\\"$vuetify.theme.dark\\"\\r\\n  label=\\"テーマ切り替え\\"\\r\\n></v-switch>\\r\\n```\\r\\n\\r\\n三項演算子使うの初めてかもしれない（まずKotlinにはないし）  \\r\\n\\r\\nところで$←これなに？\\r\\n\\r\\n## おわりに\\r\\n学校始まるわ。早起きつっら  \\r\\nあと画像貼る方法確立してない。imgur使うか？","bodyHtml":"<p>Hexoってすごいんだなって。</p>\\n<h2>これ作るのに大変だったこと</h2>\\n<p>書く。</p>\\n<h3>Vuetifyが<code>&lt;code&gt;</code>に色つける。</h3>\\n<p>Vuetifyくんが勝手に色を付けてくれます。が、なんかいまいちなので頑張ってCSS書いて直したいんですが、<br>\\nVuetifyくんが許してくれません。？<br>\\nしかたないので<code>!important</code>で黙らせました。</p>\\n<p>assets/css/styles.css</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/* VuetifyのせいでCodeタグに勝手にCSS適用されるので強制上書き */</span>\\n\\n<span class=\\"hljs-selector-class\\">.v-application</span> <span class=\\"hljs-selector-tag\\">code</span> {\\n    <span class=\\"hljs-attribute\\">box-shadow</span>: initial <span class=\\"hljs-meta\\">!important</span>;\\n    <span class=\\"hljs-attribute\\">border</span>: <span class=\\"hljs-number\\">1px</span> solid gray;\\n    <span class=\\"hljs-attribute\\">border-radius</span>: <span class=\\"hljs-number\\">5px</span> <span class=\\"hljs-meta\\">!important</span>;\\n    <span class=\\"hljs-attribute\\">font-family</span>: <span class=\\"hljs-string\\">\'Koruri Regular\'</span>;\\n    <span class=\\"hljs-attribute\\">margin</span>: <span class=\\"hljs-number\\">10px</span>;\\n}\\n\\n<span class=\\"hljs-selector-class\\">.v-application</span> <span class=\\"hljs-selector-tag\\">code</span>, <span class=\\"hljs-selector-class\\">.v-application</span> <span class=\\"hljs-selector-tag\\">kbd</span> {\\n    <span class=\\"hljs-attribute\\">font-weight</span>: initial <span class=\\"hljs-meta\\">!important</span>;\\n}</code></pre><p>ついでに<code>highlight.js</code>のCSS、<code>vs2015.css</code>を入れてコードにシンタックスハイライトをつけようとしたんですけど、これもうまく動かなかったので<code>vs2015.css</code>に<code>!important</code>付けて対応しました。</p>\\n<h3>CSS</h3>\\n<p>CSSよくわがんね。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/* ほばー */</span>\\n<span class=\\"hljs-selector-class\\">.titleHover</span><span class=\\"hljs-selector-pseudo\\">:hover</span> {\\n    <span class=\\"hljs-attribute\\">color</span>: <span class=\\"hljs-number\\">#5870cb</span>;\\n    <span class=\\"hljs-attribute\\">transition</span>: color <span class=\\"hljs-number\\">0.5s</span>;\\n}</code></pre><p>これは記事一覧のタイトルをマウスオーバーするとジワーッと色が変わるCSSです。</p>\\n<h3>Processmdくんが時系列順に並べてくれない</h3>\\n<p>これはおま環境かもしれないけど、時系列順に並んでくれません。<br>\\n流石に時系列順にならないのはきついので、JavaScriptで時系列に並び替えるコードを書きました。sort関数あったし。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// なんかしらんけど並び順が新しい順とは限らないらしい？</span>\\n<span class=\\"hljs-keyword\\">const</span> sortedKeyList = <span class=\\"hljs-built_in\\">Object</span>.keys(fileMap);\\nsortedKeyList.sort(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">a, b</span>) </span>{\\n  <span class=\\"hljs-keyword\\">const</span> aDate = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Date</span>(fileMap[a].created_at).getTime();\\n  <span class=\\"hljs-keyword\\">const</span> bDate = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Date</span>(fileMap[b].created_at).getTime();\\n  <span class=\\"hljs-keyword\\">if</span> (aDate &gt; bDate) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>;\\n  <span class=\\"hljs-keyword\\">if</span> (aDate &lt; bDate) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>;\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n});</code></pre><p>Kotlinの<code>sortBy{}</code>とは使い方が違っててちょっと迷った。</p>\\n<p>あとprocessmdくん、/posts/jsonに消した記事が残ってるんですがそれは、、</p>\\n<h3>ページネーション</h3>\\n<p>次のページ、前のページを付けることを、ページネーションって言うそうですよ。<br>\\nこれ付けないと記事が増えたときのスクロールがとんでもないことになる。</p>\\n<p>記事一覧はこんな感じに静的に出してほしいので（postsに置くとタイトル被りそうなのでpageフォルダがある。）</p>\\n<pre><code class=\\"hljs\\">/posts/page/1</code></pre><p>特に需要はなさそうですが一応必要なページ数に合わせて<code>posts/page</code>の配列を返す関数置いときますね。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/** 次のページ機能をつける。そうしないと記事一覧にどばーってなってスクロール大変になる */</span>\\n<span class=\\"hljs-keyword\\">const</span> generatePagenationRoutesList = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span> =&gt;</span> {\\n  <span class=\\"hljs-comment\\">// 何ページ必要か計算する（10で割ればいいっしょ）。ただ1ページ目は最低限必要なので1足す</span>\\n  <span class=\\"hljs-keyword\\">const</span> calc = <span class=\\"hljs-built_in\\">Math</span>.floor(postsJSON.sourceFileArray.length / PAGE_LIMIT) + <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-comment\\">// ページ分だけ動的ルーティングの配列出す？</span>\\n  <span class=\\"hljs-keyword\\">const</span> dynamicRouterPathList = []\\n  <span class=\\"hljs-comment\\">// console.log(`ページ数：${calc} / 記事数：${postsJSON.sourceFileArray.length}`)</span>\\n  <span class=\\"hljs-comment\\">// ページ生成。1ページ目から作るので1からスタート</span>\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">1</span>; i &lt;= calc; i++) {\\n    dynamicRouterPathList.push(<span class=\\"hljs-string\\">`/posts/page/<span class=\\"hljs-subst\\">${i}</span>`</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dynamicRouterPathList\\n}\\n\\n<span class=\\"hljs-comment\\">// 省略</span>\\n\\n<span class=\\"hljs-comment\\">/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */</span>\\n<span class=\\"hljs-keyword\\">const</span> generateRoutes = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">callback</span> =&gt;</span> {\\n  callback(<span class=\\"hljs-literal\\">null</span>, [generatePagenationRoutesList()].flat())\\n}</code></pre><p>これ動かすには<code>postsフォルダ</code>に<code>pageフォルダ</code>を作って中に、<code>_id.vue</code>を置いておく必要があります。</p>\\n<p>これで<code>posts/page/1</code>などが生成されるようになります（多分）</p>\\n<p><s>この記事書いてる途中でなんでこれ動いてんのかよくわからなくなったのは内緒</s>←やっぱり生成できてなかったので直しました。（2020/06/03）</p>\\n<h2>特に大変じゃなかったこと</h2>\\n<h3>PWA</h3>\\n<p>PWAってめんどいんですよ。アイコン画像を用意するのがね！！！。<br>\\n192x192だったり512x512だったりいっぱい要求してくるんですけど、<br>\\n<code>@nuxt/pwa</code>は指定がない場合、<code>static/icon.png</code>を使ってくれるので、512x512のpngを置いておくだけで終わりました。PWA RTA行けそう（は？）</p>\\n<p>一応<code>nuxt.config.js</code>の<code>manifest</code>置いておきますね。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/** \\n * PWA manifest.json\\n */</span>\\n<span class=\\"hljs-attr\\">manifest</span>: {\\n  <span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\'たくさんの自由帳\'</span>,\\n  <span class=\\"hljs-attr\\">title</span>: <span class=\\"hljs-string\\">\'たくさんの自由帳\'</span>,\\n  <span class=\\"hljs-string\\">\'og:title\'</span>: <span class=\\"hljs-string\\">\'たくさんの自由帳\'</span>,\\n  <span class=\\"hljs-attr\\">lang</span>: <span class=\\"hljs-string\\">\'ja\'</span>,\\n  <span class=\\"hljs-attr\\">theme_color</span>: <span class=\\"hljs-string\\">\'#8c9eff\'</span>,\\n  <span class=\\"hljs-attr\\">background_color</span>: <span class=\\"hljs-string\\">\'#5870cb\'</span>,\\n  <span class=\\"hljs-attr\\">display</span>: <span class=\\"hljs-string\\">\'standalone\'</span>,\\n}</code></pre><h3>ダークモード</h3>\\n<p>Vuetifyなら</p>\\n<pre><code class=\\"hljs\\">$vuetify.theme.dark = <span class=\\"hljs-literal\\">true</span></code></pre><p>で終わります。Vuetifyすげー</p>\\n<p>ダークモード切り替えスイッチの例置いときますね。</p>\\n<pre><code class=\\"hljs\\">&lt;!-- ダークモードスイッチ --&gt;\\n<span class=\\"xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">v-switch</span>\\n  <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"text-center ma-2\\"</span>\\n  <span class=\\"hljs-attr\\">:append-icon</span>=<span class=\\"hljs-string\\">\\"`${$vuetify.theme.dark ? \'mdi-weather-night\' : \'mdi-weather-sunny\'}`\\"</span>\\n  <span class=\\"hljs-attr\\">v-model</span>=<span class=\\"hljs-string\\">\\"$vuetify.theme.dark\\"</span>\\n  <span class=\\"hljs-attr\\">label</span>=<span class=\\"hljs-string\\">\\"テーマ切り替え\\"</span>\\n&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">v-switch</span>&gt;</span></span></code></pre><p>三項演算子使うの初めてかもしれない（まずKotlinにはないし）</p>\\n<p>ところで$←これなに？</p>\\n<h2>おわりに</h2>\\n<p>学校始まるわ。早起きつっら<br>\\nあと画像貼る方法確立してない。imgur使うか？</p>\\n","dir":"contents/posts/json","base":"taihendattakoto.json","ext":".json","sourceBase":"taihendattakoto.md","sourceExt":".md"}')},330:function(n){n.exports=JSON.parse('{"title":"自作ブログ(Nuxt.js+processmd)の使い方","created_at":"2020-05-31 21:10:00","tags":["とりせつ","その他","Markdown","Nuxt.js","自作ブログ","JavaScript"],"bodyContent":"# 自作ブログ(Nuxt.js+processmd)の使い方\\r\\nめも\\r\\n\\r\\n# 起動方法\\r\\n\\r\\n```console\\r\\nnpm run dev\\r\\n```\\r\\n\\r\\n# ファイル構成\\r\\n\\r\\n多分こうなってるはず\\r\\n\\r\\n- assets\\r\\n    - CSSファイル置いてある（フォント指定のために）\\r\\n- Components\\r\\n    - Vue.jsのやつと同じだと思う。\\r\\n    - UIの部品を分けて他で使い回す的な\\r\\n    - AndroidのFragmentに近いかな？\\r\\n- contents\\r\\n    - 重要フォルダ。\\r\\n    - 最重要なので後で詳しく。\\r\\n- dist\\r\\n    - `nuxt generate`で書き出したファイルの置き場所です。\\r\\n    - htmlがある。\\r\\n    - あとはこのフォルダでWebサーバー建てるなりすれば見れるはずです。\\r\\n- layouts\\r\\n    - （Viewの階層的に）一番下に居るやつ。\\r\\n    - AppBarとかNavigationDrawerはここに書いてある。\\r\\n    - Androidで言うとActivity？\\r\\n- middleware\\r\\n    - さあ？\\r\\n- node_modules\\r\\n    - 多分ライブラリが入ってる。基本いじらない。\\r\\n    - ~~Black holeよりも深い~~\\r\\n    - npmコマンドでコケた時はまず消して`npm install`する。\\r\\n- plugins\\r\\n    - GoogleAnalyticsのためのJSが一個だけ置いてある。\\r\\n- static\\r\\n    - 静的サイトジェネレートのときのfaviconとか？\\r\\n- store\\r\\n    - さあ？\\r\\n- .から始まるファイル\\r\\n    - 基本触らないと思う\\r\\n- nuxt.config.js\\r\\n    - 静的サイトジェネレートの時にどのファイルを作ればいいかとか書く。\\r\\n    - Vuetifyでなんかやるときも書く。\\r\\n    - cssとかも\\r\\n- package-look.json\\r\\n    - ？\\r\\n- package.json\\r\\n    - このプログラムについてなど。\\r\\n    - 作者とかライセンスとかが書いてある。\\r\\n    - 必要なライブラリも書いてある。\\r\\n- README.md\\r\\n    - GitHub以外で見ること有る？\\r\\n- tsconfig.json\\r\\n    - ？\\r\\n\\r\\n# contentsフォルダについて / 記事の書き方\\r\\n## 共通\\r\\n記事を書いたら以下のコマンドを入れてね。（JSONファイルを更新するため）  \\r\\n↓ブログ(posts)書いたとき\\r\\n```console\\r\\nnpm run md\\r\\n```\\r\\n↓固定ページ(markdown)書いたとき\\r\\n```console\\r\\nnpm run page\\r\\n```  \\r\\n↓同時に実行する\\r\\n```console\\r\\nnpm run markdown\\r\\n```\\r\\n## contents/pages/markdown\\r\\n固定ページを書く時に使います。  \\r\\nこのサイトでは`pages/about`(このサイトについて)を書く時に使いました。  \\r\\nNuxt Routerでは`pages/{ファイル名}`を指定する。\\r\\n## contents/posts/markdown\\r\\nブログ書く時に使う。  \\r\\n記事はここに入れる。  \\r\\nNuxt Routerでは`posts/{ファイル名}`を指定する。\\r\\n\\r\\nなおどちらも`contents/*/markdown`に入れてね。（他にもjsonとかsummary.jsonとか有るけど気にするな。）  \\r\\nそうしないとJSON生成（ブログ一覧生成など）でコケる気がします。\\r\\n\\r\\n## markdownひながた\\r\\n↓これをmarkdownの先頭に書いてください。  \\r\\nそれぞれ適切な値を入れてね。\\r\\n```markdown\\r\\n---\\r\\ntitle: タイトル\\r\\ncreated_at: 2020-05-31\\r\\ntags:\\r\\n- Android\\r\\n---\\r\\n```\\r\\n\\r\\nいじょう？","bodyHtml":"<h1>自作ブログ(Nuxt.js+processmd)の使い方</h1>\\n<p>めも</p>\\n<h1>起動方法</h1>\\n<pre><code class=\\"hljs\\">npm run dev</code></pre><h1>ファイル構成</h1>\\n<p>多分こうなってるはず</p>\\n<ul>\\n<li>assets\\n<ul>\\n<li>CSSファイル置いてある（フォント指定のために）</li>\\n</ul>\\n</li>\\n<li>Components\\n<ul>\\n<li>Vue.jsのやつと同じだと思う。</li>\\n<li>UIの部品を分けて他で使い回す的な</li>\\n<li>AndroidのFragmentに近いかな？</li>\\n</ul>\\n</li>\\n<li>contents\\n<ul>\\n<li>重要フォルダ。</li>\\n<li>最重要なので後で詳しく。</li>\\n</ul>\\n</li>\\n<li>dist\\n<ul>\\n<li><code>nuxt generate</code>で書き出したファイルの置き場所です。</li>\\n<li>htmlがある。</li>\\n<li>あとはこのフォルダでWebサーバー建てるなりすれば見れるはずです。</li>\\n</ul>\\n</li>\\n<li>layouts\\n<ul>\\n<li>（Viewの階層的に）一番下に居るやつ。</li>\\n<li>AppBarとかNavigationDrawerはここに書いてある。</li>\\n<li>Androidで言うとActivity？</li>\\n</ul>\\n</li>\\n<li>middleware\\n<ul>\\n<li>さあ？</li>\\n</ul>\\n</li>\\n<li>node_modules\\n<ul>\\n<li>多分ライブラリが入ってる。基本いじらない。</li>\\n<li><s>Black holeよりも深い</s></li>\\n<li>npmコマンドでコケた時はまず消して<code>npm install</code>する。</li>\\n</ul>\\n</li>\\n<li>plugins\\n<ul>\\n<li>GoogleAnalyticsのためのJSが一個だけ置いてある。</li>\\n</ul>\\n</li>\\n<li>static\\n<ul>\\n<li>静的サイトジェネレートのときのfaviconとか？</li>\\n</ul>\\n</li>\\n<li>store\\n<ul>\\n<li>さあ？</li>\\n</ul>\\n</li>\\n<li>.から始まるファイル\\n<ul>\\n<li>基本触らないと思う</li>\\n</ul>\\n</li>\\n<li>nuxt.config.js\\n<ul>\\n<li>静的サイトジェネレートの時にどのファイルを作ればいいかとか書く。</li>\\n<li>Vuetifyでなんかやるときも書く。</li>\\n<li>cssとかも</li>\\n</ul>\\n</li>\\n<li>package-look.json\\n<ul>\\n<li>？</li>\\n</ul>\\n</li>\\n<li>package.json\\n<ul>\\n<li>このプログラムについてなど。</li>\\n<li>作者とかライセンスとかが書いてある。</li>\\n<li>必要なライブラリも書いてある。</li>\\n</ul>\\n</li>\\n<li>README.md\\n<ul>\\n<li>GitHub以外で見ること有る？</li>\\n</ul>\\n</li>\\n<li>tsconfig.json\\n<ul>\\n<li>？</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>contentsフォルダについて / 記事の書き方</h1>\\n<h2>共通</h2>\\n<p>記事を書いたら以下のコマンドを入れてね。（JSONファイルを更新するため）<br>\\n↓ブログ(posts)書いたとき</p>\\n<pre><code class=\\"hljs\\">npm run md</code></pre><p>↓固定ページ(markdown)書いたとき</p>\\n<pre><code class=\\"hljs\\">npm run page</code></pre><p>↓同時に実行する</p>\\n<pre><code class=\\"hljs\\">npm run markdown</code></pre><h2>contents/pages/markdown</h2>\\n<p>固定ページを書く時に使います。<br>\\nこのサイトでは<code>pages/about</code>(このサイトについて)を書く時に使いました。<br>\\nNuxt Routerでは<code>pages/{ファイル名}</code>を指定する。</p>\\n<h2>contents/posts/markdown</h2>\\n<p>ブログ書く時に使う。<br>\\n記事はここに入れる。<br>\\nNuxt Routerでは<code>posts/{ファイル名}</code>を指定する。</p>\\n<p>なおどちらも<code>contents/*/markdown</code>に入れてね。（他にもjsonとかsummary.jsonとか有るけど気にするな。）<br>\\nそうしないとJSON生成（ブログ一覧生成など）でコケる気がします。</p>\\n<h2>markdownひながた</h2>\\n<p>↓これをmarkdownの先頭に書いてください。<br>\\nそれぞれ適切な値を入れてね。</p>\\n<pre><code class=\\"hljs\\">---\\ntitle: タイトル\\ncreated_at: 2020-05-31\\ntags:\\n<span class=\\"hljs-section\\">- Android\\n---</span></code></pre><p>いじょう？</p>\\n","dir":"contents/posts/json","base":"usersmanual.json","ext":".json","sourceBase":"usersmanual.md","sourceExt":".md"}')},343:function(n,t,r){"use strict";r.r(t);r(35),r(36);var summary=r(309),e={validate:function(n){var t=n.params;return summary.b.includes("contents/posts/markdown/".concat(t.slug,".md"))},asyncData:function(n){var t=n.params;return Object.assign({},r(326)("./".concat(t.slug,".json")),{params:t})},mounted:function(){document.getElementById("title").innerText=this.title},head:function(){var title="".concat(this.title),n="posts/".concat(this.params.slug,"/");return{title:title,meta:[{hid:"og:url",property:"og:url",content:n},{hid:"og:title",property:"og:title",content:title}],link:[{rel:"canonical",href:n}]}},data:function(){return{instans:["best-friends.chat","pawoo.net"]}},methods:{shareDon:function(n){open("https://".concat(n,"/share?text=").concat(this.title,"\n").concat(location.href),"_brank")}},components:{TagGroup:r(314).a}},o=r(62),l=r(82),c=r.n(l),d=r(167),m=r(305),h=r(303),j=r(296),f=r(117),y=r(118),k=r(79),v=r(33),x=r(339),w=r(320),component=Object(o.a)(e,(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("v-card",{staticClass:"pa-5",staticStyle:{"margin-top":"-64px"},attrs:{elevation:"10"}},[r("div",{staticClass:"post-meta pa-2"},[r("v-icon",[n._v("mdi-file-upload-outline")]),n._v(" "),r("time",[n._v(n._s(new Date(this.created_at).toLocaleDateString())+" 投稿")])],1),n._v(" "),r("TagGroup",{attrs:{tags:this.tags}}),n._v(" "),r("v-divider"),n._v(" "),r("div",{attrs:{id:"content"},domProps:{innerHTML:n._s(n.bodyHtml)}}),n._v(" "),r("div",{attrs:{id:"count"}}),n._v(" "),r("v-divider"),n._v(" "),r("v-card-actions",[r("v-row",{attrs:{align:"center",justify:"end"}},[r("v-menu",{attrs:{"offset-y":""},scopedSlots:n._u([{key:"activator",fn:function(t){var e=t.on;return[r("v-btn",n._g({attrs:{text:"",color:"blue",dark:""}},e),[r("v-icon",[n._v("mdi-mastodon")]),n._v("Mastodonで共有？\n          ")],1)]}}])},[n._v(" "),r("v-list",n._l(n.instans,(function(t){return r("v-list-item",{key:t},[r("v-list-item-title",{staticStyle:{cursor:"pointer"},on:{click:function(r){return n.shareDon(t)}}},[n._v(n._s(t))])],1)})),1)],1)],1)],1)],1)}),[],!1,null,null,null);t.default=component.exports;c()(component,{VBtn:d.a,VCard:m.a,VCardActions:h.a,VDivider:j.a,VIcon:f.a,VList:y.a,VListItem:k.a,VListItemTitle:v.c,VMenu:x.a,VRow:w.a})}}]);