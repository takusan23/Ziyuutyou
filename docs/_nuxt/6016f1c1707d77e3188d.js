(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{315:function(n){n.exports=JSON.parse('{"a":{"contents/posts/json/ExoPlayerとMediaSessionを何となく使う.json":{"title":"ExoPlayerとMediaSessionを何となく使う","created_at":"2020-05-10T22:33:50.000Z","tags":["Android","MediaSession","ExoPlayer","Kotlin"],"dir":"contents/posts/json","base":"ExoPlayerとMediaSessionを何となく使う.json","ext":".json","sourceBase":"ExoPlayerとMediaSessionを何となく使う.md","sourceExt":".md"},"contents/posts/json/Android11のMANAGE-EXTERNAL-STORAGEを試す.json":{"title":"Android11のMANAGE_EXTERNAL_STORAGEを試す","created_at":"2020-05-04T00:44:24.000Z","tags":["Android","Android11"],"dir":"contents/posts/json","base":"Android11のMANAGE-EXTERNAL-STORAGEを試す.json","ext":".json","sourceBase":"Android11のMANAGE-EXTERNAL-STORAGEを試す.md","sourceExt":".md"},"contents/posts/json/first.json":{"title":"Nuxt.jsとprocessmdでブログ作りたい。","created_at":"2020-05-30 21:10:00","tags":["Nuxt.js","Markdown"],"dir":"contents/posts/json","base":"first.json","ext":".json","sourceBase":"first.md","sourceExt":".md"},"contents/posts/json/ExoPlayerにオフライン再生機能あるらしいので使ってみる.json":{"title":"ExoPlayerにオフライン再生機能あるらしいので使ってみる","created_at":"2020-05-09T20:21:48.000Z","tags":["Android","ExoPlayer","HLS","Kotlin"],"dir":"contents/posts/json","base":"ExoPlayerにオフライン再生機能あるらしいので使ってみる.json","ext":".json","sourceBase":"ExoPlayerにオフライン再生機能あるらしいので使ってみる.md","sourceExt":".md"},"contents/posts/json/OkHttpでダウンロード進捗が知りたい！.json":{"title":"OkHttpでダウンロード進捗が知りたい！","created_at":"2020-05-09T00:35:36.000Z","tags":["Android","OkHttp","Kotlin"],"dir":"contents/posts/json","base":"OkHttpでダウンロード進捗が知りたい！.json","ext":".json","sourceBase":"OkHttpでダウンロード進捗が知りたい！.md","sourceExt":".md"},"contents/posts/json/MastodonとMisskey同時に見れるクライアント作った？.json":{"title":"MastodonとMisskey同時に見れるクライアント作った？","created_at":"2020-05-16T20:46:04.000Z","tags":["Android","Kotlin","Mastodon","Misskey"],"dir":"contents/posts/json","base":"MastodonとMisskey同時に見れるクライアント作った？.json","ext":".json","sourceBase":"MastodonとMisskey同時に見れるクライアント作った？.md","sourceExt":".md"},"contents/posts/json/AndroidStudioで変に改行されるのを直す.json":{"title":"AndroidStudioで変に改行されるのを直す","created_at":"2020-05-17T00:54:03.000Z","tags":["Android","AndroidStudio"],"dir":"contents/posts/json","base":"AndroidStudioで変に改行されるのを直す.json","ext":".json","sourceBase":"AndroidStudioで変に改行されるのを直す.md","sourceExt":".md"},"contents/posts/json/画面回転しても尊厳損傷しないようにonSaveInstanceState使う.json":{"title":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う","created_at":"2020-05-17T00:32:19.000Z","tags":["Android","Kotlin"],"dir":"contents/posts/json","base":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う.json","ext":".json","sourceBase":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う.md","sourceExt":".md"},"contents/posts/json/AndroidのRoomを触ってみた.json":{"title":"AndroidのRoomを触ってみた","created_at":"2020-05-27T00:17:21.000Z","tags":["Android","Room","Kotlin","データベース"],"dir":"contents/posts/json","base":"AndroidのRoomを触ってみた.json","ext":".json","sourceBase":"AndroidのRoomを触ってみた.md","sourceExt":".md"},"contents/posts/json/usersmanual.json":{"title":"自作ブログ(Nuxt.js+processmd)の使い方","created_at":"2020-05-31 21:10:00","tags":["とりせつ","Markdown","Nuxt.js"],"dir":"contents/posts/json","base":"usersmanual.json","ext":".json","sourceBase":"usersmanual.md","sourceExt":".md"},"contents/posts/json/taihendattakoto.json":{"title":"これ作るのに大変だったこと","created_at":"2020-06-02T00:00:00.000Z","tags":["その他"],"dir":"contents/posts/json","base":"taihendattakoto.json","ext":".json","sourceBase":"taihendattakoto.md","sourceExt":".md"},"contents/posts/json/たちみどろいどのキャッシュ機能について.json":{"title":"たちみどろいどのキャッシュ機能について","created_at":"2020-04-08T18:54:12.000Z","tags":["Android","たちみどろいど","ニコニコ動画"],"dir":"contents/posts/json","base":"たちみどろいどのキャッシュ機能について.json","ext":".json","sourceBase":"たちみどろいどのキャッシュ機能について.md","sourceExt":".md"},"contents/posts/json/全コメントきしめんやりたい.json":{"title":"全コメントきしめんやりたい","created_at":"2020-05-20T23:06:17.000Z","tags":["Android","たちみどろいど","ニコニコ動画"],"dir":"contents/posts/json","base":"全コメントきしめんやりたい.json","ext":".json","sourceBase":"全コメントきしめんやりたい.md","sourceExt":".md"}},"b":["contents/posts/markdown/Android11のMANAGE-EXTERNAL-STORAGEを試す.md","contents/posts/markdown/AndroidStudioで変に改行されるのを直す.md","contents/posts/markdown/AndroidのRoomを触ってみた.md","contents/posts/markdown/ExoPlayerとMediaSessionを何となく使う.md","contents/posts/markdown/ExoPlayerにオフライン再生機能あるらしいので使ってみる.md","contents/posts/markdown/first.md","contents/posts/markdown/MastodonとMisskey同時に見れるクライアント作った？.md","contents/posts/markdown/OkHttpでダウンロード進捗が知りたい！.md","contents/posts/markdown/taihendattakoto.md","contents/posts/markdown/usersmanual.md","contents/posts/markdown/たちみどろいどのキャッシュ機能について.md","contents/posts/markdown/全コメントきしめんやりたい.md","contents/posts/markdown/画面回転しても尊厳損傷しないようにonSaveInstanceState使う.md"]}')},325:function(n,t,e){var map={"./Android11のMANAGE-EXTERNAL-STORAGEを試す.json":326,"./AndroidStudioで変に改行されるのを直す.json":327,"./AndroidのRoomを触ってみた.json":328,"./ExoPlayerとMediaSessionを何となく使う.json":329,"./ExoPlayerにオフライン再生機能あるらしいので使ってみる.json":330,"./MastodonとMisskey同時に見れるクライアント作った？.json":331,"./OkHttpでダウンロード進捗が知りたい！.json":332,"./first.json":333,"./hayaokisitakunai.json":334,"./mirai.json":335,"./taihendattakoto.json":336,"./usersmanual.json":337,"./たちみどろいどのキャッシュ機能について.json":338,"./全コメントきしめんやりたい.json":339,"./画面回転しても尊厳損傷しないようにonSaveInstanceState使う.json":340};function l(n){var t=o(n);return e(t)}function o(n){if(!e.o(map,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return map[n]}l.keys=function(){return Object.keys(map)},l.resolve=o,n.exports=l,l.id=325},326:function(n){n.exports=JSON.parse('{"title":"Android11のMANAGE_EXTERNAL_STORAGEを試す","created_at":"2020-05-04T00:44:24.000Z","tags":["Android","Android11"],"bodyContent":"どうもこんばんわ。  \\nニコ生で「とある科学の超電磁砲T」の1~12話一挙放送見ました。初見だったけど面白かったです。OPかっこいい。  \\n1期2期もいつか見たいですね。\\n\\n# 本題\\nAndroid 11 からまーたファイルアクセスの方法が変わるらしい。はー？  \\nどうやらファイルマネージャーアプリとかバックアップアプリ向けのファイルアクセス権限**MANAGE_EXTERNAL_STORAGE**が追加されるそうな。\\n\\n# `MANAGE_EXTERNAL_STORAGE` #とは\\nAndroid 9以前のように生パス（おそらく`/storage/emulated/0/Download`みたいなパスのこと）でのアクセスができるようになる。  \\n`ACTION_OPEN_DOCUMENT_TREE`でSDカードへアクセスできないしSDカードアクセスするにはこれしかない？。もうSDカード使わせる気ないなこれ。  \\n\\nそんな有能そうな権限ですが  \\n\\n> デベロッパープレビューの今後のバージョンでは、この権限が必要なアプリ向けのガイドラインをGoogle Playに提供する予定です。\\n\\n[引用元](https://developer.android.com/preview/privacy/storage#manage-device-storage)\\n\\nがなんとか書いてあるのでなんか追加で作業が必要なのかな。  \\nむやみにぽんぽん打てる訳ではないっぽい？\\n\\nちなみに`MANAGE_EXTERNAL_STORAGE`でも外部のアプリ固有領域(Android/data)にはアクセスできません。この領域ってもうファイルマネージャーとか端末単体じゃ見れないのかな（できないのそこそこ不便）。\\n\\n# 環境\\n| name           | value        |\\n|----------------|--------------|\\n| Android        | 11 DP3       |\\n| Android Studio | 4.1 Canary 8 |\\n| 言語           | Kotlin       |\\n\\n# やってみる\\n## Android 11のAPI使えるように\\nAndroid 11のSDKは各自入れてきてね。  \\nappフォルダの方のbuild.gradle開いてandroid{}のところを書き換えます。\\n```gradle\\nandroid {\\n    compileSdkVersion \'android-R\'\\n    buildToolsVersion \\"29.0.3\\"\\n\\n    defaultConfig {\\n        applicationId \\"com.example.manageexternalstoragesample\\"\\n        minSdkVersion \\"R\\"\\n        targetSdkVersion 29\\n        versionCode 1\\n        versionName \\"1.0\\"\\n\\n        testInstrumentationRunner \\"androidx.test.runner.AndroidJUnitRunner\\"\\n    }\\n\\n    buildTypes {\\n        release {\\n            minifyEnabled false\\n            proguardFiles getDefaultProguardFile(\'proguard-android-optimize.txt\'), \'proguard-rules.pro\'\\n        }\\n    }\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n    kotlinOptions {\\n        jvmTarget = \'1.8\'\\n    }\\n}\\n```\\n\\n`compileSdkVersion \'android-R\'`でいいらしい？\\n\\n## 権限追加\\n何故か補充が効かないのでコピペ\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    package=\\"com.example.manageexternalstoragesample\\">\\n\\n    <uses-permission android:name=\\"android.permission.MANAGE_EXTERNAL_STORAGE\\" />\\n\\n    <application\\n        android:allowBackup=\\"true\\"\\n        android:icon=\\"@mipmap/ic_launcher\\"\\n        android:label=\\"@string/app_name\\"\\n        android:roundIcon=\\"@mipmap/ic_launcher_round\\"\\n        android:supportsRtl=\\"true\\"\\n        android:theme=\\"@style/Theme.ManageExternalStorageSample\\">\\n        <activity android:name=\\".MainActivity\\">\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\n\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\n            </intent-filter>\\n        </activity>\\n    </application>\\n\\n</manifest>\\n```\\n\\n## レイアウト\\nそろそろConstraintLayout使えるようになりたい（難しそう）\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:gravity=\\"center\\"\\n    android:orientation=\\"vertical\\"\\n    tools:context=\\".MainActivity\\">\\n    \\n    <Button\\n        android:id=\\"@+id/button\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"権限付与\\" />\\n\\n    <Button\\n        android:id=\\"@+id/show\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"取得\\" />\\n\\n    <Button\\n        android:id=\\"@+id/read\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"書き込み\\" />\\n</LinearLayout>\\n```\\n\\n## 権限もらう\\nこれも補充が効かないのでIntentの中身はコピペで\\n```kotlin\\nbutton.setOnClickListener {\\n    val intent = Intent(\\"android.settings.MANAGE_ALL_FILES_ACCESS_PERMISSION\\")\\n    startActivity(intent)\\n}\\n```\\nAndroid 11から他のアプリに重ねるの権限取得で直接アプリの設定に飛べなくなりましたが、これも直接飛べずに一覧画面から選ぶ形式になってます。\\n\\n権限取得ボタン押すと一覧画面でます\\n\\n{% asset_img list.png list %}\\n\\n{% asset_img screen.png screen %}\\n\\n\\n## 生パスで読み込んでみる\\nAndroid 10から使えなくなった以下のコードも ~~`MANAGE_EXTERNAL_STORAGE`権限を持っていれば・・・！~~  \\nAndroid 11では**読み込みなら読み込み権限(READ_EXTERNAL_STORAGE)すらいらない**です。  \\nただこの仕様はAndroid 11で追加されたため、Android 10でこれ使うにはManifestに`requestLegacyExternalStorage=\\"true\\"`(Scoped Storage無効化)を指定する必要があります。\\n```kotlin\\nshow.setOnClickListener {\\n    File(\\"/storage/emulated/0/\\").listFiles().forEach {\\n        println(it.name)\\n    }\\n}\\n```\\n出力結果\\n```console\\nAndroid\\nMusic\\nPodcasts\\nRingtones\\nAlarms\\nNotifications\\nPictures\\nMovies\\nDownload\\nDCIM\\n```\\n以下略\\n\\n## 生パスで書き込んで見る\\nAndroid 10から使えなくなった以下のコードも`MANAGE_EXTERNAL_STORAGE`権限の前では・・・！  \\nあとボタンのIDが`read`になってるけど`write`が命名的には正解ですね。プログラム的には間違ってないけど。\\n```kotlin\\nread.setOnClickListener {\\n    File(\\"/storage/emulated/0/書き込みテスト.txt\\").apply {\\n        createNewFile()\\n        writeText(\\"書き込めてる～？\\")\\n    }\\n}\\n```\\n\\nKotlinの拡張関数`writeText()`使ってるから一行で書き込めてるけどJavaだと長くなりそう。\\n\\n多分これもAndroid 10を対象にするにはScoped Storageを無効にする必要があります多分。\\n\\n{% asset_img write.png write %}\\n\\n## 全部くっつけたコード\\n\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        button.setOnClickListener {\\n            val intent = Intent(\\"android.settings.MANAGE_ALL_FILES_ACCESS_PERMISSION\\")\\n            startActivity(intent)\\n        }\\n\\n        show.setOnClickListener {\\n            File(\\"/storage/emulated/0/\\").listFiles().forEach {\\n                println(it.name)\\n            }\\n        }\\n\\n        read.setOnClickListener {\\n            File(\\"/storage/emulated/0/書き込みテスト.txt\\").apply {\\n                createNewFile()\\n                writeText(\\"書き込めてる～？\\")\\n            }\\n        }\\n\\n    }\\n}\\n```\\n\\n# おわりに\\nくっそめんどくさくね？(SAFだのScopedStorageだのMediaStoreだの)  \\nあとSDカード入る実機ほしい。Xperiaの21:9使ってみたい。  \\n（S7 EdgeあるけどなんかSDM 820の割にNexus 7 2013のほうが動くからハズレSoC引いた？）\\n\\n# ソースコード\\nhttps://github.com/takusan23/ManageExternalStorageSample","bodyHtml":"<p>どうもこんばんわ。<br>\\nニコ生で「とある科学の超電磁砲T」の1~12話一挙放送見ました。初見だったけど面白かったです。OPかっこいい。<br>\\n1期2期もいつか見たいですね。</p>\\n<h1>本題</h1>\\n<p>Android 11 からまーたファイルアクセスの方法が変わるらしい。はー？<br>\\nどうやらファイルマネージャーアプリとかバックアップアプリ向けのファイルアクセス権限<strong>MANAGE_EXTERNAL_STORAGE</strong>が追加されるそうな。</p>\\n<h1><code>MANAGE_EXTERNAL_STORAGE</code> #とは</h1>\\n<p>Android 9以前のように生パス（おそらく<code>/storage/emulated/0/Download</code>みたいなパスのこと）でのアクセスができるようになる。<br>\\n<code>ACTION_OPEN_DOCUMENT_TREE</code>でSDカードへアクセスできないしSDカードアクセスするにはこれしかない？。もうSDカード使わせる気ないなこれ。</p>\\n<p>そんな有能そうな権限ですが</p>\\n<blockquote>\\n<p>デベロッパープレビューの今後のバージョンでは、この権限が必要なアプリ向けのガイドラインをGoogle Playに提供する予定です。</p>\\n</blockquote>\\n<p><a href=\\"https://developer.android.com/preview/privacy/storage#manage-device-storage\\">引用元</a></p>\\n<p>がなんとか書いてあるのでなんか追加で作業が必要なのかな。<br>\\nむやみにぽんぽん打てる訳ではないっぽい？</p>\\n<p>ちなみに<code>MANAGE_EXTERNAL_STORAGE</code>でも外部のアプリ固有領域(Android/data)にはアクセスできません。この領域ってもうファイルマネージャーとか端末単体じゃ見れないのかな（できないのそこそこ不便）。</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>name</th>\\n<th>value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Android</td>\\n<td>11 DP3</td>\\n</tr>\\n<tr>\\n<td>Android Studio</td>\\n<td>4.1 Canary 8</td>\\n</tr>\\n<tr>\\n<td>言語</td>\\n<td>Kotlin</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>やってみる</h1>\\n<h2>Android 11のAPI使えるように</h2>\\n<p>Android 11のSDKは各自入れてきてね。<br>\\nappフォルダの方のbuild.gradle開いてandroid{}のところを書き換えます。</p>\\n<pre><code class=\\"hljs\\">android {\\n    compileSdkVersion <span class=\\"hljs-string\\">\'android-R\'</span>\\n    buildToolsVersion <span class=\\"hljs-string\\">\\"29.0.3\\"</span>\\n\\n    defaultConfig {\\n        applicationId <span class=\\"hljs-string\\">\\"com.example.manageexternalstoragesample\\"</span>\\n        minSdkVersion <span class=\\"hljs-string\\">\\"R\\"</span>\\n        targetSdkVersion <span class=\\"hljs-number\\">29</span>\\n        versionCode <span class=\\"hljs-number\\">1</span>\\n        versionName <span class=\\"hljs-string\\">\\"1.0\\"</span>\\n\\n        testInstrumentationRunner <span class=\\"hljs-string\\">\\"androidx.test.runner.AndroidJUnitRunner\\"</span>\\n    }\\n\\n    buildTypes {\\n        release {\\n            minifyEnabled <span class=\\"hljs-keyword\\">false</span>\\n            proguardFiles getDefaultProguardFile(<span class=\\"hljs-string\\">\'proguard-android-optimize.txt\'</span>), <span class=\\"hljs-string\\">\'proguard-rules.pro\'</span>\\n        }\\n    }\\n    compileOptions {\\n        <span class=\\"hljs-keyword\\">sourceCompatibility</span> JavaVersion.VERSION_1_8\\n        <span class=\\"hljs-keyword\\">targetCompatibility</span> JavaVersion.VERSION_1_8\\n    }\\n    kotlinOptions {\\n        jvmTarget = <span class=\\"hljs-string\\">\'1.8\'</span>\\n    }\\n}</code></pre><p><code>compileSdkVersion \'android-R\'</code>でいいらしい？</p>\\n<h2>権限追加</h2>\\n<p>何故か補充が効かないのでコピペ</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">manifest</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">package</span>=<span class=\\"hljs-string\\">\\"com.example.manageexternalstoragesample\\"</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">uses-permission</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.permission.MANAGE_EXTERNAL_STORAGE\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">application</span>\\n        <span class=\\"hljs-attr\\">android:allowBackup</span>=<span class=\\"hljs-string\\">\\"true\\"</span>\\n        <span class=\\"hljs-attr\\">android:icon</span>=<span class=\\"hljs-string\\">\\"@mipmap/ic_launcher\\"</span>\\n        <span class=\\"hljs-attr\\">android:label</span>=<span class=\\"hljs-string\\">\\"@string/app_name\\"</span>\\n        <span class=\\"hljs-attr\\">android:roundIcon</span>=<span class=\\"hljs-string\\">\\"@mipmap/ic_launcher_round\\"</span>\\n        <span class=\\"hljs-attr\\">android:supportsRtl</span>=<span class=\\"hljs-string\\">\\"true\\"</span>\\n        <span class=\\"hljs-attr\\">android:theme</span>=<span class=\\"hljs-string\\">\\"@style/Theme.ManageExternalStorageSample\\"</span>&gt;</span>\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">activity</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">intent-filter</span>&gt;</span>\\n                <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">action</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.intent.action.MAIN\\"</span> /&gt;</span>\\n\\n                <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">category</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.intent.category.LAUNCHER\\"</span> /&gt;</span>\\n            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">intent-filter</span>&gt;</span>\\n        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">activity</span>&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">application</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">manifest</span>&gt;</span></code></pre><h2>レイアウト</h2>\\n<p>そろそろConstraintLayout使えるようになりたい（難しそう）</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:gravity</span>=<span class=\\"hljs-string\\">\\"center\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n    \\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"権限付与\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/show\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"取得\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/read\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"書き込み\\"</span> /&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><h2>権限もらう</h2>\\n<p>これも補充が効かないのでIntentの中身はコピペで</p>\\n<pre><code class=\\"hljs\\">button.setOnClickListener {\\n    <span class=\\"hljs-keyword\\">val</span> intent = Intent(<span class=\\"hljs-string\\">\\"android.settings.MANAGE_ALL_FILES_ACCESS_PERMISSION\\"</span>)\\n    startActivity(intent)\\n}</code></pre><p>Android 11から他のアプリに重ねるの権限取得で直接アプリの設定に飛べなくなりましたが、これも直接飛べずに一覧画面から選ぶ形式になってます。</p>\\n<p>権限取得ボタン押すと一覧画面でます</p>\\n<p>{% asset_img list.png list %}</p>\\n<p>{% asset_img screen.png screen %}</p>\\n<h2>生パスで読み込んでみる</h2>\\n<p>Android 10から使えなくなった以下のコードも <s><code>MANAGE_EXTERNAL_STORAGE</code>権限を持っていれば・・・！</s><br>\\nAndroid 11では<strong>読み込みなら読み込み権限(READ_EXTERNAL_STORAGE)すらいらない</strong>です。<br>\\nただこの仕様はAndroid 11で追加されたため、Android 10でこれ使うにはManifestに<code>requestLegacyExternalStorage=&quot;true&quot;</code>(Scoped Storage無効化)を指定する必要があります。</p>\\n<pre><code class=\\"hljs\\">show.setOnClickListener {\\n    File(<span class=\\"hljs-string\\">\\"/storage/emulated/0/\\"</span>).listFiles().forEach {\\n        println(it.name)\\n    }\\n}</code></pre><p>出力結果</p>\\n<pre><code class=\\"hljs\\">Android\\nMusic\\nPodcasts\\nRingtones\\nAlarms\\nNotifications\\nPictures\\nMovies\\nDownload\\nDCIM</code></pre><p>以下略</p>\\n<h2>生パスで書き込んで見る</h2>\\n<p>Android 10から使えなくなった以下のコードも<code>MANAGE_EXTERNAL_STORAGE</code>権限の前では・・・！<br>\\nあとボタンのIDが<code>read</code>になってるけど<code>write</code>が命名的には正解ですね。プログラム的には間違ってないけど。</p>\\n<pre><code class=\\"hljs\\">read.setOnClickListener {\\n    File(<span class=\\"hljs-string\\">\\"/storage/emulated/0/書き込みテスト.txt\\"</span>).apply {\\n        createNewFile()\\n        writeText(<span class=\\"hljs-string\\">\\"書き込めてる～？\\"</span>)\\n    }\\n}</code></pre><p>Kotlinの拡張関数<code>writeText()</code>使ってるから一行で書き込めてるけどJavaだと長くなりそう。</p>\\n<p>多分これもAndroid 10を対象にするにはScoped Storageを無効にする必要があります多分。</p>\\n<p>{% asset_img write.png write %}</p>\\n<h2>全部くっつけたコード</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        button.setOnClickListener {\\n            <span class=\\"hljs-keyword\\">val</span> intent = Intent(<span class=\\"hljs-string\\">\\"android.settings.MANAGE_ALL_FILES_ACCESS_PERMISSION\\"</span>)\\n            startActivity(intent)\\n        }\\n\\n        show.setOnClickListener {\\n            File(<span class=\\"hljs-string\\">\\"/storage/emulated/0/\\"</span>).listFiles().forEach {\\n                println(it.name)\\n            }\\n        }\\n\\n        read.setOnClickListener {\\n            File(<span class=\\"hljs-string\\">\\"/storage/emulated/0/書き込みテスト.txt\\"</span>).apply {\\n                createNewFile()\\n                writeText(<span class=\\"hljs-string\\">\\"書き込めてる～？\\"</span>)\\n            }\\n        }\\n\\n    }\\n}</code></pre><h1>おわりに</h1>\\n<p>くっそめんどくさくね？(SAFだのScopedStorageだのMediaStoreだの)<br>\\nあとSDカード入る実機ほしい。Xperiaの21:9使ってみたい。<br>\\n（S7 EdgeあるけどなんかSDM 820の割にNexus 7 2013のほうが動くからハズレSoC引いた？）</p>\\n<h1>ソースコード</h1>\\n<p>https://github.com/takusan23/ManageExternalStorageSample</p>\\n","dir":"contents/posts/json","base":"Android11のMANAGE-EXTERNAL-STORAGEを試す.json","ext":".json","sourceBase":"Android11のMANAGE-EXTERNAL-STORAGEを試す.md","sourceExt":".md"}')},327:function(n){n.exports=JSON.parse('{"title":"AndroidStudioで変に改行されるのを直す","created_at":"2020-05-17T00:54:03.000Z","tags":["Android","AndroidStudio"],"bodyContent":"自分用メモ\\n\\n# 引数の部分改行しすぎ問題\\n```kotlin\\noverride fun onCreateView(\\n    inflater: LayoutInflater,\\n    container: ViewGroup?,\\n    savedInstanceState: Bundle?\\n): View? {\\n    return inflater.inflate(R.layout.fragment_screen_roration, container, false)\\n}\\n```\\n引数の部分が改行されててきつい\\n\\n# 設定\\n設定を開いて\\nEditor > Code Style > Kotlin と進んで  \\n`Wapping and Brances`の`warp if long`と`Chop down if long`を全部`Do not warp`にします。  \\n`Warp always`のところはやんなくていいと思う\\n\\n{%asset_img setting.png setting%}\\n\\n終わり","bodyHtml":"<p>自分用メモ</p>\\n<h1>引数の部分改行しすぎ問題</h1>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreateView</span><span class=\\"hljs-params\\">(\\n    inflater: <span class=\\"hljs-type\\">LayoutInflater</span>,\\n    container: <span class=\\"hljs-type\\">ViewGroup</span>?,\\n    savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?\\n)</span></span>: View? {\\n    <span class=\\"hljs-keyword\\">return</span> inflater.inflate(R.layout.fragment_screen_roration, container, <span class=\\"hljs-literal\\">false</span>)\\n}</code></pre><p>引数の部分が改行されててきつい</p>\\n<h1>設定</h1>\\n<p>設定を開いて\\nEditor &gt; Code Style &gt; Kotlin と進んで<br>\\n<code>Wapping and Brances</code>の<code>warp if long</code>と<code>Chop down if long</code>を全部<code>Do not warp</code>にします。<br>\\n<code>Warp always</code>のところはやんなくていいと思う</p>\\n<p>{%asset_img setting.png setting%}</p>\\n<p>終わり</p>\\n","dir":"contents/posts/json","base":"AndroidStudioで変に改行されるのを直す.json","ext":".json","sourceBase":"AndroidStudioで変に改行されるのを直す.md","sourceExt":".md"}')},328:function(n){n.exports=JSON.parse('{"title":"AndroidのRoomを触ってみた","created_at":"2020-05-27T00:17:21.000Z","tags":["Android","Room","Kotlin","データベース"],"bodyContent":"どうもこんばんわ。眠いです。  \\n冬休みの宿題では保健の課題が出ましたが、休校期間の宿題ではお昼ごはんを作る宿題が出ました。  \\n\\n# ほんだい\\nAndroidのRoomってのを触ってみたい。SQLiteよりRoomを使うことを**Googleが強く推奨**してるのでそのうちやるんだしやるかって感じで。  \\n\\n# Room #とは\\nデータベース。多分SQLiteを使いやすくした物だと思う。  \\nそれで`抽象化レイヤ`ってなに？\\n\\n# SQLite vs Room\\n| できること         | SQLite                     | Room                                                |\\n|--------------------|----------------------------|-----------------------------------------------------|\\n| クエリ             | アプリ実行時まで分からない | コンパイル時（それ以前にIDEが）間違いを教えてくれる |\\n| UIスレッドでの実行 | できる                     | できない                                            |\\n\\nあとは各自調べてみて。既存のデータベースをRoomにも移行できるらしい？（要検証）\\n\\n# 環境\\n| なまえ  | あたい                    |\\n|---------|---------------------------|\\n| 端末    | Pixel 3 XL / Nexus 7 2013 |\\n| Android | 11 DP 4 / 10 Root権限あり |\\n| 言語    | Kotlin                    |\\n\\n今回は生成後にデータベースのファイルを見てみたいのでRootedな端末を用意しました（んなことよりNexus 7の後継出せよ）\\n\\n# ライブラリ入れます\\n#SQLite vs Room の項目で**RoomはUIスレッドでは使えない**仕様なため、Roomと一緒にコルーチンも入れます。\\n```gradle\\napply plugin: \'kotlin-kapt\' // 一番上に\\n// 省略\\ndependencies {\\n// Room\\ndef room_version = \\"2.2.5\\"\\nimplementation \\"androidx.room:room-runtime:$room_version\\"\\nimplementation \\"androidx.room:room-ktx:$room_version\\"\\nkapt \\"androidx.room:room-compiler:$room_version\\"\\n// Coroutines\\nimplementation \\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\\"\\nimplementation \\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\\"\\n// 省略\\n}\\n```\\n\\n# データベースつくる\\n習うより慣れろで記事を書いてるので用語がわかりません。  \\nRoomなデータベースを作るには3つのコンポーネントで構成されてるそうです。\\n\\n- RoomDatabase\\n    - データベースにアクセスする時に使う\\n- Entity\\n    - データベースのテーブルです？\\n    - 主キーとか名前とか保存したい値はここで定義します。\\n    - SQLite時代では`create table ~`の部分。\\n    - **データクラスです**\\n- Dao\\n    - データベースから値を取り出す時に使う。\\n    - クエリとかはここに書く\\n    - 追加とか削除とかは特にクエリ書かなくても（私もわからん）できる\\n    - クエリは実行前に間違いを教えてくれる\\n\\n## Entity\\n保存する値を定義します。Excelだと一番上の横の行ですね。  \\n特に思いつかなかったのでメモでも保存してみますか\\n\\n```kotlin\\n@Entity\\ndata class TestDBEntity(\\n    @PrimaryKey(autoGenerate = true) val id: Int = 0, // 主キー\\n    @ColumnInfo(name = \\"memo\\") val memo: String\\n)\\n```\\n\\n### @PrimaryKeyと@ColumnInfoについて\\n@Entityはおまじないです（テーブルですよって目印）  \\n`@PrimaryKey`は主キーの設定の時に指定します。主キーが何なのかあんまよく分かってませんが多分消す時に便利です（他とは被らない）。\\n後ろの`autoGenerate = true`は主キーを自動で生成しますよってことだと思います。\\n`@ColumnInfo(name = \\"memo\\")`ってのはデータベースの中ではnameに指定した値（今回は`memo`ですが、多分スネークケースで書く）を使うけど、  \\nプログラムから扱う時はデータクラスの変数名で書けるよってことだと思います。\\n\\n## Dao\\nここではデータベースにアクセスする時に使う関数たちを書いていきます。  \\nSQLite時代の`query()`みたいな役割です（それにしてもquery()の引数の後半null何個書くんだよって毎回思いますね）。\\n\\n```kotlin\\n@Dao\\ninterface TestDBDao {\\n    /** 全データ取得 */\\n    @Query(\\"SELECT * FROM TestDBEntity\\")\\n    fun getAll(): List<TestDBEntity>\\n    \\n    /** データ更新 */\\n    @Update\\n    fun update(testDBEntity: TestDBEntity)\\n\\n    /** データ追加 */\\n    @Insert\\n    fun insert(testDBEntity: TestDBEntity)\\n\\n    /** データ削除 */\\n    @Delete\\n    fun delete(testDBEntity: TestDBEntity)\\n}\\n```\\n\\n`getAll()`のクエリ、ちゃんとFROMの`TestDBEntity`、ちゃんと補充されたのすごい  \\n基本的なもの（@Insertとか）は最初からあるようです。  \\n複雑なものはクエリを書けばできます。\\n\\n## データベース\\n説明が難しいからなしで\\n\\n```kotlin\\n@Database(entities = [TestDBEntity::class], version = 1)\\nabstract class TestDB : RoomDatabase() {\\n    abstract fun testDao(): TestDBDao\\n}\\n```\\n\\nこれで用意ができました。\\n\\n# Activityからデータベースにアクセスする\\n\\n## activity_main.xml\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:orientation=\\"vertical\\"\\n    tools:context=\\".MainActivity\\">\\n\\n    <EditText\\n        android:id=\\"@+id/editText\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:ems=\\"10\\"\\n        android:inputType=\\"textPersonName\\"\\n        android:hint=\\"メモ入れてね\\"\\n        android:text=\\"\\" />\\n\\n    <LinearLayout\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:orientation=\\"horizontal\\">\\n\\n        <Button\\n            android:id=\\"@+id/add_button\\"\\n            android:layout_width=\\"match_parent\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:layout_weight=\\"1\\"\\n            android:text=\\"追加\\" />\\n\\n        <Button\\n            android:id=\\"@+id/load_button\\"\\n            android:layout_width=\\"match_parent\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:layout_weight=\\"1\\"\\n            android:text=\\"読み込み\\" />\\n    </LinearLayout>\\n\\n    <TextView\\n        android:id=\\"@+id/memo_textview\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"match_parent\\"\\n        app:layout_constraintBottom_toBottomOf=\\"parent\\"\\n        app:layout_constraintLeft_toLeftOf=\\"parent\\"\\n        app:layout_constraintRight_toRightOf=\\"parent\\"\\n        app:layout_constraintTop_toTopOf=\\"parent\\" />\\n\\n</LinearLayout>\\n```\\n\\n## MainActivity.kt\\n\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // 読み込み\\n        loadDB()\\n\\n        // 読み込みボタン押したら読み込む\\n        load_button.setOnClickListener {\\n            loadDB()\\n        }\\n\\n        // 書き込む\\n        add_button.setOnClickListener {\\n            writeDB()\\n        }\\n\\n    }\\n\\n    /** データクラスに追加する */\\n    private fun writeDB() {\\n        val text = editText.text.toString()\\n        GlobalScope.launch {\\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\\n            val database =\\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \\"TestDB\\").build()\\n            val dao = database.testDao()\\n            // 書き込むデータクラス作る\\n            val data = TestDBEntity(memo = text)\\n            // 書き込む\\n            dao.insert(data)\\n        }\\n    }\\n\\n    /** データベースから読み込む */\\n    private fun loadDB() {\\n        GlobalScope.launch(Dispatchers.Main) {\\n            // まっさらに\\n            memo_textview.text = \\"\\"\\n            // UIスレッドでは実行できないためコルーチン\\n            val list = withContext(Dispatchers.IO) {\\n                // データベース用意\\n                val database =\\n                    Room.databaseBuilder(this@MainActivity, TestDB::class.java, \\"TestDB\\").build()\\n                val dao = database.testDao()\\n                dao.getAll()\\n            }\\n            // TextViewに表示\\n            list.forEach {\\n                memo_textview.append(\\"${it.memo}\\\\n\\")\\n            }\\n        }\\n    }\\n}\\n```\\n\\n起動して→メモを入力して→追加を押す→読み込み押す  \\nと下に入力した内容が表示されているはずです。やったね８８８８８８\\n\\n{%asset_img add.png add%}\\n\\nSQLite時代の追加と比べて分かりやすくなってることがわかりますね～\\n```kotlin\\nval contentValues = ContentValues()\\ncontentValues.put(\\"memo\\", \\"めもだよー\\")\\nsqLiteDatabase.insert(\\"table_name\\", null, contentValues)\\n```\\n\\n# 少し凝ったことをやる\\n削除に関する関数を書き足してみる。  \\nというわけで`TestDBDao.kt`に書き足します。\\n\\n```kotlin\\n/** 指定したidのデータを消す */\\n@Query(\\"DELETE FROM TestDBEntity WHERE id = :id\\")\\nfun deleteById(id: Int)\\n\\n/** 指定したメモのデータを消す */\\n@Query(\\"DELETE FROM TestDBEntity WHERE memo = :memo\\")\\nfun deleteByMemo(memo:String)\\n```\\n\\nSQLite時代ではこんな感じに書いてましたね\\n\\n```kotlin\\ndelete(\\"table_name\\", \\"memo=?\\", arrayOf(memo))\\n```\\n\\nこれはidが引数と同じ時に消すというクエリです（多分）  \\n\\nあとは消すボタンをActivityに置いて\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:orientation=\\"vertical\\"\\n    tools:context=\\".MainActivity\\">\\n\\n    <EditText\\n        android:id=\\"@+id/editText\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:ems=\\"10\\"\\n        android:hint=\\"メモ入れてね\\"\\n        android:inputType=\\"textPersonName\\"\\n        android:text=\\"\\" />\\n\\n    <LinearLayout\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:orientation=\\"horizontal\\">\\n\\n        <Button\\n            android:id=\\"@+id/add_button\\"\\n            android:layout_width=\\"match_parent\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:layout_weight=\\"1\\"\\n            android:text=\\"追加\\" />\\n\\n        <Button\\n            android:id=\\"@+id/load_button\\"\\n            android:layout_width=\\"match_parent\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:layout_weight=\\"1\\"\\n            android:text=\\"読み込み\\" />\\n\\n        <Button\\n            android:id=\\"@+id/delete_button\\"\\n            android:layout_width=\\"match_parent\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:layout_weight=\\"1\\"\\n            android:text=\\"削除\\" />\\n    </LinearLayout>\\n\\n    <TextView\\n        android:id=\\"@+id/memo_textview\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"match_parent\\"\\n        app:layout_constraintBottom_toBottomOf=\\"parent\\"\\n        app:layout_constraintLeft_toLeftOf=\\"parent\\"\\n        app:layout_constraintRight_toRightOf=\\"parent\\"\\n        app:layout_constraintTop_toTopOf=\\"parent\\" />\\n\\n</LinearLayout>\\n```\\n\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // 読み込み\\n        loadDB()\\n\\n        // 読み込みボタン押したら読み込む\\n        load_button.setOnClickListener {\\n            loadDB()\\n        }\\n\\n        // 書き込む\\n        add_button.setOnClickListener {\\n            writeDB()\\n        }\\n\\n        // 削除する\\n        delete_button.setOnClickListener {\\n            deleteDB()\\n        }\\n\\n    }\\n\\n    private fun deleteDB() {\\n        val text = editText.text.toString()\\n        GlobalScope.launch {\\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\\n            val database =\\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \\"TestDB\\").build()\\n            val dao = database.testDao()\\n            // 削除する\\n            dao.deleteByMemo(text)\\n        }\\n    }\\n\\n    /** データクラスに追加する */\\n    private fun writeDB() {\\n        val text = editText.text.toString()\\n        GlobalScope.launch {\\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\\n            val database =\\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \\"TestDB\\").build()\\n            val dao = database.testDao()\\n            // 書き込むデータクラス作る\\n            val data = TestDBEntity(memo = text)\\n            // 書き込む\\n            dao.insert(data)\\n        }\\n    }\\n\\n    /** データベースから読み込む */\\n    private fun loadDB() {\\n        GlobalScope.launch(Dispatchers.Main) {\\n            // まっさらに\\n            memo_textview.text = \\"\\"\\n            // UIスレッドでは実行できないためコルーチン\\n            val list = withContext(Dispatchers.IO) {\\n                // データベース用意\\n                val database =\\n                    Room.databaseBuilder(this@MainActivity, TestDB::class.java, \\"TestDB\\").build()\\n                val dao = database.testDao()\\n                dao.getAll()\\n            }\\n            // TextViewに表示\\n            list.forEach {\\n                memo_textview.append(\\"id=${it.id} | memo=${it.memo}\\\\n\\")\\n            }\\n        }\\n    }\\n}\\n```\\n\\nこれですでにあるメモの内容を入れたら削除できる機能が追加されました。\\n\\n{%asset_img delete.png delete%}\\n\\n# Root取得済み環境でデータベースを覗く\\n最近はAndroidのRoot化の話題あんま聞かないですね（XperiaはZ4から国内版はまじで取れなくなったし。）  \\nそれどころか最近のdocomo版XperiaはFlashTool使ってもdocomo版のROMしか焼けないようになったそうです。  \\n\\nそれはそうとして、データベースのファイルはRoot権限が必要な領域（`/data/data/${packageName}/databases/TestDB`）に有るのでRoot権限あるかAndroid StudioのDevice Explolerで見る（開発中アプリなら見れる）しか無いと思います多分。  \\n\\n今回はデータベースが見れるアプリ（Root権限必須）を利用して作成したデータベースを覗いてみます。  \\n\\nhttps://play.google.com/store/apps/details?id=com.tomminosoftware.sqliteeditor&hl=ja\\n\\n{%asset_img root.png root%}\\n\\n# おわりに\\nもっと早くからRoom使ってればよかった感。便利。  \\nソースコード→ https://github.com/takusan23/AndroidRoomSample\\n\\nAndroid Beamが４んだせいでNexus7から写真送るの大変だった（）","bodyHtml":"<p>どうもこんばんわ。眠いです。<br>\\n冬休みの宿題では保健の課題が出ましたが、休校期間の宿題ではお昼ごはんを作る宿題が出ました。</p>\\n<h1>ほんだい</h1>\\n<p>AndroidのRoomってのを触ってみたい。SQLiteよりRoomを使うことを<strong>Googleが強く推奨</strong>してるのでそのうちやるんだしやるかって感じで。</p>\\n<h1>Room #とは</h1>\\n<p>データベース。多分SQLiteを使いやすくした物だと思う。<br>\\nそれで<code>抽象化レイヤ</code>ってなに？</p>\\n<h1>SQLite vs Room</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>できること</th>\\n<th>SQLite</th>\\n<th>Room</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>クエリ</td>\\n<td>アプリ実行時まで分からない</td>\\n<td>コンパイル時（それ以前にIDEが）間違いを教えてくれる</td>\\n</tr>\\n<tr>\\n<td>UIスレッドでの実行</td>\\n<td>できる</td>\\n<td>できない</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>あとは各自調べてみて。既存のデータベースをRoomにも移行できるらしい？（要検証）</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>端末</td>\\n<td>Pixel 3 XL / Nexus 7 2013</td>\\n</tr>\\n<tr>\\n<td>Android</td>\\n<td>11 DP 4 / 10 Root権限あり</td>\\n</tr>\\n<tr>\\n<td>言語</td>\\n<td>Kotlin</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>今回は生成後にデータベースのファイルを見てみたいのでRootedな端末を用意しました（んなことよりNexus 7の後継出せよ）</p>\\n<h1>ライブラリ入れます</h1>\\n<p>#SQLite vs Room の項目で<strong>RoomはUIスレッドでは使えない</strong>仕様なため、Roomと一緒にコルーチンも入れます。</p>\\n<pre><code class=\\"hljs\\">apply plugin: <span class=\\"hljs-string\\">\'kotlin-kapt\'</span> <span class=\\"hljs-comment\\">// 一番上に</span>\\n<span class=\\"hljs-comment\\">// 省略</span>\\n<span class=\\"hljs-keyword\\">dependencies</span> {\\n<span class=\\"hljs-comment\\">// Room</span>\\n<span class=\\"hljs-keyword\\">def</span> room_version = <span class=\\"hljs-string\\">\\"2.2.5\\"</span>\\nimplementation <span class=\\"hljs-string\\">\\"androidx.room:room-runtime:$room_version\\"</span>\\nimplementation <span class=\\"hljs-string\\">\\"androidx.room:room-ktx:$room_version\\"</span>\\nkapt <span class=\\"hljs-string\\">\\"androidx.room:room-compiler:$room_version\\"</span>\\n<span class=\\"hljs-comment\\">// Coroutines</span>\\nimplementation <span class=\\"hljs-string\\">\\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\\"</span>\\nimplementation <span class=\\"hljs-string\\">\\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\\"</span>\\n<span class=\\"hljs-comment\\">// 省略</span>\\n}</code></pre><h1>データベースつくる</h1>\\n<p>習うより慣れろで記事を書いてるので用語がわかりません。<br>\\nRoomなデータベースを作るには3つのコンポーネントで構成されてるそうです。</p>\\n<ul>\\n<li>RoomDatabase\\n<ul>\\n<li>データベースにアクセスする時に使う</li>\\n</ul>\\n</li>\\n<li>Entity\\n<ul>\\n<li>データベースのテーブルです？</li>\\n<li>主キーとか名前とか保存したい値はここで定義します。</li>\\n<li>SQLite時代では<code>create table ~</code>の部分。</li>\\n<li><strong>データクラスです</strong></li>\\n</ul>\\n</li>\\n<li>Dao\\n<ul>\\n<li>データベースから値を取り出す時に使う。</li>\\n<li>クエリとかはここに書く</li>\\n<li>追加とか削除とかは特にクエリ書かなくても（私もわからん）できる</li>\\n<li>クエリは実行前に間違いを教えてくれる</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>Entity</h2>\\n<p>保存する値を定義します。Excelだと一番上の横の行ですね。<br>\\n特に思いつかなかったのでメモでも保存してみますか</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">@Entity</span>\\n<span class=\\"hljs-keyword\\">data</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">TestDBEntity</span></span>(\\n    <span class=\\"hljs-meta\\">@PrimaryKey(autoGenerate = true)</span> <span class=\\"hljs-keyword\\">val</span> id: <span class=\\"hljs-built_in\\">Int</span> = <span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-comment\\">// 主キー</span>\\n    <span class=\\"hljs-meta\\">@ColumnInfo(name = <span class=\\"hljs-meta-string\\">\\"memo\\"</span>)</span> <span class=\\"hljs-keyword\\">val</span> memo: String\\n)</code></pre><h3>@PrimaryKeyと@ColumnInfoについて</h3>\\n<p>@Entityはおまじないです（テーブルですよって目印）<br>\\n<code>@PrimaryKey</code>は主キーの設定の時に指定します。主キーが何なのかあんまよく分かってませんが多分消す時に便利です（他とは被らない）。\\n後ろの<code>autoGenerate = true</code>は主キーを自動で生成しますよってことだと思います。\\n<code>@ColumnInfo(name = &quot;memo&quot;)</code>ってのはデータベースの中ではnameに指定した値（今回は<code>memo</code>ですが、多分スネークケースで書く）を使うけど、<br>\\nプログラムから扱う時はデータクラスの変数名で書けるよってことだと思います。</p>\\n<h2>Dao</h2>\\n<p>ここではデータベースにアクセスする時に使う関数たちを書いていきます。<br>\\nSQLite時代の<code>query()</code>みたいな役割です（それにしてもquery()の引数の後半null何個書くんだよって毎回思いますね）。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">@Dao</span>\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">interface</span> <span class=\\"hljs-title\\">TestDBDao</span> </span>{\\n    <span class=\\"hljs-comment\\">/** 全データ取得 */</span>\\n    <span class=\\"hljs-meta\\">@Query(<span class=\\"hljs-meta-string\\">\\"SELECT * FROM TestDBEntity\\"</span>)</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getAll</span><span class=\\"hljs-params\\">()</span></span>: List&lt;TestDBEntity&gt;\\n    \\n    <span class=\\"hljs-comment\\">/** データ更新 */</span>\\n    <span class=\\"hljs-meta\\">@Update</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">update</span><span class=\\"hljs-params\\">(testDBEntity: <span class=\\"hljs-type\\">TestDBEntity</span>)</span></span>\\n\\n    <span class=\\"hljs-comment\\">/** データ追加 */</span>\\n    <span class=\\"hljs-meta\\">@Insert</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">insert</span><span class=\\"hljs-params\\">(testDBEntity: <span class=\\"hljs-type\\">TestDBEntity</span>)</span></span>\\n\\n    <span class=\\"hljs-comment\\">/** データ削除 */</span>\\n    <span class=\\"hljs-meta\\">@Delete</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">delete</span><span class=\\"hljs-params\\">(testDBEntity: <span class=\\"hljs-type\\">TestDBEntity</span>)</span></span>\\n}</code></pre><p><code>getAll()</code>のクエリ、ちゃんとFROMの<code>TestDBEntity</code>、ちゃんと補充されたのすごい<br>\\n基本的なもの（@Insertとか）は最初からあるようです。<br>\\n複雑なものはクエリを書けばできます。</p>\\n<h2>データベース</h2>\\n<p>説明が難しいからなしで</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">@Database(entities = [TestDBEntity::class], version = 1)</span>\\n<span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">TestDB</span> : <span class=\\"hljs-type\\">RoomDatabase</span></span>() {\\n    <span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">testDao</span><span class=\\"hljs-params\\">()</span></span>: TestDBDao\\n}</code></pre><p>これで用意ができました。</p>\\n<h1>Activityからデータベースにアクセスする</h1>\\n<h2>activity_main.xml</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">EditText</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/editText\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:ems</span>=<span class=\\"hljs-string\\">\\"10\\"</span>\\n        <span class=\\"hljs-attr\\">android:inputType</span>=<span class=\\"hljs-string\\">\\"textPersonName\\"</span>\\n        <span class=\\"hljs-attr\\">android:hint</span>=<span class=\\"hljs-string\\">\\"メモ入れてね\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"horizontal\\"</span>&gt;</span>\\n\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n            <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/add_button\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_weight</span>=<span class=\\"hljs-string\\">\\"1\\"</span>\\n            <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"追加\\"</span> /&gt;</span>\\n\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n            <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/load_button\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_weight</span>=<span class=\\"hljs-string\\">\\"1\\"</span>\\n            <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"読み込み\\"</span> /&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">TextView</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/memo_textview\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintBottom_toBottomOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintLeft_toLeftOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintRight_toRightOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintTop_toTopOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span> /&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><h2>MainActivity.kt</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        <span class=\\"hljs-comment\\">// 読み込み</span>\\n        loadDB()\\n\\n        <span class=\\"hljs-comment\\">// 読み込みボタン押したら読み込む</span>\\n        load_button.setOnClickListener {\\n            loadDB()\\n        }\\n\\n        <span class=\\"hljs-comment\\">// 書き込む</span>\\n        add_button.setOnClickListener {\\n            writeDB()\\n        }\\n\\n    }\\n\\n    <span class=\\"hljs-comment\\">/** データクラスに追加する */</span>\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">writeDB</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> text = editText.text.toString()\\n        GlobalScope.launch {\\n            <span class=\\"hljs-comment\\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\\n            <span class=\\"hljs-keyword\\">val</span> database =\\n                Room.databaseBuilder(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, TestDB::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">\\"TestDB\\").build</span></span>()\\n            <span class=\\"hljs-keyword\\">val</span> dao = database.testDao()\\n            <span class=\\"hljs-comment\\">// 書き込むデータクラス作る</span>\\n            <span class=\\"hljs-keyword\\">val</span> <span class=\\"hljs-keyword\\">data</span> = TestDBEntity(memo = text)\\n            <span class=\\"hljs-comment\\">// 書き込む</span>\\n            dao.insert(<span class=\\"hljs-keyword\\">data</span>)\\n        }\\n    }\\n\\n    <span class=\\"hljs-comment\\">/** データベースから読み込む */</span>\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">loadDB</span><span class=\\"hljs-params\\">()</span></span> {\\n        GlobalScope.launch(Dispatchers.Main) {\\n            <span class=\\"hljs-comment\\">// まっさらに</span>\\n            memo_textview.text = <span class=\\"hljs-string\\">\\"\\"</span>\\n            <span class=\\"hljs-comment\\">// UIスレッドでは実行できないためコルーチン</span>\\n            <span class=\\"hljs-keyword\\">val</span> list = withContext(Dispatchers.IO) {\\n                <span class=\\"hljs-comment\\">// データベース用意</span>\\n                <span class=\\"hljs-keyword\\">val</span> database =\\n                    Room.databaseBuilder(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, TestDB::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">\\"TestDB\\").build</span></span>()\\n                <span class=\\"hljs-keyword\\">val</span> dao = database.testDao()\\n                dao.getAll()\\n            }\\n            <span class=\\"hljs-comment\\">// TextViewに表示</span>\\n            list.forEach {\\n                memo_textview.append(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${it.memo}</span>\\\\n\\"</span>)\\n            }\\n        }\\n    }\\n}</code></pre><p>起動して→メモを入力して→追加を押す→読み込み押す<br>\\nと下に入力した内容が表示されているはずです。やったね８８８８８８</p>\\n<p>{%asset_img add.png add%}</p>\\n<p>SQLite時代の追加と比べて分かりやすくなってることがわかりますね～</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">val</span> contentValues = ContentValues()\\ncontentValues.put(<span class=\\"hljs-string\\">\\"memo\\"</span>, <span class=\\"hljs-string\\">\\"めもだよー\\"</span>)\\nsqLiteDatabase.insert(<span class=\\"hljs-string\\">\\"table_name\\"</span>, <span class=\\"hljs-literal\\">null</span>, contentValues)</code></pre><h1>少し凝ったことをやる</h1>\\n<p>削除に関する関数を書き足してみる。<br>\\nというわけで<code>TestDBDao.kt</code>に書き足します。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/** 指定したidのデータを消す */</span>\\n<span class=\\"hljs-meta\\">@Query(<span class=\\"hljs-meta-string\\">\\"DELETE FROM TestDBEntity WHERE id = :id\\"</span>)</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">deleteById</span><span class=\\"hljs-params\\">(id: <span class=\\"hljs-type\\">Int</span>)</span></span>\\n\\n<span class=\\"hljs-comment\\">/** 指定したメモのデータを消す */</span>\\n<span class=\\"hljs-meta\\">@Query(<span class=\\"hljs-meta-string\\">\\"DELETE FROM TestDBEntity WHERE memo = :memo\\"</span>)</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">deleteByMemo</span><span class=\\"hljs-params\\">(memo:<span class=\\"hljs-type\\">String</span>)</span></span></code></pre><p>SQLite時代ではこんな感じに書いてましたね</p>\\n<pre><code class=\\"hljs\\">delete(<span class=\\"hljs-string\\">\\"table_name\\"</span>, <span class=\\"hljs-string\\">\\"memo=?\\"</span>, arrayOf(memo))</code></pre><p>これはidが引数と同じ時に消すというクエリです（多分）</p>\\n<p>あとは消すボタンをActivityに置いて</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">EditText</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/editText\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:ems</span>=<span class=\\"hljs-string\\">\\"10\\"</span>\\n        <span class=\\"hljs-attr\\">android:hint</span>=<span class=\\"hljs-string\\">\\"メモ入れてね\\"</span>\\n        <span class=\\"hljs-attr\\">android:inputType</span>=<span class=\\"hljs-string\\">\\"textPersonName\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"horizontal\\"</span>&gt;</span>\\n\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n            <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/add_button\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_weight</span>=<span class=\\"hljs-string\\">\\"1\\"</span>\\n            <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"追加\\"</span> /&gt;</span>\\n\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n            <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/load_button\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_weight</span>=<span class=\\"hljs-string\\">\\"1\\"</span>\\n            <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"読み込み\\"</span> /&gt;</span>\\n\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n            <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/delete_button\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n            <span class=\\"hljs-attr\\">android:layout_weight</span>=<span class=\\"hljs-string\\">\\"1\\"</span>\\n            <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"削除\\"</span> /&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">TextView</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/memo_textview\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintBottom_toBottomOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintLeft_toLeftOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintRight_toRightOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span>\\n        <span class=\\"hljs-attr\\">app:layout_constraintTop_toTopOf</span>=<span class=\\"hljs-string\\">\\"parent\\"</span> /&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        <span class=\\"hljs-comment\\">// 読み込み</span>\\n        loadDB()\\n\\n        <span class=\\"hljs-comment\\">// 読み込みボタン押したら読み込む</span>\\n        load_button.setOnClickListener {\\n            loadDB()\\n        }\\n\\n        <span class=\\"hljs-comment\\">// 書き込む</span>\\n        add_button.setOnClickListener {\\n            writeDB()\\n        }\\n\\n        <span class=\\"hljs-comment\\">// 削除する</span>\\n        delete_button.setOnClickListener {\\n            deleteDB()\\n        }\\n\\n    }\\n\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">deleteDB</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> text = editText.text.toString()\\n        GlobalScope.launch {\\n            <span class=\\"hljs-comment\\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\\n            <span class=\\"hljs-keyword\\">val</span> database =\\n                Room.databaseBuilder(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, TestDB::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">\\"TestDB\\").build</span></span>()\\n            <span class=\\"hljs-keyword\\">val</span> dao = database.testDao()\\n            <span class=\\"hljs-comment\\">// 削除する</span>\\n            dao.deleteByMemo(text)\\n        }\\n    }\\n\\n    <span class=\\"hljs-comment\\">/** データクラスに追加する */</span>\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">writeDB</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> text = editText.text.toString()\\n        GlobalScope.launch {\\n            <span class=\\"hljs-comment\\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\\n            <span class=\\"hljs-keyword\\">val</span> database =\\n                Room.databaseBuilder(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, TestDB::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">\\"TestDB\\").build</span></span>()\\n            <span class=\\"hljs-keyword\\">val</span> dao = database.testDao()\\n            <span class=\\"hljs-comment\\">// 書き込むデータクラス作る</span>\\n            <span class=\\"hljs-keyword\\">val</span> <span class=\\"hljs-keyword\\">data</span> = TestDBEntity(memo = text)\\n            <span class=\\"hljs-comment\\">// 書き込む</span>\\n            dao.insert(<span class=\\"hljs-keyword\\">data</span>)\\n        }\\n    }\\n\\n    <span class=\\"hljs-comment\\">/** データベースから読み込む */</span>\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">loadDB</span><span class=\\"hljs-params\\">()</span></span> {\\n        GlobalScope.launch(Dispatchers.Main) {\\n            <span class=\\"hljs-comment\\">// まっさらに</span>\\n            memo_textview.text = <span class=\\"hljs-string\\">\\"\\"</span>\\n            <span class=\\"hljs-comment\\">// UIスレッドでは実行できないためコルーチン</span>\\n            <span class=\\"hljs-keyword\\">val</span> list = withContext(Dispatchers.IO) {\\n                <span class=\\"hljs-comment\\">// データベース用意</span>\\n                <span class=\\"hljs-keyword\\">val</span> database =\\n                    Room.databaseBuilder(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, TestDB::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">\\"TestDB\\").build</span></span>()\\n                <span class=\\"hljs-keyword\\">val</span> dao = database.testDao()\\n                dao.getAll()\\n            }\\n            <span class=\\"hljs-comment\\">// TextViewに表示</span>\\n            list.forEach {\\n                memo_textview.append(<span class=\\"hljs-string\\">\\"id=<span class=\\"hljs-subst\\">${it.id}</span> | memo=<span class=\\"hljs-subst\\">${it.memo}</span>\\\\n\\"</span>)\\n            }\\n        }\\n    }\\n}</code></pre><p>これですでにあるメモの内容を入れたら削除できる機能が追加されました。</p>\\n<p>{%asset_img delete.png delete%}</p>\\n<h1>Root取得済み環境でデータベースを覗く</h1>\\n<p>最近はAndroidのRoot化の話題あんま聞かないですね（XperiaはZ4から国内版はまじで取れなくなったし。）<br>\\nそれどころか最近のdocomo版XperiaはFlashTool使ってもdocomo版のROMしか焼けないようになったそうです。</p>\\n<p>それはそうとして、データベースのファイルはRoot権限が必要な領域（<code>/data/data/${packageName}/databases/TestDB</code>）に有るのでRoot権限あるかAndroid StudioのDevice Explolerで見る（開発中アプリなら見れる）しか無いと思います多分。</p>\\n<p>今回はデータベースが見れるアプリ（Root権限必須）を利用して作成したデータベースを覗いてみます。</p>\\n<p>https://play.google.com/store/apps/details?id=com.tomminosoftware.sqliteeditor&amp;hl=ja</p>\\n<p>{%asset_img root.png root%}</p>\\n<h1>おわりに</h1>\\n<p>もっと早くからRoom使ってればよかった感。便利。<br>\\nソースコード→ https://github.com/takusan23/AndroidRoomSample</p>\\n<p>Android Beamが４んだせいでNexus7から写真送るの大変だった（）</p>\\n","dir":"contents/posts/json","base":"AndroidのRoomを触ってみた.json","ext":".json","sourceBase":"AndroidのRoomを触ってみた.md","sourceExt":".md"}')},329:function(n){n.exports=JSON.parse('{"title":"ExoPlayerとMediaSessionを何となく使う","created_at":"2020-05-10T22:33:50.000Z","tags":["Android","MediaSession","ExoPlayer","Kotlin"],"bodyContent":"どうもこんばんわ。  \\nなんかいきなり暑くなってあつい。  \\n夏は虫（こわい）と頭痛が痛くなる（水不足か何か）のと弱冷房車に当たる（マジでいらんだろ。スマホの発熱のほうが熱い）のがあるので嫌いです。\\n\\n# 本題\\nMediaSessionってのがあるんですよ。JavaScriptの方じゃないです。（JavaScriptの方はこれ↓）\\n\\n{% asset_img js.png js %}\\n\\nAndroidのMediaSessionもJSのMediaSessionと多分同じ感じで、\\n- **GoogleAssistantに今再生してる曲なに？**って聞くと答えが帰ってきたり\\n- Always On Display に曲名を表示したり\\n- などなど  \\n\\nGoogleAssistantで操作できるのもこれ。別にBroadcastReceiverとかで受け取ってるとかではない。\\n\\nちなみに音楽プレーヤーの通知にあるあの操作パネルは別にMediaSession無しでも作れる。\\n\\n## ここまでExoPlayer要素なし\\nMediaSessionってなんかネット上にも情報がなくてよくわからないんですが、  \\nExoPlayerとうまく連携してくれるライブラリがあるので今回はそのライブラリに頼ってMediaSessionを作っていこうと思います。\\n\\n# 作る\\n## 環境\\n| なまえ    | あたい  |\\n|-----------|---------|\\n| Android   | 11 DP 4 |\\n| 言語      | Kotlin  |\\n| ExoPlayer | 2.11.3  |\\n\\n## 再生する曲\\n今回は適当にフリー音源を使います。今回は甘茶の音楽工房様のファミポップⅢを使わせてもらいます。  \\n別にExoPlayerで再生できれば何でもいいです。\\n\\n## ライブラリ入れるなど\\n\\n```gradle\\ndependencies {\\n    // MediaSession\\n    implementation \\"androidx.media:media:1.1.0\\"\\n    // ExoPlayer\\n    implementation \'com.google.android.exoplayer:exoplayer-core:2.11.3\'\\n    implementation \'com.google.android.exoplayer:extension-mediasession:2.10.4\'\\n    // 省略\\n}\\n```\\n\\n## 音楽入れる\\n本当は端末内の音楽を再生するのがいいんでしょうけど、Androidのファイル読み書きがややこしいので今回はres/rawに入れて再生することにします。  \\nExoPlayerが対応してる再生方法なら何でもいいと思います。\\n\\n# 仕様など\\nめんどいのでServiceではなくActivityで作ります。（普通の音楽アプリならServiceで作る。）  \\n音楽は前述通りres/rawから読み込む形で。\\n\\n# MainActivity.kt\\n## ExoPlayer再生するまで\\nExoPlayerってバージョン上がると一気に非推奨になったりして追いかけるの大変。\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    // ファイル名\\n    val FILE_NAME = \\"famipop3\\"\\n\\n    lateinit var exoPlayer: SimpleExoPlayer\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // ExoPlayerで再生するまで\\n        exoPlayer = SimpleExoPlayer.Builder(this).build()\\n        val dataSourceFactory = DefaultDataSourceFactory(this, \\"@takusan_23\\")\\n        val uri = RawResourceDataSource.buildRawResourceUri(R.raw.famipop3)\\n        val source = ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri)\\n        exoPlayer.prepare(source)\\n\\n        // 再生\\n        play_button.setOnClickListener {\\n            exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n        }\\n    }\\n\\n    override fun onDestroy() {\\n        super.onDestroy()\\n        exoPlayer.release()\\n    }\\n\\n}\\n```\\n\\nファイル名のところは各自書き換えてね。\\n\\n## MediaSession連携\\nめんどいので全部張ります\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n    \\n    lateinit var exoPlayer: SimpleExoPlayer\\n\\n    // MediaSession\\n    lateinit var mediaSession: MediaSessionCompat\\n    lateinit var mediaSessionConnector: MediaSessionConnector\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // ExoPlayerで再生するまで\\n        exoPlayer = SimpleExoPlayer.Builder(this).build()\\n        val dataSourceFactory = DefaultDataSourceFactory(this, \\"@takusan_23\\")\\n        val uri = RawResourceDataSource.buildRawResourceUri(R.raw.famipop3)\\n        val source = ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri)\\n        exoPlayer.prepare(source)\\n\\n        // mp3から再生時間だけ取る。\\n        val mediaMetadataRetriever = MediaMetadataRetriever()\\n        val afd = resources.openRawResourceFd(R.raw.famipop3)\\n        mediaMetadataRetriever.setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)\\n        val duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION).toLong()\\n\\n        // MediaSession連携\\n        mediaSession = MediaSessionCompat(this, \\"sample\\").apply {\\n            isActive = true\\n        }\\n        mediaSessionConnector = MediaSessionConnector(mediaSession)\\n        mediaSessionConnector.setPlayer(exoPlayer)\\n        // メタデータ\\n        mediaSessionConnector.setMediaMetadataProvider {\\n            // メタデータ\\n            val mediaMetadataCompat = MediaMetadataCompat.Builder().apply {\\n                putString(MediaMetadataCompat.METADATA_KEY_TITLE, \\"ファミポップⅢ\\")\\n                putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, \\"famipop\\")\\n                putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_TITLE, \\"ファミポップⅢ\\")\\n                putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_SUBTITLE, \\"甘茶の音楽工房\\")\\n                putString(MediaMetadataCompat.METADATA_KEY_ARTIST, \\"甘茶の音楽工房\\")\\n                putLong(MediaMetadataCompat.METADATA_KEY_DURATION, duration) // これあるとAndroid 10でシーク使えます\\n            }.build()\\n            mediaMetadataCompat\\n        }\\n\\n        // 再生\\n        play_button.setOnClickListener {\\n            exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n            showNotification()\\n        }\\n\\n    }\\n\\n    @RequiresApi(Build.VERSION_CODES.O)\\n    private fun showNotification() {\\n        val channelId = \\"play_notification\\"\\n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\\n        if (notificationManager.getNotificationChannel(channelId) == null) {\\n            val notificationChannel = NotificationChannel(channelId, \\"音楽通知\\", NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        val notification = NotificationCompat.Builder(this, channelId).apply {\\n            // MediaStyle。コントローラー\\n            setContentTitle(\\"ファミポップⅢ\\")\\n            setContentText(\\"甘茶の音楽工房\\")\\n            setSmallIcon(R.drawable.ic_audiotrack_black_24dp)\\n            setStyle(androidx.media.app.NotificationCompat.MediaStyle().setMediaSession(mediaSession.sessionToken))\\n            addAction(R.drawable.ic_audiotrack_black_24dp, \\"\\", PendingIntent.getBroadcast(this@MainActivity, 1, Intent(), PendingIntent.FLAG_UPDATE_CURRENT))\\n        }.build()\\n        notificationManager.notify(1, notification)\\n    }\\n\\n    override fun onDestroy() {\\n        super.onDestroy()\\n        // 終了処理\\n        exoPlayer.release()\\n        mediaSession.release()\\n    }\\n\\n}\\n```\\n\\n## 注意など\\n- 上記のコードは`addAction()`でアイコン出してるけどIntentが空なので押してもなにもなりません。\\n- 通知の`setStyle()`に入れる`NotificationCompat`は`androidx.media.app.NotificationCompat`です。`androidx.core.app.NotificationCompat`ではないです（名前同じなのややこC）\\n- Android 10から通知の音楽コントローラーにシークバーが追加できるんですが（`MediaMetadataCompat.METADATA_KEY_DURATION`に負の値を指定しなければいい）これ一つ以上`addAction()`を追加しないとシークバーがいつまで経っても表示されません。  \\n- `mediaSessionConnector.setMediaMetadataProvider{}`でメタデータを別に作成してますが、多分mp3の中にメタデータがあれば勝手に作ってくれると思います（要検証）\\n- メタデータハードコートしてるけど`MediaMetadataRetriever`からタイトルやら作者を取るほうが良いです。（かくのめんどい）\\n\\n# おわりに\\nシークバー出すのに`addAction()`で一個以上アイコンを出さないとだめってことに気付かずに時間が溶けたのでもう疲れた。\\n\\n{% asset_img assistant.png assistant %}\\n\\n写真取れなかったけどAlways On Displayでも(Android端末差はあるだろうけど)表示されてます。\\n\\n# 参考にしました。\\nhttps://stackoverflow.com/questions/24030756/mediaextractor-mediametadataretriever-with-raw-asset-file\\nhttps://stackoverflow.com/questions/30852975/exoplayer-reading-mp3-file-from-raw-folder","bodyHtml":"<p>どうもこんばんわ。<br>\\nなんかいきなり暑くなってあつい。<br>\\n夏は虫（こわい）と頭痛が痛くなる（水不足か何か）のと弱冷房車に当たる（マジでいらんだろ。スマホの発熱のほうが熱い）のがあるので嫌いです。</p>\\n<h1>本題</h1>\\n<p>MediaSessionってのがあるんですよ。JavaScriptの方じゃないです。（JavaScriptの方はこれ↓）</p>\\n<p>{% asset_img js.png js %}</p>\\n<p>AndroidのMediaSessionもJSのMediaSessionと多分同じ感じで、</p>\\n<ul>\\n<li>**GoogleAssistantに今再生してる曲なに？**って聞くと答えが帰ってきたり</li>\\n<li>Always On Display に曲名を表示したり</li>\\n<li>などなど</li>\\n</ul>\\n<p>GoogleAssistantで操作できるのもこれ。別にBroadcastReceiverとかで受け取ってるとかではない。</p>\\n<p>ちなみに音楽プレーヤーの通知にあるあの操作パネルは別にMediaSession無しでも作れる。</p>\\n<h2>ここまでExoPlayer要素なし</h2>\\n<p>MediaSessionってなんかネット上にも情報がなくてよくわからないんですが、<br>\\nExoPlayerとうまく連携してくれるライブラリがあるので今回はそのライブラリに頼ってMediaSessionを作っていこうと思います。</p>\\n<h1>作る</h1>\\n<h2>環境</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Android</td>\\n<td>11 DP 4</td>\\n</tr>\\n<tr>\\n<td>言語</td>\\n<td>Kotlin</td>\\n</tr>\\n<tr>\\n<td>ExoPlayer</td>\\n<td>2.11.3</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>再生する曲</h2>\\n<p>今回は適当にフリー音源を使います。今回は甘茶の音楽工房様のファミポップⅢを使わせてもらいます。<br>\\n別にExoPlayerで再生できれば何でもいいです。</p>\\n<h2>ライブラリ入れるなど</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">dependencies</span> {\\n    <span class=\\"hljs-comment\\">// MediaSession</span>\\n    implementation <span class=\\"hljs-string\\">\\"androidx.media:media:1.1.0\\"</span>\\n    <span class=\\"hljs-comment\\">// ExoPlayer</span>\\n    implementation <span class=\\"hljs-string\\">\'com.google.android.exoplayer:exoplayer-core:2.11.3\'</span>\\n    implementation <span class=\\"hljs-string\\">\'com.google.android.exoplayer:extension-mediasession:2.10.4\'</span>\\n    <span class=\\"hljs-comment\\">// 省略</span>\\n}</code></pre><h2>音楽入れる</h2>\\n<p>本当は端末内の音楽を再生するのがいいんでしょうけど、Androidのファイル読み書きがややこしいので今回はres/rawに入れて再生することにします。<br>\\nExoPlayerが対応してる再生方法なら何でもいいと思います。</p>\\n<h1>仕様など</h1>\\n<p>めんどいのでServiceではなくActivityで作ります。（普通の音楽アプリならServiceで作る。）<br>\\n音楽は前述通りres/rawから読み込む形で。</p>\\n<h1>MainActivity.kt</h1>\\n<h2>ExoPlayer再生するまで</h2>\\n<p>ExoPlayerってバージョン上がると一気に非推奨になったりして追いかけるの大変。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-comment\\">// ファイル名</span>\\n    <span class=\\"hljs-keyword\\">val</span> FILE_NAME = <span class=\\"hljs-string\\">\\"famipop3\\"</span>\\n\\n    <span class=\\"hljs-keyword\\">lateinit</span> <span class=\\"hljs-keyword\\">var</span> exoPlayer: SimpleExoPlayer\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        <span class=\\"hljs-comment\\">// ExoPlayerで再生するまで</span>\\n        exoPlayer = SimpleExoPlayer.Builder(<span class=\\"hljs-keyword\\">this</span>).build()\\n        <span class=\\"hljs-keyword\\">val</span> dataSourceFactory = DefaultDataSourceFactory(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>)\\n        <span class=\\"hljs-keyword\\">val</span> uri = RawResourceDataSource.buildRawResourceUri(R.raw.famipop3)\\n        <span class=\\"hljs-keyword\\">val</span> source = ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri)\\n        exoPlayer.prepare(source)\\n\\n        <span class=\\"hljs-comment\\">// 再生</span>\\n        play_button.setOnClickListener {\\n            exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onDestroy</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onDestroy()\\n        exoPlayer.release()\\n    }\\n\\n}</code></pre><p>ファイル名のところは各自書き換えてね。</p>\\n<h2>MediaSession連携</h2>\\n<p>めんどいので全部張ります</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n    \\n    <span class=\\"hljs-keyword\\">lateinit</span> <span class=\\"hljs-keyword\\">var</span> exoPlayer: SimpleExoPlayer\\n\\n    <span class=\\"hljs-comment\\">// MediaSession</span>\\n    <span class=\\"hljs-keyword\\">lateinit</span> <span class=\\"hljs-keyword\\">var</span> mediaSession: MediaSessionCompat\\n    <span class=\\"hljs-keyword\\">lateinit</span> <span class=\\"hljs-keyword\\">var</span> mediaSessionConnector: MediaSessionConnector\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        <span class=\\"hljs-comment\\">// ExoPlayerで再生するまで</span>\\n        exoPlayer = SimpleExoPlayer.Builder(<span class=\\"hljs-keyword\\">this</span>).build()\\n        <span class=\\"hljs-keyword\\">val</span> dataSourceFactory = DefaultDataSourceFactory(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>)\\n        <span class=\\"hljs-keyword\\">val</span> uri = RawResourceDataSource.buildRawResourceUri(R.raw.famipop3)\\n        <span class=\\"hljs-keyword\\">val</span> source = ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri)\\n        exoPlayer.prepare(source)\\n\\n        <span class=\\"hljs-comment\\">// mp3から再生時間だけ取る。</span>\\n        <span class=\\"hljs-keyword\\">val</span> mediaMetadataRetriever = MediaMetadataRetriever()\\n        <span class=\\"hljs-keyword\\">val</span> afd = resources.openRawResourceFd(R.raw.famipop3)\\n        mediaMetadataRetriever.setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)\\n        <span class=\\"hljs-keyword\\">val</span> duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION).toLong()\\n\\n        <span class=\\"hljs-comment\\">// MediaSession連携</span>\\n        mediaSession = MediaSessionCompat(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"sample\\"</span>).apply {\\n            isActive = <span class=\\"hljs-literal\\">true</span>\\n        }\\n        mediaSessionConnector = MediaSessionConnector(mediaSession)\\n        mediaSessionConnector.setPlayer(exoPlayer)\\n        <span class=\\"hljs-comment\\">// メタデータ</span>\\n        mediaSessionConnector.setMediaMetadataProvider {\\n            <span class=\\"hljs-comment\\">// メタデータ</span>\\n            <span class=\\"hljs-keyword\\">val</span> mediaMetadataCompat = MediaMetadataCompat.Builder().apply {\\n                putString(MediaMetadataCompat.METADATA_KEY_TITLE, <span class=\\"hljs-string\\">\\"ファミポップⅢ\\"</span>)\\n                putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, <span class=\\"hljs-string\\">\\"famipop\\"</span>)\\n                putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_TITLE, <span class=\\"hljs-string\\">\\"ファミポップⅢ\\"</span>)\\n                putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_SUBTITLE, <span class=\\"hljs-string\\">\\"甘茶の音楽工房\\"</span>)\\n                putString(MediaMetadataCompat.METADATA_KEY_ARTIST, <span class=\\"hljs-string\\">\\"甘茶の音楽工房\\"</span>)\\n                putLong(MediaMetadataCompat.METADATA_KEY_DURATION, duration) <span class=\\"hljs-comment\\">// これあるとAndroid 10でシーク使えます</span>\\n            }.build()\\n            mediaMetadataCompat\\n        }\\n\\n        <span class=\\"hljs-comment\\">// 再生</span>\\n        play_button.setOnClickListener {\\n            exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n            showNotification()\\n        }\\n\\n    }\\n\\n    <span class=\\"hljs-meta\\">@RequiresApi(Build.VERSION_CODES.O)</span>\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">showNotification</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> channelId = <span class=\\"hljs-string\\">\\"play_notification\\"</span>\\n        <span class=\\"hljs-keyword\\">val</span> notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) <span class=\\"hljs-keyword\\">as</span> NotificationManager\\n        <span class=\\"hljs-keyword\\">if</span> (notificationManager.getNotificationChannel(channelId) == <span class=\\"hljs-literal\\">null</span>) {\\n            <span class=\\"hljs-keyword\\">val</span> notificationChannel = NotificationChannel(channelId, <span class=\\"hljs-string\\">\\"音楽通知\\"</span>, NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        <span class=\\"hljs-keyword\\">val</span> notification = NotificationCompat.Builder(<span class=\\"hljs-keyword\\">this</span>, channelId).apply {\\n            <span class=\\"hljs-comment\\">// MediaStyle。コントローラー</span>\\n            setContentTitle(<span class=\\"hljs-string\\">\\"ファミポップⅢ\\"</span>)\\n            setContentText(<span class=\\"hljs-string\\">\\"甘茶の音楽工房\\"</span>)\\n            setSmallIcon(R.drawable.ic_audiotrack_black_24dp)\\n            setStyle(androidx.media.app.NotificationCompat.MediaStyle().setMediaSession(mediaSession.sessionToken))\\n            addAction(R.drawable.ic_audiotrack_black_24dp, <span class=\\"hljs-string\\">\\"\\"</span>, PendingIntent.getBroadcast(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, <span class=\\"hljs-number\\">1</span>, Intent(), PendingIntent.FLAG_UPDATE_CURRENT))\\n        }.build()\\n        notificationManager.notify(<span class=\\"hljs-number\\">1</span>, notification)\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onDestroy</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onDestroy()\\n        <span class=\\"hljs-comment\\">// 終了処理</span>\\n        exoPlayer.release()\\n        mediaSession.release()\\n    }\\n\\n}</code></pre><h2>注意など</h2>\\n<ul>\\n<li>上記のコードは<code>addAction()</code>でアイコン出してるけどIntentが空なので押してもなにもなりません。</li>\\n<li>通知の<code>setStyle()</code>に入れる<code>NotificationCompat</code>は<code>androidx.media.app.NotificationCompat</code>です。<code>androidx.core.app.NotificationCompat</code>ではないです（名前同じなのややこC）</li>\\n<li>Android 10から通知の音楽コントローラーにシークバーが追加できるんですが（<code>MediaMetadataCompat.METADATA_KEY_DURATION</code>に負の値を指定しなければいい）これ一つ以上<code>addAction()</code>を追加しないとシークバーがいつまで経っても表示されません。</li>\\n<li><code>mediaSessionConnector.setMediaMetadataProvider{}</code>でメタデータを別に作成してますが、多分mp3の中にメタデータがあれば勝手に作ってくれると思います（要検証）</li>\\n<li>メタデータハードコートしてるけど<code>MediaMetadataRetriever</code>からタイトルやら作者を取るほうが良いです。（かくのめんどい）</li>\\n</ul>\\n<h1>おわりに</h1>\\n<p>シークバー出すのに<code>addAction()</code>で一個以上アイコンを出さないとだめってことに気付かずに時間が溶けたのでもう疲れた。</p>\\n<p>{% asset_img assistant.png assistant %}</p>\\n<p>写真取れなかったけどAlways On Displayでも(Android端末差はあるだろうけど)表示されてます。</p>\\n<h1>参考にしました。</h1>\\n<p>https://stackoverflow.com/questions/24030756/mediaextractor-mediametadataretriever-with-raw-asset-file\\nhttps://stackoverflow.com/questions/30852975/exoplayer-reading-mp3-file-from-raw-folder</p>\\n","dir":"contents/posts/json","base":"ExoPlayerとMediaSessionを何となく使う.json","ext":".json","sourceBase":"ExoPlayerとMediaSessionを何となく使う.md","sourceExt":".md"}')},330:function(n){n.exports=JSON.parse('{"title":"ExoPlayerにオフライン再生機能あるらしいので使ってみる","created_at":"2020-05-09T20:21:48.000Z","tags":["Android","ExoPlayer","HLS","Kotlin"],"bodyContent":"どうもこんばんわ。  \\n\\n# 本題\\nExoPlayerにオフライン再生用のメディアをダウンロードする機能があるらしい。  \\n調べても全然出てこなかったのでサンプル置いておきますね。\\n\\n# オフライン再生用のファイルは\\nよくわからんファイルだった。mp4とかではなかった。  \\nファイルダウンローダーでは無いってことだね。\\n\\n# 参考にします\\nhttps://exoplayer.dev/downloading-media.html\\n\\n# 環境\\n| なまえ  | あたい  |\\n|---------|---------|\\n| Android | 11 DP 4 |\\n| 言語    | Kotlin  |\\n\\n# つくる\\n\\n## 必要なもの\\nmp4かhlsのアドレス。動画再生するので仕方ないね。\\n\\n## ExoPlayer導入\\nappフォルダの方の`build.gradle`を開いて追加\\n```gradle\\ndependencies {\\n    // ExoPlayer\\n    implementation \'com.google.android.exoplayer:exoplayer-core:2.11.3\'\\n    implementation \'com.google.android.exoplayer:exoplayer-hls:2.11.3\'\\n    // 省略\\n}\\n```\\n\\n## AndroidManifest.xml\\nサービス実行権限とインターネットアクセス権限が必要です。\\n```xml\\n<uses-permission android:name=\\"android.permission.INTERNET\\" />\\n<uses-permission android:name=\\"android.permission.FOREGROUND_SERVICE\\" />\\n```\\n\\n# サービス作成\\n\\n## AndroidManifest.xml\\n```xml\\n<service\\n    android:name=\\".DownloadServiceTest\\"\\n    android:exported=\\"false\\">\\n    \x3c!-- This is needed for Scheduler --\x3e\\n    <intent-filter>\\n        <action android:name=\\"com.google.android.exoplayer.downloadService.action.RESTART\\" />\\n        <category android:name=\\"android.intent.category.DEFAULT\\" />\\n    </intent-filter>\\n</service>\\n```\\n\\n## DownloadServiceTest.kt\\n詳しくないのでなにも言えない。  \\nついでに最低Androidバージョン間違えちゃったので、`@RequiresApi(Build.VERSION_CODES.O)`が入っちゃった。ごめんね。  \\nあとAndroid 8以降で動くように勝手に`startForeground`呼んでるけどあってるのかな？\\n\\n```kotlin\\nclass DownloadServiceTest : DownloadService(FOREGROUND_NOTIFICATION_ID_NONE) {\\n\\n    // 通知出すらしい\\n    val NOTIFICATION_CHANNEL = \\"cache_notification\\"\\n    val SERVICE_NOTIFICATION_CHANNEL = \\"service_notification\\"\\n\\n    // ?\\n    val JOB_ID = 4545\\n\\n    /**\\n     * Android 8からService使うには通知出さないといけなくなった。\\n     * */\\n    @RequiresApi(Build.VERSION_CODES.O)\\n    override fun onCreate() {\\n        super.onCreate()\\n        val notificationManager =\\n            this.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\\n        if (notificationManager.getNotificationChannel(SERVICE_NOTIFICATION_CHANNEL) == null) {\\n            val notificationChannel =\\n                NotificationChannel(SERVICE_NOTIFICATION_CHANNEL, \\"ExoPlayerでダウンロードテスト通知\\", NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        val notification = Notification.Builder(this, SERVICE_NOTIFICATION_CHANNEL).apply {\\n            setContentTitle(\\"ExoPlayerでダウンロードテスト\\")\\n            setContentText(\\"サービスが実行中です\\")\\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\\n        }\\n        startForeground(1, notification.build())\\n    }\\n\\n    override fun getDownloadManager(): DownloadManager {\\n        // Note: This should be a singleton in your app.\\n        val databaseProvider = ExoDatabaseProvider(this)\\n        // A download cache should not evict media, so should use a NoopCacheEvictor.\\n        val downloadCache = SimpleCache(\\n            File(\\"${this.getExternalFilesDir(null)?.path}/cache\\"),\\n            NoOpCacheEvictor(),\\n            databaseProvider\\n        )\\n        // Create a factory for reading the data from the network.\\n        val dataSourceFactory =\\n            DefaultHttpDataSourceFactory(\\"@takusan_23\\")\\n        // Create the download manager.\\n        val downloadManager = DownloadManager(\\n            this,\\n            databaseProvider,\\n            downloadCache,\\n            dataSourceFactory\\n        )\\n        downloadManager.addListener(object : DownloadManager.Listener {\\n            override fun onIdle(downloadManager: DownloadManager) {\\n                super.onIdle(downloadManager)\\n                println(\\"終了？\\")\\n            }\\n        })\\n        return downloadManager\\n    }\\n\\n    @RequiresApi(Build.VERSION_CODES.O)\\n    override fun getForegroundNotification(downloads: MutableList<Download>): Notification {\\n        val notificationManager =\\n            this.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\\n        if (notificationManager.getNotificationChannel(NOTIFICATION_CHANNEL) == null) {\\n            val notificationChannel =\\n                NotificationChannel(NOTIFICATION_CHANNEL, \\"オフライン再生準備\\", NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        val notification = Notification.Builder(this, NOTIFICATION_CHANNEL).apply {\\n            setContentTitle(\\"オフライン再生準備\\")\\n            setContentText(downloads.size.toString())\\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\\n        }\\n        return notification.build()\\n    }\\n\\n    override fun getScheduler(): Scheduler? {\\n        return PlatformScheduler(this, JOB_ID)\\n    }\\n}\\n```\\n\\nコピペで使えると思います。\\n\\n# Activity\\n\\n## レイアウト\\n皆さんはちゃんとIDに名前つけてあげてね\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:gravity=\\"center\\"\\n    android:orientation=\\"vertical\\"\\n    tools:context=\\".MainActivity\\">\\n\\n    <SurfaceView\\n        android:id=\\"@+id/surfaceView\\"\\n        android:layout_width=\\"160dp\\"\\n        android:layout_height=\\"90dp\\" />\\n\\n    <Button\\n        android:id=\\"@+id/button\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"サービス起動\\" />\\n\\n    <Button\\n        android:id=\\"@+id/button2\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"取得\\" />\\n\\n    <Button\\n        android:id=\\"@+id/button3\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"再生\\" />\\n\\n    <Button\\n        android:id=\\"@+id/button4\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"一時停止・再生\\" />\\n</LinearLayout>\\n```\\n\\n## MainActivity.kt\\n`CONTENT_URL`の中は各自インターネット上にあるDLしてもいい動画を指定しておいてください。\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    lateinit var exoPlayer: SimpleExoPlayer\\n\\n    // ネットにある動画URL指定しといて\\n    val CONTENT_URL = \\"\\"\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        exoPlayer = SimpleExoPlayer.Builder(this).build()\\n\\n        button.setOnClickListener {\\n            // サービス起動\\n            val intent = Intent(this, DownloadServiceTest::class.java)\\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\\n                startForegroundService(intent)\\n            } else {\\n                startService(intent)\\n            }\\n        }\\n\\n        button2.setOnClickListener {\\n            cache()\\n        }\\n\\n        button3.setOnClickListener {\\n            playCache()\\n        }\\n\\n        button4.setOnClickListener {\\n            if (::exoPlayer.isInitialized) {\\n                exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n            }\\n        }\\n\\n    }\\n\\n    private fun cache() {\\n        val downloadRequest = DownloadRequest(\\n            \\"cache\\",\\n            DownloadRequest.TYPE_PROGRESSIVE,\\n            CONTENT_URL.toUri(),  /* streamKeys= */\\n            Collections.emptyList(),  /* customCacheKey= */\\n            null,\\n            ByteArray(1024)\\n        )\\n        DownloadService.sendAddDownload(this, DownloadServiceTest::class.java, downloadRequest, false)\\n    }\\n\\n    private fun playCache() {\\n        val cache =\\n            SimpleCache(File(\\"${this.getExternalFilesDir(null)?.path}/cache\\"), LeastRecentlyUsedCacheEvictor(1024), ExoDatabaseProvider(this))\\n        val upstreamDataSourceFactory = DefaultDataSourceFactory(this, \\"@takusan_23\\")\\n        val dataSourceFactory = CacheDataSourceFactory(\\n            cache, upstreamDataSourceFactory\\n        )\\n        val mediaSource =\\n            ProgressiveMediaSource.Factory(dataSourceFactory)\\n                .createMediaSource(CONTENT_URL.toUri())\\n        exoPlayer.prepare(mediaSource)\\n        exoPlayer.setVideoSurfaceView(surfaceView)\\n        exoPlayer.playWhenReady = true\\n    }\\n    \\n    override fun onDestroy() {\\n        super.onDestroy()\\n        if (::exoPlayer.isInitialized) {\\n            exoPlayer.release()\\n        }\\n    }\\n\\n}\\n```\\n\\nこれで  \\n**サービス起動**押して  \\n**取得**を押すと取得を始めます。`cache()`関数  \\n取得後**アプリを再起動**すると**再生**を押して再生ができます。`playCache()`関数  \\n再起動する前に再生するとなんか落ちます。謎\\n\\n# HLSに対応する\\nHLS版`cache()`、`playCache()`を作りました。  \\n参考：https://exoplayer.dev/downloading-media.html\\n\\n```kotlin\\nprivate fun cacheHLS() {\\n    val sourceFactory = DefaultDataSourceFactory(\\n        this,\\n        \\"@takusan_23\\",\\n        object : TransferListener {\\n            override fun onTransferInitializing(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onTransferStart(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onTransferEnd(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onBytesTransferred(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean, bytesTransferred: Int) {\\n            }\\n        })\\n    val downloadHelper = DownloadHelper.forHls(\\n        this,\\n        CONTENT_URL.toUri(),\\n        sourceFactory,\\n        DefaultRenderersFactory(this)\\n    )\\n    downloadHelper.prepare(object : DownloadHelper.Callback {\\n        override fun onPrepared(helper: DownloadHelper) {\\n            DownloadService.sendAddDownload(this@MainActivity, DownloadServiceTest::class.java, downloadHelper.getDownloadRequest(ByteArray(1024)), false)\\n            downloadHelper.release()\\n        }\\n        override fun onPrepareError(helper: DownloadHelper, e: IOException) {\\n        }\\n    })\\n}\\nprivate fun playHLSCache() {\\n    val cache =\\n        SimpleCache(File(\\"${this.getExternalFilesDir(null)?.path}/cache\\"), LeastRecentlyUsedCacheEvictor(1024), ExoDatabaseProvider(this))\\n    val upstreamDataSourceFactory = DefaultDataSourceFactory(this, \\"@takusan_23\\")\\n    val dataSourceFactory = CacheDataSourceFactory(\\n        cache, upstreamDataSourceFactory\\n    )\\n    val sourceFactory = DefaultDataSourceFactory(\\n        this,\\n        \\"@takusan_23\\",\\n        object : TransferListener {\\n            override fun onTransferInitializing(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onTransferStart(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onTransferEnd(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\\n            }\\n            override fun onBytesTransferred(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean, bytesTransferred: Int) {\\n            }\\n        })\\n    val downloadHelper = DownloadHelper.forHls(\\n        this,\\n        CONTENT_URL.toUri(),\\n        sourceFactory,\\n        DefaultRenderersFactory(this)\\n    )\\n    downloadHelper.prepare(object : DownloadHelper.Callback {\\n        override fun onPrepared(helper: DownloadHelper) {\\n            val mediaSource =\\n                DownloadHelper.createMediaSource(helper.getDownloadRequest(ByteArray(1024)), dataSourceFactory)\\n            exoPlayer.prepare(mediaSource)\\n            exoPlayer.setVideoSurfaceView(surfaceView)\\n            exoPlayer.playWhenReady = true\\n        }\\n        override fun onPrepareError(helper: DownloadHelper, e: IOException) {\\n        }\\n    })\\n}\\n```\\n\\nよくわからんな。  \\n\\n# 終わりに\\nもう良くわかんないからソースだけ置いておくわ。詳しい人たのんだ\\nhttps://github.com/takusan23/ExoPlayerMediaDownloadSample","bodyHtml":"<p>どうもこんばんわ。</p>\\n<h1>本題</h1>\\n<p>ExoPlayerにオフライン再生用のメディアをダウンロードする機能があるらしい。<br>\\n調べても全然出てこなかったのでサンプル置いておきますね。</p>\\n<h1>オフライン再生用のファイルは</h1>\\n<p>よくわからんファイルだった。mp4とかではなかった。<br>\\nファイルダウンローダーでは無いってことだね。</p>\\n<h1>参考にします</h1>\\n<p>https://exoplayer.dev/downloading-media.html</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Android</td>\\n<td>11 DP 4</td>\\n</tr>\\n<tr>\\n<td>言語</td>\\n<td>Kotlin</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>つくる</h1>\\n<h2>必要なもの</h2>\\n<p>mp4かhlsのアドレス。動画再生するので仕方ないね。</p>\\n<h2>ExoPlayer導入</h2>\\n<p>appフォルダの方の<code>build.gradle</code>を開いて追加</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">dependencies</span> {\\n    <span class=\\"hljs-comment\\">// ExoPlayer</span>\\n    implementation <span class=\\"hljs-string\\">\'com.google.android.exoplayer:exoplayer-core:2.11.3\'</span>\\n    implementation <span class=\\"hljs-string\\">\'com.google.android.exoplayer:exoplayer-hls:2.11.3\'</span>\\n    <span class=\\"hljs-comment\\">// 省略</span>\\n}</code></pre><h2>AndroidManifest.xml</h2>\\n<p>サービス実行権限とインターネットアクセス権限が必要です。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">uses-permission</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.permission.INTERNET\\"</span> /&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">uses-permission</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.permission.FOREGROUND_SERVICE\\"</span> /&gt;</span></code></pre><h1>サービス作成</h1>\\n<h2>AndroidManifest.xml</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">service</span>\\n    <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\".DownloadServiceTest\\"</span>\\n    <span class=\\"hljs-attr\\">android:exported</span>=<span class=\\"hljs-string\\">\\"false\\"</span>&gt;</span>\\n    <span class=\\"hljs-comment\\">&lt;!-- This is needed for Scheduler --&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">intent-filter</span>&gt;</span>\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">action</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"com.google.android.exoplayer.downloadService.action.RESTART\\"</span> /&gt;</span>\\n        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">category</span> <span class=\\"hljs-attr\\">android:name</span>=<span class=\\"hljs-string\\">\\"android.intent.category.DEFAULT\\"</span> /&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">intent-filter</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">service</span>&gt;</span></code></pre><h2>DownloadServiceTest.kt</h2>\\n<p>詳しくないのでなにも言えない。<br>\\nついでに最低Androidバージョン間違えちゃったので、<code>@RequiresApi(Build.VERSION_CODES.O)</code>が入っちゃった。ごめんね。<br>\\nあとAndroid 8以降で動くように勝手に<code>startForeground</code>呼んでるけどあってるのかな？</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">DownloadServiceTest</span> : <span class=\\"hljs-type\\">DownloadService</span></span>(FOREGROUND_NOTIFICATION_ID_NONE) {\\n\\n    <span class=\\"hljs-comment\\">// 通知出すらしい</span>\\n    <span class=\\"hljs-keyword\\">val</span> NOTIFICATION_CHANNEL = <span class=\\"hljs-string\\">\\"cache_notification\\"</span>\\n    <span class=\\"hljs-keyword\\">val</span> SERVICE_NOTIFICATION_CHANNEL = <span class=\\"hljs-string\\">\\"service_notification\\"</span>\\n\\n    <span class=\\"hljs-comment\\">// ?</span>\\n    <span class=\\"hljs-keyword\\">val</span> JOB_ID = <span class=\\"hljs-number\\">4545</span>\\n\\n    <span class=\\"hljs-comment\\">/**\\n     * Android 8からService使うには通知出さないといけなくなった。\\n     * */</span>\\n    <span class=\\"hljs-meta\\">@RequiresApi(Build.VERSION_CODES.O)</span>\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate()\\n        <span class=\\"hljs-keyword\\">val</span> notificationManager =\\n            <span class=\\"hljs-keyword\\">this</span>.getSystemService(Context.NOTIFICATION_SERVICE) <span class=\\"hljs-keyword\\">as</span> NotificationManager\\n        <span class=\\"hljs-keyword\\">if</span> (notificationManager.getNotificationChannel(SERVICE_NOTIFICATION_CHANNEL) == <span class=\\"hljs-literal\\">null</span>) {\\n            <span class=\\"hljs-keyword\\">val</span> notificationChannel =\\n                NotificationChannel(SERVICE_NOTIFICATION_CHANNEL, <span class=\\"hljs-string\\">\\"ExoPlayerでダウンロードテスト通知\\"</span>, NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        <span class=\\"hljs-keyword\\">val</span> notification = Notification.Builder(<span class=\\"hljs-keyword\\">this</span>, SERVICE_NOTIFICATION_CHANNEL).apply {\\n            setContentTitle(<span class=\\"hljs-string\\">\\"ExoPlayerでダウンロードテスト\\"</span>)\\n            setContentText(<span class=\\"hljs-string\\">\\"サービスが実行中です\\"</span>)\\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\\n        }\\n        startForeground(<span class=\\"hljs-number\\">1</span>, notification.build())\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getDownloadManager</span><span class=\\"hljs-params\\">()</span></span>: DownloadManager {\\n        <span class=\\"hljs-comment\\">// Note: This should be a singleton in your app.</span>\\n        <span class=\\"hljs-keyword\\">val</span> databaseProvider = ExoDatabaseProvider(<span class=\\"hljs-keyword\\">this</span>)\\n        <span class=\\"hljs-comment\\">// A download cache should not evict media, so should use a NoopCacheEvictor.</span>\\n        <span class=\\"hljs-keyword\\">val</span> downloadCache = SimpleCache(\\n            File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${this.getExternalFilesDir(null)?.path}</span>/cache\\"</span>),\\n            NoOpCacheEvictor(),\\n            databaseProvider\\n        )\\n        <span class=\\"hljs-comment\\">// Create a factory for reading the data from the network.</span>\\n        <span class=\\"hljs-keyword\\">val</span> dataSourceFactory =\\n            DefaultHttpDataSourceFactory(<span class=\\"hljs-string\\">\\"@takusan_23\\"</span>)\\n        <span class=\\"hljs-comment\\">// Create the download manager.</span>\\n        <span class=\\"hljs-keyword\\">val</span> downloadManager = DownloadManager(\\n            <span class=\\"hljs-keyword\\">this</span>,\\n            databaseProvider,\\n            downloadCache,\\n            dataSourceFactory\\n        )\\n        downloadManager.addListener(<span class=\\"hljs-keyword\\">object</span> : DownloadManager.Listener {\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onIdle</span><span class=\\"hljs-params\\">(downloadManager: <span class=\\"hljs-type\\">DownloadManager</span>)</span></span> {\\n                <span class=\\"hljs-keyword\\">super</span>.onIdle(downloadManager)\\n                println(<span class=\\"hljs-string\\">\\"終了？\\"</span>)\\n            }\\n        })\\n        <span class=\\"hljs-keyword\\">return</span> downloadManager\\n    }\\n\\n    <span class=\\"hljs-meta\\">@RequiresApi(Build.VERSION_CODES.O)</span>\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getForegroundNotification</span><span class=\\"hljs-params\\">(downloads: <span class=\\"hljs-type\\">MutableList</span>&lt;<span class=\\"hljs-type\\">Download</span>&gt;)</span></span>: Notification {\\n        <span class=\\"hljs-keyword\\">val</span> notificationManager =\\n            <span class=\\"hljs-keyword\\">this</span>.getSystemService(Context.NOTIFICATION_SERVICE) <span class=\\"hljs-keyword\\">as</span> NotificationManager\\n        <span class=\\"hljs-keyword\\">if</span> (notificationManager.getNotificationChannel(NOTIFICATION_CHANNEL) == <span class=\\"hljs-literal\\">null</span>) {\\n            <span class=\\"hljs-keyword\\">val</span> notificationChannel =\\n                NotificationChannel(NOTIFICATION_CHANNEL, <span class=\\"hljs-string\\">\\"オフライン再生準備\\"</span>, NotificationManager.IMPORTANCE_LOW)\\n            notificationManager.createNotificationChannel(notificationChannel)\\n        }\\n        <span class=\\"hljs-keyword\\">val</span> notification = Notification.Builder(<span class=\\"hljs-keyword\\">this</span>, NOTIFICATION_CHANNEL).apply {\\n            setContentTitle(<span class=\\"hljs-string\\">\\"オフライン再生準備\\"</span>)\\n            setContentText(downloads.size.toString())\\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> notification.build()\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getScheduler</span><span class=\\"hljs-params\\">()</span></span>: Scheduler? {\\n        <span class=\\"hljs-keyword\\">return</span> PlatformScheduler(<span class=\\"hljs-keyword\\">this</span>, JOB_ID)\\n    }\\n}</code></pre><p>コピペで使えると思います。</p>\\n<h1>Activity</h1>\\n<h2>レイアウト</h2>\\n<p>皆さんはちゃんとIDに名前つけてあげてね</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:gravity</span>=<span class=\\"hljs-string\\">\\"center\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">SurfaceView</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/surfaceView\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"160dp\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"90dp\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"サービス起動\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button2\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"取得\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button3\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"再生\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button4\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"一時停止・再生\\"</span> /&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><h2>MainActivity.kt</h2>\\n<p><code>CONTENT_URL</code>の中は各自インターネット上にあるDLしてもいい動画を指定しておいてください。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">lateinit</span> <span class=\\"hljs-keyword\\">var</span> exoPlayer: SimpleExoPlayer\\n\\n    <span class=\\"hljs-comment\\">// ネットにある動画URL指定しといて</span>\\n    <span class=\\"hljs-keyword\\">val</span> CONTENT_URL = <span class=\\"hljs-string\\">\\"\\"</span>\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        exoPlayer = SimpleExoPlayer.Builder(<span class=\\"hljs-keyword\\">this</span>).build()\\n\\n        button.setOnClickListener {\\n            <span class=\\"hljs-comment\\">// サービス起動</span>\\n            <span class=\\"hljs-keyword\\">val</span> intent = Intent(<span class=\\"hljs-keyword\\">this</span>, DownloadServiceTest::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>)</span>\\n            <span class=\\"hljs-keyword\\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\\n                startForegroundService(intent)\\n            } <span class=\\"hljs-keyword\\">else</span> {\\n                startService(intent)\\n            }\\n        }\\n\\n        button2.setOnClickListener {\\n            cache()\\n        }\\n\\n        button3.setOnClickListener {\\n            playCache()\\n        }\\n\\n        button4.setOnClickListener {\\n            <span class=\\"hljs-keyword\\">if</span> (::exoPlayer.isInitialized) {\\n                exoPlayer.playWhenReady = !exoPlayer.playWhenReady\\n            }\\n        }\\n\\n    }\\n\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">cache</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> downloadRequest = DownloadRequest(\\n            <span class=\\"hljs-string\\">\\"cache\\"</span>,\\n            DownloadRequest.TYPE_PROGRESSIVE,\\n            CONTENT_URL.toUri(),  <span class=\\"hljs-comment\\">/* streamKeys= */</span>\\n            Collections.emptyList(),  <span class=\\"hljs-comment\\">/* customCacheKey= */</span>\\n            <span class=\\"hljs-literal\\">null</span>,\\n            ByteArray(<span class=\\"hljs-number\\">1024</span>)\\n        )\\n        DownloadService.sendAddDownload(<span class=\\"hljs-keyword\\">this</span>, DownloadServiceTest::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">downloadRequest</span>, <span class=\\"hljs-type\\">false)</span></span>\\n    }\\n\\n    <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">playCache</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> cache =\\n            SimpleCache(File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${this.getExternalFilesDir(null)?.path}</span>/cache\\"</span>), LeastRecentlyUsedCacheEvictor(<span class=\\"hljs-number\\">1024</span>), ExoDatabaseProvider(<span class=\\"hljs-keyword\\">this</span>))\\n        <span class=\\"hljs-keyword\\">val</span> upstreamDataSourceFactory = DefaultDataSourceFactory(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>)\\n        <span class=\\"hljs-keyword\\">val</span> dataSourceFactory = CacheDataSourceFactory(\\n            cache, upstreamDataSourceFactory\\n        )\\n        <span class=\\"hljs-keyword\\">val</span> mediaSource =\\n            ProgressiveMediaSource.Factory(dataSourceFactory)\\n                .createMediaSource(CONTENT_URL.toUri())\\n        exoPlayer.prepare(mediaSource)\\n        exoPlayer.setVideoSurfaceView(surfaceView)\\n        exoPlayer.playWhenReady = <span class=\\"hljs-literal\\">true</span>\\n    }\\n    \\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onDestroy</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onDestroy()\\n        <span class=\\"hljs-keyword\\">if</span> (::exoPlayer.isInitialized) {\\n            exoPlayer.release()\\n        }\\n    }\\n\\n}</code></pre><p>これで<br>\\n<strong>サービス起動</strong>押して<br>\\n<strong>取得</strong>を押すと取得を始めます。<code>cache()</code>関数<br>\\n取得後<strong>アプリを再起動</strong>すると<strong>再生</strong>を押して再生ができます。<code>playCache()</code>関数<br>\\n再起動する前に再生するとなんか落ちます。謎</p>\\n<h1>HLSに対応する</h1>\\n<p>HLS版<code>cache()</code>、<code>playCache()</code>を作りました。<br>\\n参考：https://exoplayer.dev/downloading-media.html</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">cacheHLS</span><span class=\\"hljs-params\\">()</span></span> {\\n    <span class=\\"hljs-keyword\\">val</span> sourceFactory = DefaultDataSourceFactory(\\n        <span class=\\"hljs-keyword\\">this</span>,\\n        <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>,\\n        <span class=\\"hljs-keyword\\">object</span> : TransferListener {\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferInitializing</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferStart</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferEnd</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onBytesTransferred</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>, bytesTransferred: <span class=\\"hljs-type\\">Int</span>)</span></span> {\\n            }\\n        })\\n    <span class=\\"hljs-keyword\\">val</span> downloadHelper = DownloadHelper.forHls(\\n        <span class=\\"hljs-keyword\\">this</span>,\\n        CONTENT_URL.toUri(),\\n        sourceFactory,\\n        DefaultRenderersFactory(<span class=\\"hljs-keyword\\">this</span>)\\n    )\\n    downloadHelper.prepare(<span class=\\"hljs-keyword\\">object</span> : DownloadHelper.Callback {\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onPrepared</span><span class=\\"hljs-params\\">(helper: <span class=\\"hljs-type\\">DownloadHelper</span>)</span></span> {\\n            DownloadService.sendAddDownload(<span class=\\"hljs-keyword\\">this</span><span class=\\"hljs-symbol\\">@MainActivity</span>, DownloadServiceTest::<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span>.<span class=\\"hljs-title\\">java</span>, <span class=\\"hljs-type\\">downloadHelper.getDownloadRequest</span></span>(ByteArray(<span class=\\"hljs-number\\">1024</span>)), <span class=\\"hljs-literal\\">false</span>)\\n            downloadHelper.release()\\n        }\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onPrepareError</span><span class=\\"hljs-params\\">(helper: <span class=\\"hljs-type\\">DownloadHelper</span>, e: <span class=\\"hljs-type\\">IOException</span>)</span></span> {\\n        }\\n    })\\n}\\n<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">playHLSCache</span><span class=\\"hljs-params\\">()</span></span> {\\n    <span class=\\"hljs-keyword\\">val</span> cache =\\n        SimpleCache(File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${this.getExternalFilesDir(null)?.path}</span>/cache\\"</span>), LeastRecentlyUsedCacheEvictor(<span class=\\"hljs-number\\">1024</span>), ExoDatabaseProvider(<span class=\\"hljs-keyword\\">this</span>))\\n    <span class=\\"hljs-keyword\\">val</span> upstreamDataSourceFactory = DefaultDataSourceFactory(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>)\\n    <span class=\\"hljs-keyword\\">val</span> dataSourceFactory = CacheDataSourceFactory(\\n        cache, upstreamDataSourceFactory\\n    )\\n    <span class=\\"hljs-keyword\\">val</span> sourceFactory = DefaultDataSourceFactory(\\n        <span class=\\"hljs-keyword\\">this</span>,\\n        <span class=\\"hljs-string\\">\\"@takusan_23\\"</span>,\\n        <span class=\\"hljs-keyword\\">object</span> : TransferListener {\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferInitializing</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferStart</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onTransferEnd</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>)</span></span> {\\n            }\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onBytesTransferred</span><span class=\\"hljs-params\\">(source: <span class=\\"hljs-type\\">DataSource</span>?, dataSpec: <span class=\\"hljs-type\\">DataSpec</span>?, isNetwork: <span class=\\"hljs-type\\">Boolean</span>, bytesTransferred: <span class=\\"hljs-type\\">Int</span>)</span></span> {\\n            }\\n        })\\n    <span class=\\"hljs-keyword\\">val</span> downloadHelper = DownloadHelper.forHls(\\n        <span class=\\"hljs-keyword\\">this</span>,\\n        CONTENT_URL.toUri(),\\n        sourceFactory,\\n        DefaultRenderersFactory(<span class=\\"hljs-keyword\\">this</span>)\\n    )\\n    downloadHelper.prepare(<span class=\\"hljs-keyword\\">object</span> : DownloadHelper.Callback {\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onPrepared</span><span class=\\"hljs-params\\">(helper: <span class=\\"hljs-type\\">DownloadHelper</span>)</span></span> {\\n            <span class=\\"hljs-keyword\\">val</span> mediaSource =\\n                DownloadHelper.createMediaSource(helper.getDownloadRequest(ByteArray(<span class=\\"hljs-number\\">1024</span>)), dataSourceFactory)\\n            exoPlayer.prepare(mediaSource)\\n            exoPlayer.setVideoSurfaceView(surfaceView)\\n            exoPlayer.playWhenReady = <span class=\\"hljs-literal\\">true</span>\\n        }\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onPrepareError</span><span class=\\"hljs-params\\">(helper: <span class=\\"hljs-type\\">DownloadHelper</span>, e: <span class=\\"hljs-type\\">IOException</span>)</span></span> {\\n        }\\n    })\\n}</code></pre><p>よくわからんな。</p>\\n<h1>終わりに</h1>\\n<p>もう良くわかんないからソースだけ置いておくわ。詳しい人たのんだ\\nhttps://github.com/takusan23/ExoPlayerMediaDownloadSample</p>\\n","dir":"contents/posts/json","base":"ExoPlayerにオフライン再生機能あるらしいので使ってみる.json","ext":".json","sourceBase":"ExoPlayerにオフライン再生機能あるらしいので使ってみる.md","sourceExt":".md"}')},331:function(n){n.exports=JSON.parse('{"title":"MastodonとMisskey同時に見れるクライアント作った？","created_at":"2020-05-16T20:46:04.000Z","tags":["Android","Kotlin","Mastodon","Misskey"],"bodyContent":"どうもこんばんわ。  \\n少し前だけどニコ生で世話やきキツネの仙狐さん一挙放送見ました。かわいいいいいいいいいい  \\n\\n\\n# 本題\\nPlayStoreに出すかは考え中。  \\n{%asset_img ss.png ss %}\\n\\nダークモードがちょっとかっこいい  \\n{%asset_img ss_dark.png ss_dark %}\\n\\n2列になってるけど設定で減らせたり増やせたりできます。  \\n時系列順になってるけど2列に出してるせいでなんか見ずらい気がする。(でも一列のクライアントいっぱいあるし・・・)\\n\\n# なんで作ったの？\\nViewModel+LiveData（画面回転しても値を保持し続けてくれるやつ）でなんか一個作ろうとした。使わなかったけど。\\n\\n## なんで使わないの？\\nArrayListがViewModelで使えない？`add()`しても増えない（そもそもArrayListをViewModelで使うのが間違い説がある）  \\nあとLiveDataの通知は`add()`じゃこない。  \\nしゃーないので（すでにデータクラスとか作っちゃった）ViewModel+LiveData抜きで作った。  \\n**代わりに`onSaveInstanceState`で値を引き継ぐようにしたので倒しても大丈夫（再度APIを叩くことが無い）**\\n\\n# ダウンロード\\nhttps://github.com/takusan23/KaisendonMk2/releases/tag/1.0  \\nPlayストアは考え中。\\n\\n# ソースコード\\nhttps://github.com/takusan23/KaisendonMk2\\n\\n# できること\\n逆に言うとここに書いてなければできません。\\n- MastodonとMisskeyを同時に見れる\\n    - Mastodon\\n        - ホーム/通知(ストリーミングのみ)/ローカル\\n    - Misskey\\n        - ホーム/通知(ストリーミングのみ)/ローカル\\n    - 複数アカウント\\n        - 私はMastodonとMisskeyそれぞれ一個ずつしか持ってないけどね。\\n- ストリーミングAPI\\n- 投稿\\n    - 公開範囲\\n    - カスタム絵文字一覧\\n    - 端末の情報（キャリア名とか）\\n- モバイルデータ通信のときは画像非表示\\n    - 4GBしか使えないんや。このクライアントの目玉（のつもり）\\n        - 今はずっとWi-Fi環境下だけど\\n- ダークモード\\n- カスタム絵文字、GIFカスタム絵文字\\n- 投稿操作\\n    - ふぁぼ、ブースト\\n    - Misskeyはリアクション\\n- タイムラインの背景変える機能\\n- タイムラインのフォント変える機能\\n- 突然のクラッシュ\\n    - 複数のTLをまとめて時系列順に並べる処理で出てる。\\n\\n# できないこと\\n- 画像投稿\\n- 添付メディア表示もない\\n- 時間指定投稿\\n- アンケ\\n- アカウント情報見る\\n    - フォローも\\n    - プロフィール編集もない\\n- 通知はストリーミングのみ\\n- できることに書いてない事はできない\\n\\n# やりたいこと\\n- 添付メディア表示\\n- プロフィール表示\\n\\n\\n- あとは・・・他クライアントに任せた。\\n    - モバイルデータ回線のとき画像を非表示にする機能が欲しかっただけなので\\n\\n# 使い方\\n初回起動時は強制的にログイン画面が出ます。  \\nログインできたら左下のレンチマーク押して**読み込むタイムラインの設定**を選ぶと\\n- ホーム\\n- 通知\\n- ローカル\\n\\nから選べるので見たいタイムラインにチェックしてください。  \\n\\n複数ログインのときはレンチマーク押して**ログイン**を押して、ログインを済ませて、**読み込むタイムラインの設定**を選ぶと追加されてるので後は楽しんで。\\n\\n# 作るのに大変だったところとか\\n## Twitterと違う点\\n色んな所[(こことかわかりやすい)](https://blog.yukiya.me/2020/05/15/joinmastodon2020/)でまとめられてるのであんまり書かないけど\\n\\n| できること       | Twitter                                                   | Mastodon                                                                                                                               |\\n|------------------|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|\\n| ブックマーク     | あるけどAPIがない                                         | 使ったこと無い(インスタンスが対応してない)                                                                                             |\\n| アンケート       | あるけどAPIない（アンケ機能ついてから数年経ってる）       | APIもあるしAPI限定の複数投票許可がある                                                                                                 |\\n| 本人認証         | 公式って一般で取れんの？                                  | 自分のホームページに指定したHTML貼り付けて、プロフィールの補足情報にリンク貼れば認証済みになる                                         |\\n| リアルタイム更新 | FilterStream（いつまで使えるか不明）かTweetDeck           | WebSocketで利用可能                                                                                                                    |\\n| APIの利用        | 審査を通る必要がある（垢がいつ消えるか怖い&電話番号必須） | Via芸できるよ（クライアントから作れる`/api/v1/apps`。鯖がいっぱいあるのでその都度アプリ(クライアント)を作る）                          |\\n| お気に入り       | 他の人のお気に入り見れる                                  | 自分しか見れないのでブックマーク代わりにでも（**ただしふぁぼ通知は相手に行くのと投稿のお気に入り登録したユーザー一覧には表示される**） |\\n\\n## MastodonとMisskeyはAPIぜんぜん違う\\n\\nまあそれはそうだろって話（PleromaはMastodonと互換性が有るらしい？要検証）なんだけどMastodonにあってMisskeyに無いとかって結構有るからMastodonのがそのまま使えるわけじゃない。世の中のクライアント作ってる人すごいね\\n\\nついでにMisskeyのAPIは(多分)全てPOSTリクエストです。タイムラインの取得もPOSTです。投稿もPOSTです。何故かは知りませんが。\\n\\nOkHttp+Coroutineを使ったサンプル\\n```kotlin\\n// ユーザーエージェント\\nprivate val USER_AGENT = \\"KaisendonMk2;@takusan_23\\"\\n\\n// application/json\\nprivate val APPLICATON_JSON = \\"application/json\\".toMediaType()\\n\\nprivate fun baseTimeLineAPI(url: String, limit: Int = 100): Deferred<Response> =\\n    GlobalScope.async {\\n        val postData = JSONObject().apply {\\n            put(\\"limit\\", limit)\\n            put(\\"i\\", instanceToken.token)\\n        }.toString().toRequestBody(APPLICATON_JSON)\\n        val request = Request.Builder().apply {\\n            url(\\"https://misskey.m544.net/api/$url\\")\\n            header(\\"User-Agent\\", USER_AGENT)\\n            post(postData)\\n        }.build()\\n        val okHttpClient = OkHttpClient()\\n        val response = okHttpClient.newCall(request).execute()\\n        return@async response\\n    }\\n```\\nMisskeyのTL取得APIは💯件まで取れます。  \\n\\n## MisskeyAPIのドキュメントが\\n`Misskey API`って調べて一番上に出てくるサイトを開いてAPIリファレンスを見ると、**アクセストークンの取得になんかアプリを登録しろ**って書いてあるんですが、この方法で大丈夫でした→ https://misskey.m544.net/docs/ja-JP/api  \\nそもそもアプリを登録しろってやり方なんですが、自由に鯖が作れる（私は作ったこと無いけど）Mastodon/Misskeyの仕組みではまず無理ですね。\\n\\n## カスタム絵文字\\n最近は~~ニコ動~~（**例のアレ**）でもPartyParrotブームが来たわけですが、MastodonやMisskeyにも動く絵文字（カスタム絵文字）があります。   \\n文字の中に画像を入れるのってHTMLとかだと簡単そうでGIFにも対応できるんですが、今回はAndroidです。TextViewじゃ無理やろ。    \\n世の中のクライアントがどの様にカスタム絵文字を描画してるのかわかりませんが、私はMarkdown表示ライブラリに画像を表示する機能があったのでそれを使っています。  \\nMarkdown表示ライブラリ→ https://github.com/noties/Markwon\\n\\n```kotlin\\n/**\\n * カスタム絵文字にTextViewを対応させる\\n * @param content 文字列\\n * @param textView setText代わり\\n * */\\nfun setCustomEmoji(textView: TextView, content: String) {\\n    // Markdownのライブラリ入れた\\n    val markwon = Markwon.builder(textView.context)\\n        .usePlugin(HtmlPlugin.create())\\n        .usePlugin(ImagesPlugin.create(textView.context))\\n        .usePlugin(GifPlugin.create())\\n        .usePlugin(object : AbstractMarkwonPlugin() {\\n            // 読み込み中は別のDrawableを表示する\\n            override fun configureImages(builder: AsyncDrawableLoader.Builder) {\\n                builder.placeholderDrawableProvider {\\n                    // your custom placeholder drawable\\n                    textView.context.getDrawable(R.drawable.ic_refresh_black_24dp)\\n                }\\n            }\\n        }).build()\\n    markwon.setMarkdown(textView, customEmojiReplaceText)\\n}\\n```\\n\\n## 自由にファイルアクセスできないこんな世の中でTypeface#createFromFile()\\n~~ポイズン~~  \\nフォント変更機能はほしいです。TextViewにもフォントファイルを適用する（ユーザーが自由に適用できる）機能あります。`Typeface#createFromFile()`って言うんですけどね。  \\nこれ引数にUriは指定できません（多分）。`file://`から始まるパスである必要があります。  \\nこのアプリではまずSAFでttfファイルを選んでもらって\\n\\n```kotlin\\nval intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\\n    type = \\"font/*\\"\\n}\\nstartActivityForResult(intent, FONT_REQUEST_CODE)\\n```\\n\\nアプリ固有ディレクトリにコピーして使います\\n\\n```kotlin\\n// アプリ固有ディレクトリにコピー\\nval uri = data?.data ?: return\\nval file = File(\\"${context?.getExternalFilesDir(null)}/font.ttf\\")\\nfile.createNewFile()\\n// こぴー\\nval byteArray = context?.contentResolver?.openInputStream(uri)?.readBytes()\\nif (byteArray != null) {\\n    file.writeBytes(byteArray)\\n}\\n```\\n\\nこれで`Typeface.createFromFile()`が使えます。\\n\\n## RecyclerViewで表示\\nMastodonとMisskeyは別のデータクラスなのでRecyclerViewのAdapterにわたすときに考えないといけないんですよね。  \\n今回はAdapterに渡すためのデータクラスを別に用意しました。\\n\\n```kotlin\\n/**\\n * RecyclerViewに渡すデータクラス\\n * @param allTimeLineData 色つけたりするから；；\\n * どっちか一個だけ入れろ↓。\\n * @param statusData\\n * @param notificationData\\n * */\\ndata class TimeLineItemData(\\n    val allTimeLineData: AllTimeLineData,\\n    val statusData: StatusData? = null, // null以外ならTL表示\\n    val notificationData: NotificationData? = null,// null以外なら通知表示\\n    val misskeyNoteData: MisskeyNoteData? = null, // null以外ならNote表示\\n    val misskeyNotificationData: MisskeyNotificationData? = null // null以外なら通知表示\\n) : Serializable\\n```\\nMastodonの投稿か通知かMisskeyの投稿か通知のどれかが入ることになってます。`AllTimeLineDataはCardViewの色情報が入ってます。`\\n\\nそれからRecyclerViewでレイアウトを複数用意する方法ですが`getItemViewType()`を使います。\\n\\nちょっと長いけど\\n\\n```kotlin\\n// レイアウトの定数（onCreateViewHolder()で使う）\\ncompanion object {\\n    /** Mastodon トゥート */\\n    val TOOT_LAYOUT = 0\\n    /** Mastodon 通知 */\\n    val NOTIFICATION_LAYOUT = 1\\n    /** Mastodon ブースト */\\n    val TOOT_BOOST_LAYOUT = 2\\n    /** Misskey 投稿 */\\n    val MISSKEY_NOTE_LAYOUT = 3\\n    /** Misskey 通知 */\\n    val MISSKEY_NOTIFICATION_LAYOUT = 4\\n    /** Misskey Renote */\\n    val MISSKEY_RENOTE_LAYOUT = 5\\n}\\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\\n    // レイアウト分岐\\n    val view = when (viewType) {\\n        TOOT_BOOST_LAYOUT -> BoostViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_boost, parent, false))\\n        TOOT_LAYOUT -> TootViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_timeline, parent, false))\\n        NOTIFICATION_LAYOUT -> NotificationViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_notification, parent, false))\\n        MISSKEY_NOTE_LAYOUT -> MisskeyNoteViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_note, parent, false))\\n        MISSKEY_NOTIFICATION_LAYOUT -> MisskeyNotificationViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_notification, parent, false))\\n        MISSKEY_RENOTE_LAYOUT -> MisskeyRenoteViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_renote, parent, false))\\n        else -> TootViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_timeline, parent, false))\\n    }\\n    return view\\n}\\n// 通知と投稿で分岐させる\\noverride fun getItemViewType(position: Int): Int {\\n    return when {\\n        // Mastodon\\n        timeLineItemDataList[position].statusData != null && timeLineItemDataList[position].statusData!!.reblogStatusData != null -> TOOT_BOOST_LAYOUT\\n        timeLineItemDataList[position].statusData != null -> TOOT_LAYOUT\\n        timeLineItemDataList[position].notificationData != null -> NOTIFICATION_LAYOUT\\n        // Misskey\\n        timeLineItemDataList[position].misskeyNoteData != null && timeLineItemDataList[position].misskeyNoteData!!.renote != null -> MISSKEY_RENOTE_LAYOUT\\n        timeLineItemDataList[position].misskeyNoteData != null -> MISSKEY_NOTE_LAYOUT\\n        timeLineItemDataList[position].misskeyNotificationData != null -> MISSKEY_NOTIFICATION_LAYOUT\\n        else -> TOOT_LAYOUT\\n    }\\n}\\n```\\n\\n## データクラスで画面回転耐久\\n~~これは別の記事で書きたい。~~書きました→ https://takusan23.github.io/Bibouroku/2020/05/17/画面回転しても尊厳損傷しないようにonSaveInstanceState使う/\\n\\n# 終わりに\\nコルーチンいっぱいつかった。  \\n`withContext(Dispatchers.IO)`って便利だね。括弧が減りそう。\\n```kotlin\\n// コルーチン\\nGlobalScope.launch(Dispatchers.Main) {\\n    // UIスレッドのコルーチン -> UIスレッドではないスレッドへ切り替え\\n    val response = withContext(Dispatchers.IO) {\\n        // インターネットから持ってくるなど\\n    }\\n    // 帰ってきたらUIスレッドに戻る\\n}\\n```","bodyHtml":"<p>どうもこんばんわ。<br>\\n少し前だけどニコ生で世話やきキツネの仙狐さん一挙放送見ました。かわいいいいいいいいいい</p>\\n<h1>本題</h1>\\n<p>PlayStoreに出すかは考え中。<br>\\n{%asset_img ss.png ss %}</p>\\n<p>ダークモードがちょっとかっこいい<br>\\n{%asset_img ss_dark.png ss_dark %}</p>\\n<p>2列になってるけど設定で減らせたり増やせたりできます。<br>\\n時系列順になってるけど2列に出してるせいでなんか見ずらい気がする。(でも一列のクライアントいっぱいあるし・・・)</p>\\n<h1>なんで作ったの？</h1>\\n<p>ViewModel+LiveData（画面回転しても値を保持し続けてくれるやつ）でなんか一個作ろうとした。使わなかったけど。</p>\\n<h2>なんで使わないの？</h2>\\n<p>ArrayListがViewModelで使えない？<code>add()</code>しても増えない（そもそもArrayListをViewModelで使うのが間違い説がある）<br>\\nあとLiveDataの通知は<code>add()</code>じゃこない。<br>\\nしゃーないので（すでにデータクラスとか作っちゃった）ViewModel+LiveData抜きで作った。<br>\\n<strong>代わりに<code>onSaveInstanceState</code>で値を引き継ぐようにしたので倒しても大丈夫（再度APIを叩くことが無い）</strong></p>\\n<h1>ダウンロード</h1>\\n<p>https://github.com/takusan23/KaisendonMk2/releases/tag/1.0<br>\\nPlayストアは考え中。</p>\\n<h1>ソースコード</h1>\\n<p>https://github.com/takusan23/KaisendonMk2</p>\\n<h1>できること</h1>\\n<p>逆に言うとここに書いてなければできません。</p>\\n<ul>\\n<li>MastodonとMisskeyを同時に見れる\\n<ul>\\n<li>Mastodon\\n<ul>\\n<li>ホーム/通知(ストリーミングのみ)/ローカル</li>\\n</ul>\\n</li>\\n<li>Misskey\\n<ul>\\n<li>ホーム/通知(ストリーミングのみ)/ローカル</li>\\n</ul>\\n</li>\\n<li>複数アカウント\\n<ul>\\n<li>私はMastodonとMisskeyそれぞれ一個ずつしか持ってないけどね。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>ストリーミングAPI</li>\\n<li>投稿\\n<ul>\\n<li>公開範囲</li>\\n<li>カスタム絵文字一覧</li>\\n<li>端末の情報（キャリア名とか）</li>\\n</ul>\\n</li>\\n<li>モバイルデータ通信のときは画像非表示\\n<ul>\\n<li>4GBしか使えないんや。このクライアントの目玉（のつもり）\\n<ul>\\n<li>今はずっとWi-Fi環境下だけど</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>ダークモード</li>\\n<li>カスタム絵文字、GIFカスタム絵文字</li>\\n<li>投稿操作\\n<ul>\\n<li>ふぁぼ、ブースト</li>\\n<li>Misskeyはリアクション</li>\\n</ul>\\n</li>\\n<li>タイムラインの背景変える機能</li>\\n<li>タイムラインのフォント変える機能</li>\\n<li>突然のクラッシュ\\n<ul>\\n<li>複数のTLをまとめて時系列順に並べる処理で出てる。</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>できないこと</h1>\\n<ul>\\n<li>画像投稿</li>\\n<li>添付メディア表示もない</li>\\n<li>時間指定投稿</li>\\n<li>アンケ</li>\\n<li>アカウント情報見る\\n<ul>\\n<li>フォローも</li>\\n<li>プロフィール編集もない</li>\\n</ul>\\n</li>\\n<li>通知はストリーミングのみ</li>\\n<li>できることに書いてない事はできない</li>\\n</ul>\\n<h1>やりたいこと</h1>\\n<ul>\\n<li>\\n<p>添付メディア表示</p>\\n</li>\\n<li>\\n<p>プロフィール表示</p>\\n</li>\\n<li>\\n<p>あとは・・・他クライアントに任せた。</p>\\n<ul>\\n<li>モバイルデータ回線のとき画像を非表示にする機能が欲しかっただけなので</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>使い方</h1>\\n<p>初回起動時は強制的にログイン画面が出ます。<br>\\nログインできたら左下のレンチマーク押して<strong>読み込むタイムラインの設定</strong>を選ぶと</p>\\n<ul>\\n<li>ホーム</li>\\n<li>通知</li>\\n<li>ローカル</li>\\n</ul>\\n<p>から選べるので見たいタイムラインにチェックしてください。</p>\\n<p>複数ログインのときはレンチマーク押して<strong>ログイン</strong>を押して、ログインを済ませて、<strong>読み込むタイムラインの設定</strong>を選ぶと追加されてるので後は楽しんで。</p>\\n<h1>作るのに大変だったところとか</h1>\\n<h2>Twitterと違う点</h2>\\n<p>色んな所<a href=\\"https://blog.yukiya.me/2020/05/15/joinmastodon2020/\\">(こことかわかりやすい)</a>でまとめられてるのであんまり書かないけど</p>\\n<table>\\n<thead>\\n<tr>\\n<th>できること</th>\\n<th>Twitter</th>\\n<th>Mastodon</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ブックマーク</td>\\n<td>あるけどAPIがない</td>\\n<td>使ったこと無い(インスタンスが対応してない)</td>\\n</tr>\\n<tr>\\n<td>アンケート</td>\\n<td>あるけどAPIない（アンケ機能ついてから数年経ってる）</td>\\n<td>APIもあるしAPI限定の複数投票許可がある</td>\\n</tr>\\n<tr>\\n<td>本人認証</td>\\n<td>公式って一般で取れんの？</td>\\n<td>自分のホームページに指定したHTML貼り付けて、プロフィールの補足情報にリンク貼れば認証済みになる</td>\\n</tr>\\n<tr>\\n<td>リアルタイム更新</td>\\n<td>FilterStream（いつまで使えるか不明）かTweetDeck</td>\\n<td>WebSocketで利用可能</td>\\n</tr>\\n<tr>\\n<td>APIの利用</td>\\n<td>審査を通る必要がある（垢がいつ消えるか怖い&amp;電話番号必須）</td>\\n<td>Via芸できるよ（クライアントから作れる<code>/api/v1/apps</code>。鯖がいっぱいあるのでその都度アプリ(クライアント)を作る）</td>\\n</tr>\\n<tr>\\n<td>お気に入り</td>\\n<td>他の人のお気に入り見れる</td>\\n<td>自分しか見れないのでブックマーク代わりにでも（<strong>ただしふぁぼ通知は相手に行くのと投稿のお気に入り登録したユーザー一覧には表示される</strong>）</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>MastodonとMisskeyはAPIぜんぜん違う</h2>\\n<p>まあそれはそうだろって話（PleromaはMastodonと互換性が有るらしい？要検証）なんだけどMastodonにあってMisskeyに無いとかって結構有るからMastodonのがそのまま使えるわけじゃない。世の中のクライアント作ってる人すごいね</p>\\n<p>ついでにMisskeyのAPIは(多分)全てPOSTリクエストです。タイムラインの取得もPOSTです。投稿もPOSTです。何故かは知りませんが。</p>\\n<p>OkHttp+Coroutineを使ったサンプル</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// ユーザーエージェント</span>\\n<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-keyword\\">val</span> USER_AGENT = <span class=\\"hljs-string\\">\\"KaisendonMk2;@takusan_23\\"</span>\\n\\n<span class=\\"hljs-comment\\">// application/json</span>\\n<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-keyword\\">val</span> APPLICATON_JSON = <span class=\\"hljs-string\\">\\"application/json\\"</span>.toMediaType()\\n\\n<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">baseTimeLineAPI</span><span class=\\"hljs-params\\">(url: <span class=\\"hljs-type\\">String</span>, limit: <span class=\\"hljs-type\\">Int</span> = <span class=\\"hljs-number\\">100</span>)</span></span>: Deferred&lt;Response&gt; =\\n    GlobalScope.async {\\n        <span class=\\"hljs-keyword\\">val</span> postData = JSONObject().apply {\\n            put(<span class=\\"hljs-string\\">\\"limit\\"</span>, limit)\\n            put(<span class=\\"hljs-string\\">\\"i\\"</span>, instanceToken.token)\\n        }.toString().toRequestBody(APPLICATON_JSON)\\n        <span class=\\"hljs-keyword\\">val</span> request = Request.Builder().apply {\\n            url(<span class=\\"hljs-string\\">\\"https://misskey.m544.net/api/<span class=\\"hljs-variable\\">$url</span>\\"</span>)\\n            header(<span class=\\"hljs-string\\">\\"User-Agent\\"</span>, USER_AGENT)\\n            post(postData)\\n        }.build()\\n        <span class=\\"hljs-keyword\\">val</span> okHttpClient = OkHttpClient()\\n        <span class=\\"hljs-keyword\\">val</span> response = okHttpClient.newCall(request).execute()\\n        <span class=\\"hljs-keyword\\">return</span><span class=\\"hljs-symbol\\">@async</span> response\\n    }</code></pre><p>MisskeyのTL取得APIは💯件まで取れます。</p>\\n<h2>MisskeyAPIのドキュメントが</h2>\\n<p><code>Misskey API</code>って調べて一番上に出てくるサイトを開いてAPIリファレンスを見ると、<strong>アクセストークンの取得になんかアプリを登録しろ</strong>って書いてあるんですが、この方法で大丈夫でした→ https://misskey.m544.net/docs/ja-JP/api<br>\\nそもそもアプリを登録しろってやり方なんですが、自由に鯖が作れる（私は作ったこと無いけど）Mastodon/Misskeyの仕組みではまず無理ですね。</p>\\n<h2>カスタム絵文字</h2>\\n<p>最近は<s>ニコ動</s>（<strong>例のアレ</strong>）でもPartyParrotブームが来たわけですが、MastodonやMisskeyにも動く絵文字（カスタム絵文字）があります。<br>\\n文字の中に画像を入れるのってHTMLとかだと簡単そうでGIFにも対応できるんですが、今回はAndroidです。TextViewじゃ無理やろ。<br>\\n世の中のクライアントがどの様にカスタム絵文字を描画してるのかわかりませんが、私はMarkdown表示ライブラリに画像を表示する機能があったのでそれを使っています。<br>\\nMarkdown表示ライブラリ→ https://github.com/noties/Markwon</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/**\\n * カスタム絵文字にTextViewを対応させる\\n * <span class=\\"hljs-doctag\\">@param</span> content 文字列\\n * <span class=\\"hljs-doctag\\">@param</span> textView setText代わり\\n * */</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">setCustomEmoji</span><span class=\\"hljs-params\\">(textView: <span class=\\"hljs-type\\">TextView</span>, content: <span class=\\"hljs-type\\">String</span>)</span></span> {\\n    <span class=\\"hljs-comment\\">// Markdownのライブラリ入れた</span>\\n    <span class=\\"hljs-keyword\\">val</span> markwon = Markwon.builder(textView.context)\\n        .usePlugin(HtmlPlugin.create())\\n        .usePlugin(ImagesPlugin.create(textView.context))\\n        .usePlugin(GifPlugin.create())\\n        .usePlugin(<span class=\\"hljs-keyword\\">object</span> : AbstractMarkwonPlugin() {\\n            <span class=\\"hljs-comment\\">// 読み込み中は別のDrawableを表示する</span>\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">configureImages</span><span class=\\"hljs-params\\">(builder: <span class=\\"hljs-type\\">AsyncDrawableLoader</span>.<span class=\\"hljs-type\\">Builder</span>)</span></span> {\\n                builder.placeholderDrawableProvider {\\n                    <span class=\\"hljs-comment\\">// your custom placeholder drawable</span>\\n                    textView.context.getDrawable(R.drawable.ic_refresh_black_24dp)\\n                }\\n            }\\n        }).build()\\n    markwon.setMarkdown(textView, customEmojiReplaceText)\\n}</code></pre><h2>自由にファイルアクセスできないこんな世の中でTypeface#createFromFile()</h2>\\n<p><s>ポイズン</s><br>\\nフォント変更機能はほしいです。TextViewにもフォントファイルを適用する（ユーザーが自由に適用できる）機能あります。<code>Typeface#createFromFile()</code>って言うんですけどね。<br>\\nこれ引数にUriは指定できません（多分）。<code>file://</code>から始まるパスである必要があります。<br>\\nこのアプリではまずSAFでttfファイルを選んでもらって</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">val</span> intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\\n    type = <span class=\\"hljs-string\\">\\"font/*\\"</span>\\n}\\nstartActivityForResult(intent, FONT_REQUEST_CODE)</code></pre><p>アプリ固有ディレクトリにコピーして使います</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// アプリ固有ディレクトリにコピー</span>\\n<span class=\\"hljs-keyword\\">val</span> uri = <span class=\\"hljs-keyword\\">data</span>?.<span class=\\"hljs-keyword\\">data</span> ?: <span class=\\"hljs-keyword\\">return</span>\\n<span class=\\"hljs-keyword\\">val</span> file = File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${context?.getExternalFilesDir(null)}</span>/font.ttf\\"</span>)\\nfile.createNewFile()\\n<span class=\\"hljs-comment\\">// こぴー</span>\\n<span class=\\"hljs-keyword\\">val</span> byteArray = context?.contentResolver?.openInputStream(uri)?.readBytes()\\n<span class=\\"hljs-keyword\\">if</span> (byteArray != <span class=\\"hljs-literal\\">null</span>) {\\n    file.writeBytes(byteArray)\\n}</code></pre><p>これで<code>Typeface.createFromFile()</code>が使えます。</p>\\n<h2>RecyclerViewで表示</h2>\\n<p>MastodonとMisskeyは別のデータクラスなのでRecyclerViewのAdapterにわたすときに考えないといけないんですよね。<br>\\n今回はAdapterに渡すためのデータクラスを別に用意しました。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">/**\\n * RecyclerViewに渡すデータクラス\\n * <span class=\\"hljs-doctag\\">@param</span> allTimeLineData 色つけたりするから；；\\n * どっちか一個だけ入れろ↓。\\n * <span class=\\"hljs-doctag\\">@param</span> statusData\\n * <span class=\\"hljs-doctag\\">@param</span> notificationData\\n * */</span>\\n<span class=\\"hljs-keyword\\">data</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">TimeLineItemData</span></span>(\\n    <span class=\\"hljs-keyword\\">val</span> allTimeLineData: AllTimeLineData,\\n    <span class=\\"hljs-keyword\\">val</span> statusData: StatusData? = <span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-comment\\">// null以外ならTL表示</span>\\n    <span class=\\"hljs-keyword\\">val</span> notificationData: NotificationData? = <span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-comment\\">// null以外なら通知表示</span>\\n    <span class=\\"hljs-keyword\\">val</span> misskeyNoteData: MisskeyNoteData? = <span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-comment\\">// null以外ならNote表示</span>\\n    <span class=\\"hljs-keyword\\">val</span> misskeyNotificationData: MisskeyNotificationData? = <span class=\\"hljs-literal\\">null</span> <span class=\\"hljs-comment\\">// null以外なら通知表示</span>\\n) : Serializable</code></pre><p>Mastodonの投稿か通知かMisskeyの投稿か通知のどれかが入ることになってます。<code>AllTimeLineDataはCardViewの色情報が入ってます。</code></p>\\n<p>それからRecyclerViewでレイアウトを複数用意する方法ですが<code>getItemViewType()</code>を使います。</p>\\n<p>ちょっと長いけど</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// レイアウトの定数（onCreateViewHolder()で使う）</span>\\n<span class=\\"hljs-keyword\\">companion</span> <span class=\\"hljs-keyword\\">object</span> {\\n    <span class=\\"hljs-comment\\">/** Mastodon トゥート */</span>\\n    <span class=\\"hljs-keyword\\">val</span> TOOT_LAYOUT = <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-comment\\">/** Mastodon 通知 */</span>\\n    <span class=\\"hljs-keyword\\">val</span> NOTIFICATION_LAYOUT = <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-comment\\">/** Mastodon ブースト */</span>\\n    <span class=\\"hljs-keyword\\">val</span> TOOT_BOOST_LAYOUT = <span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-comment\\">/** Misskey 投稿 */</span>\\n    <span class=\\"hljs-keyword\\">val</span> MISSKEY_NOTE_LAYOUT = <span class=\\"hljs-number\\">3</span>\\n    <span class=\\"hljs-comment\\">/** Misskey 通知 */</span>\\n    <span class=\\"hljs-keyword\\">val</span> MISSKEY_NOTIFICATION_LAYOUT = <span class=\\"hljs-number\\">4</span>\\n    <span class=\\"hljs-comment\\">/** Misskey Renote */</span>\\n    <span class=\\"hljs-keyword\\">val</span> MISSKEY_RENOTE_LAYOUT = <span class=\\"hljs-number\\">5</span>\\n}\\n<span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreateViewHolder</span><span class=\\"hljs-params\\">(parent: <span class=\\"hljs-type\\">ViewGroup</span>, viewType: <span class=\\"hljs-type\\">Int</span>)</span></span>: RecyclerView.ViewHolder {\\n    <span class=\\"hljs-comment\\">// レイアウト分岐</span>\\n    <span class=\\"hljs-keyword\\">val</span> view = <span class=\\"hljs-keyword\\">when</span> (viewType) {\\n        TOOT_BOOST_LAYOUT -&gt; BoostViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_boost, parent, <span class=\\"hljs-literal\\">false</span>))\\n        TOOT_LAYOUT -&gt; TootViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_timeline, parent, <span class=\\"hljs-literal\\">false</span>))\\n        NOTIFICATION_LAYOUT -&gt; NotificationViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_notification, parent, <span class=\\"hljs-literal\\">false</span>))\\n        MISSKEY_NOTE_LAYOUT -&gt; MisskeyNoteViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_note, parent, <span class=\\"hljs-literal\\">false</span>))\\n        MISSKEY_NOTIFICATION_LAYOUT -&gt; MisskeyNotificationViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_notification, parent, <span class=\\"hljs-literal\\">false</span>))\\n        MISSKEY_RENOTE_LAYOUT -&gt; MisskeyRenoteViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_misskey_renote, parent, <span class=\\"hljs-literal\\">false</span>))\\n        <span class=\\"hljs-keyword\\">else</span> -&gt; TootViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.adapter_timeline, parent, <span class=\\"hljs-literal\\">false</span>))\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> view\\n}\\n<span class=\\"hljs-comment\\">// 通知と投稿で分岐させる</span>\\n<span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getItemViewType</span><span class=\\"hljs-params\\">(position: <span class=\\"hljs-type\\">Int</span>)</span></span>: <span class=\\"hljs-built_in\\">Int</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">when</span> {\\n        <span class=\\"hljs-comment\\">// Mastodon</span>\\n        timeLineItemDataList[position].statusData != <span class=\\"hljs-literal\\">null</span> &amp;&amp; timeLineItemDataList[position].statusData!!.reblogStatusData != <span class=\\"hljs-literal\\">null</span> -&gt; TOOT_BOOST_LAYOUT\\n        timeLineItemDataList[position].statusData != <span class=\\"hljs-literal\\">null</span> -&gt; TOOT_LAYOUT\\n        timeLineItemDataList[position].notificationData != <span class=\\"hljs-literal\\">null</span> -&gt; NOTIFICATION_LAYOUT\\n        <span class=\\"hljs-comment\\">// Misskey</span>\\n        timeLineItemDataList[position].misskeyNoteData != <span class=\\"hljs-literal\\">null</span> &amp;&amp; timeLineItemDataList[position].misskeyNoteData!!.renote != <span class=\\"hljs-literal\\">null</span> -&gt; MISSKEY_RENOTE_LAYOUT\\n        timeLineItemDataList[position].misskeyNoteData != <span class=\\"hljs-literal\\">null</span> -&gt; MISSKEY_NOTE_LAYOUT\\n        timeLineItemDataList[position].misskeyNotificationData != <span class=\\"hljs-literal\\">null</span> -&gt; MISSKEY_NOTIFICATION_LAYOUT\\n        <span class=\\"hljs-keyword\\">else</span> -&gt; TOOT_LAYOUT\\n    }\\n}</code></pre><h2>データクラスで画面回転耐久</h2>\\n<p>~~これは別の記事で書きたい。~~書きました→ https://takusan23.github.io/Bibouroku/2020/05/17/画面回転しても尊厳損傷しないようにonSaveInstanceState使う/</p>\\n<h1>終わりに</h1>\\n<p>コルーチンいっぱいつかった。<br>\\n<code>withContext(Dispatchers.IO)</code>って便利だね。括弧が減りそう。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// コルーチン</span>\\nGlobalScope.launch(Dispatchers.Main) {\\n    <span class=\\"hljs-comment\\">// UIスレッドのコルーチン -&gt; UIスレッドではないスレッドへ切り替え</span>\\n    <span class=\\"hljs-keyword\\">val</span> response = withContext(Dispatchers.IO) {\\n        <span class=\\"hljs-comment\\">// インターネットから持ってくるなど</span>\\n    }\\n    <span class=\\"hljs-comment\\">// 帰ってきたらUIスレッドに戻る</span>\\n}</code></pre>","dir":"contents/posts/json","base":"MastodonとMisskey同時に見れるクライアント作った？.json","ext":".json","sourceBase":"MastodonとMisskey同時に見れるクライアント作った？.md","sourceExt":".md"}')},332:function(n){n.exports=JSON.parse('{"title":"OkHttpでダウンロード進捗が知りたい！","created_at":"2020-05-09T00:35:36.000Z","tags":["Android","OkHttp","Kotlin"],"bodyContent":"どうもこんばんわ。  \\nAndroid 11 Betaが6/3に来るそうですよ。  \\nそれとは関係ないんだけどインターネットが遅い。今はそこそこ出てるけど。\\n# 本題\\nAndroidアプリでファイルダウンロードする時に使える**DownloadManager**ってのがあるんですけど、使えない理由が発生したのでOkHttp代替しようって話です。\\n\\n## DownloadManagerとは\\nファイルダウンロード時に使える。特に難しいこと(`inputStream`とか)しなくても保存してくれる。  \\n一行コード書けば通知領域に進捗をだせる。\\n\\n## なんで使えないの\\nAndroid 10から7日過ぎたファイルを勝手に消すようになった。というか7日前に消えてる気がする。  \\nちなみにファイル名を変えれば削除を回避できるけどなんかなあ。\\n\\n# 環境\\n| なまえ  | あたい  |\\n|---------|---------|\\n| Android | 11 DP 4 |\\n| 言語    | Kotlin  |\\n\\n# 代替案：OkHttp\\n(API叩く時に使う)OkHttpで保存できればいいのでは！\\n\\n## ただダウンロードするだけなら\\n- urlの中にDLしたいファイルのURL貼り付けてね。  \\n- 保存場所は`Android/data/{PackageName}/files/test.mp4`です。\\n```kotlin\\nfun get() {\\n    val request = Request.Builder().apply {\\n        url(\\"\\")\\n        get()\\n    }.build()\\n    val okHttpClient = OkHttpClient()\\n    okHttpClient.newCall(request).enqueue(object : Callback {\\n        override fun onFailure(call: Call, e: IOException) {\\n        }\\n        override fun onResponse(call: Call, response: Response) {\\n            val file = File(\\"${getExternalFilesDir(null)}/test.mp4\\")\\n            val byteArray = response.body?.bytes()\\n            if (byteArray != null) {\\n                file.writeBytes(byteArray)\\n            }\\n        }\\n    })\\n}\\n```\\n\\n## ダウンロードの進捗の計算\\n計算とか言ったけど大した計算はしない（パーセントを求める式を使う）、  \\n`File#writeBytes()`で保存部分省略してるので進捗もなにもない。\\n\\n# OkHttpにダウンロード進捗（パーセント）付ける！！\\n\\n## gradle.build\\ndependenciesに一行足す\\n```gradle\\ndependencies {\\n    implementation(\\"com.squareup.okhttp3:okhttp:4.6.0\\")\\n}\\n```\\n\\n## activity_main.xml(レイアウト)\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:gravity=\\"center\\"\\n    android:orientation=\\"vertical\\"\\n    tools:context=\\".MainActivity\\">\\n\\n\\n    <ProgressBar\\n        android:id=\\"@+id/progressBar\\"\\n        style=\\"?android:attr/progressBarStyleHorizontal\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_margin=\\"10dp\\" />\\n\\n\\n    <TextView\\n        android:id=\\"@+id/progressTextView\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_margin=\\"10dp\\"\\n        android:text=\\"0%\\" />\\n\\n    <Button\\n        android:id=\\"@+id/button\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:text=\\"データ取得\\" />\\n\\n</LinearLayout>\\n```\\n\\n## AndroidManifest.xml\\nインターネット接続パーミッション付けといて。\\n\\n## MainActivity.kt\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        button.setOnClickListener {\\n            getData()\\n        }\\n\\n    }\\n\\n    fun getData() {\\n        val request = Request.Builder().apply {\\n            url(\\"\\")\\n            get()\\n        }.build()\\n        val okHttpClient = OkHttpClient()\\n        okHttpClient.newCall(request).enqueue(object : Callback {\\n            override fun onFailure(call: Call, e: IOException) {\\n\\n            }\\n\\n            override fun onResponse(call: Call, response: Response) {\\n                val file = File(\\"${getExternalFilesDir(null)}/test.mp4\\")\\n                val inputStream = response.body?.byteStream()\\n                val outputStream = file.outputStream()\\n                val buff = ByteArray(1024 * 4)\\n                val target = response.body?.contentLength() // 合計サイズ\\n                var progress = 0L\\n                // プログレスバーの最大値設定\\n                runOnUiThread {\\n                    progressBar.max = target?.toInt()!!\\n                }\\n                while (true) {\\n                    val read = inputStream?.read(buff)\\n                    if (read == -1 || read == null || target == null) {\\n                        break\\n                    }\\n                    progress += read\\n                    outputStream.write(buff, 0, read)\\n                    // UI更新\\n                    runOnUiThread {\\n                        // プログレスバー進める\\n                        progressBar.progress = progress.toInt()\\n                        // パーセントの式。\\n                        progressTextView.text =\\n                            \\"${((progress.toFloat() / target.toFloat()) * 100).toInt()} %\\"\\n                    }\\n                }\\n                inputStream?.close()\\n                outputStream.close()\\n            }\\n        })\\n    }\\n}\\n```\\n\\nパーセントはこの部分で計算してます。~~(プログラミング要素っていうか数学かな？)~~\\n```kotlin\\n// パーセントの式。\\nprogressTextView.text =\\n    \\"${((progress.toFloat() / target.toFloat()) * 100).toInt()} %\\"\\n```\\n\\nこれでOkHttpで進捗付きでダウンロードができるようになりました。わーい\\n\\t\\n{% asset_img download.png download %}\\n\\n# おわりに\\n**DownloadManagerをAndroid 10以降でも使いたい人はダウンロード後にファイル名変更しないと消されます。**  \\nあと成功してるかどうか`response.isSuccessful`で成功時のみ保存するようにしたほうがいいと思った。(だったら書き直せ)  \\nあとJava読めるマンはこれ読んだほうがいいと思う→ https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java\\n# ソースコード\\nhttps://github.com/takusan23/OkHttpProgress\\n# 参考にしました\\nhttps://stackoverflow.com/questions/26114299/squares-okhttp-download-progress  \\nhttps://medium.com/@mkaflowski/disappearing-files-downloaded-by-downloadmanager-7c9ee5c6a66a","bodyHtml":"<p>どうもこんばんわ。<br>\\nAndroid 11 Betaが6/3に来るそうですよ。<br>\\nそれとは関係ないんだけどインターネットが遅い。今はそこそこ出てるけど。</p>\\n<h1>本題</h1>\\n<p>Androidアプリでファイルダウンロードする時に使える<strong>DownloadManager</strong>ってのがあるんですけど、使えない理由が発生したのでOkHttp代替しようって話です。</p>\\n<h2>DownloadManagerとは</h2>\\n<p>ファイルダウンロード時に使える。特に難しいこと(<code>inputStream</code>とか)しなくても保存してくれる。<br>\\n一行コード書けば通知領域に進捗をだせる。</p>\\n<h2>なんで使えないの</h2>\\n<p>Android 10から7日過ぎたファイルを勝手に消すようになった。というか7日前に消えてる気がする。<br>\\nちなみにファイル名を変えれば削除を回避できるけどなんかなあ。</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Android</td>\\n<td>11 DP 4</td>\\n</tr>\\n<tr>\\n<td>言語</td>\\n<td>Kotlin</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>代替案：OkHttp</h1>\\n<p>(API叩く時に使う)OkHttpで保存できればいいのでは！</p>\\n<h2>ただダウンロードするだけなら</h2>\\n<ul>\\n<li>urlの中にDLしたいファイルのURL貼り付けてね。</li>\\n<li>保存場所は<code>Android/data/{PackageName}/files/test.mp4</code>です。</li>\\n</ul>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">get</span><span class=\\"hljs-params\\">()</span></span> {\\n    <span class=\\"hljs-keyword\\">val</span> request = Request.Builder().apply {\\n        url(<span class=\\"hljs-string\\">\\"\\"</span>)\\n        <span class=\\"hljs-keyword\\">get</span>()\\n    }.build()\\n    <span class=\\"hljs-keyword\\">val</span> okHttpClient = OkHttpClient()\\n    okHttpClient.newCall(request).enqueue(<span class=\\"hljs-keyword\\">object</span> : Callback {\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onFailure</span><span class=\\"hljs-params\\">(call: <span class=\\"hljs-type\\">Call</span>, e: <span class=\\"hljs-type\\">IOException</span>)</span></span> {\\n        }\\n        <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onResponse</span><span class=\\"hljs-params\\">(call: <span class=\\"hljs-type\\">Call</span>, response: <span class=\\"hljs-type\\">Response</span>)</span></span> {\\n            <span class=\\"hljs-keyword\\">val</span> file = File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${getExternalFilesDir(null)}</span>/test.mp4\\"</span>)\\n            <span class=\\"hljs-keyword\\">val</span> byteArray = response.body?.bytes()\\n            <span class=\\"hljs-keyword\\">if</span> (byteArray != <span class=\\"hljs-literal\\">null</span>) {\\n                file.writeBytes(byteArray)\\n            }\\n        }\\n    })\\n}</code></pre><h2>ダウンロードの進捗の計算</h2>\\n<p>計算とか言ったけど大した計算はしない（パーセントを求める式を使う）、<br>\\n<code>File#writeBytes()</code>で保存部分省略してるので進捗もなにもない。</p>\\n<h1>OkHttpにダウンロード進捗（パーセント）付ける！！</h1>\\n<h2>gradle.build</h2>\\n<p>dependenciesに一行足す</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">dependencies</span> {\\n    implementation(<span class=\\"hljs-string\\">\\"com.squareup.okhttp3:okhttp:4.6.0\\"</span>)\\n}</code></pre><h2>activity_main.xml(レイアウト)</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:gravity</span>=<span class=\\"hljs-string\\">\\"center\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ProgressBar</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/progressBar\\"</span>\\n        <span class=\\"hljs-attr\\">style</span>=<span class=\\"hljs-string\\">\\"?android:attr/progressBarStyleHorizontal\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_margin</span>=<span class=\\"hljs-string\\">\\"10dp\\"</span> /&gt;</span>\\n\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">TextView</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/progressTextView\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_margin</span>=<span class=\\"hljs-string\\">\\"10dp\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"0%\\"</span> /&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/button\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"データ取得\\"</span> /&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><h2>AndroidManifest.xml</h2>\\n<p>インターネット接続パーミッション付けといて。</p>\\n<h2>MainActivity.kt</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        button.setOnClickListener {\\n            getData()\\n        }\\n\\n    }\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getData</span><span class=\\"hljs-params\\">()</span></span> {\\n        <span class=\\"hljs-keyword\\">val</span> request = Request.Builder().apply {\\n            url(<span class=\\"hljs-string\\">\\"\\"</span>)\\n            <span class=\\"hljs-keyword\\">get</span>()\\n        }.build()\\n        <span class=\\"hljs-keyword\\">val</span> okHttpClient = OkHttpClient()\\n        okHttpClient.newCall(request).enqueue(<span class=\\"hljs-keyword\\">object</span> : Callback {\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onFailure</span><span class=\\"hljs-params\\">(call: <span class=\\"hljs-type\\">Call</span>, e: <span class=\\"hljs-type\\">IOException</span>)</span></span> {\\n\\n            }\\n\\n            <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onResponse</span><span class=\\"hljs-params\\">(call: <span class=\\"hljs-type\\">Call</span>, response: <span class=\\"hljs-type\\">Response</span>)</span></span> {\\n                <span class=\\"hljs-keyword\\">val</span> file = File(<span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${getExternalFilesDir(null)}</span>/test.mp4\\"</span>)\\n                <span class=\\"hljs-keyword\\">val</span> inputStream = response.body?.byteStream()\\n                <span class=\\"hljs-keyword\\">val</span> outputStream = file.outputStream()\\n                <span class=\\"hljs-keyword\\">val</span> buff = ByteArray(<span class=\\"hljs-number\\">1024</span> * <span class=\\"hljs-number\\">4</span>)\\n                <span class=\\"hljs-keyword\\">val</span> target = response.body?.contentLength() <span class=\\"hljs-comment\\">// 合計サイズ</span>\\n                <span class=\\"hljs-keyword\\">var</span> progress = <span class=\\"hljs-number\\">0L</span>\\n                <span class=\\"hljs-comment\\">// プログレスバーの最大値設定</span>\\n                runOnUiThread {\\n                    progressBar.max = target?.toInt()!!\\n                }\\n                <span class=\\"hljs-keyword\\">while</span> (<span class=\\"hljs-literal\\">true</span>) {\\n                    <span class=\\"hljs-keyword\\">val</span> read = inputStream?.read(buff)\\n                    <span class=\\"hljs-keyword\\">if</span> (read == -<span class=\\"hljs-number\\">1</span> || read == <span class=\\"hljs-literal\\">null</span> || target == <span class=\\"hljs-literal\\">null</span>) {\\n                        <span class=\\"hljs-keyword\\">break</span>\\n                    }\\n                    progress += read\\n                    outputStream.write(buff, <span class=\\"hljs-number\\">0</span>, read)\\n                    <span class=\\"hljs-comment\\">// UI更新</span>\\n                    runOnUiThread {\\n                        <span class=\\"hljs-comment\\">// プログレスバー進める</span>\\n                        progressBar.progress = progress.toInt()\\n                        <span class=\\"hljs-comment\\">// パーセントの式。</span>\\n                        progressTextView.text =\\n                            <span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${((progress.toFloat() / target.toFloat()) * <span class=\\"hljs-number\\">100</span>).toInt()}</span> %\\"</span>\\n                    }\\n                }\\n                inputStream?.close()\\n                outputStream.close()\\n            }\\n        })\\n    }\\n}</code></pre><p>パーセントはこの部分で計算してます。<s>(プログラミング要素っていうか数学かな？)</s></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\">// パーセントの式。</span>\\nprogressTextView.text =\\n    <span class=\\"hljs-string\\">\\"<span class=\\"hljs-subst\\">${((progress.toFloat() / target.toFloat()) * <span class=\\"hljs-number\\">100</span>).toInt()}</span> %\\"</span></code></pre><p>これでOkHttpで進捗付きでダウンロードができるようになりました。わーい</p>\\n<p>{% asset_img download.png download %}</p>\\n<h1>おわりに</h1>\\n<p><strong>DownloadManagerをAndroid 10以降でも使いたい人はダウンロード後にファイル名変更しないと消されます。</strong><br>\\nあと成功してるかどうか<code>response.isSuccessful</code>で成功時のみ保存するようにしたほうがいいと思った。(だったら書き直せ)<br>\\nあとJava読めるマンはこれ読んだほうがいいと思う→ https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java</p>\\n<h1>ソースコード</h1>\\n<p>https://github.com/takusan23/OkHttpProgress</p>\\n<h1>参考にしました</h1>\\n<p>https://stackoverflow.com/questions/26114299/squares-okhttp-download-progress<br>\\nhttps://medium.com/@mkaflowski/disappearing-files-downloaded-by-downloadmanager-7c9ee5c6a66a</p>\\n","dir":"contents/posts/json","base":"OkHttpでダウンロード進捗が知りたい！.json","ext":".json","sourceBase":"OkHttpでダウンロード進捗が知りたい！.md","sourceExt":".md"}')},333:function(n){n.exports=JSON.parse('{"title":"Nuxt.jsとprocessmdでブログ作りたい。","created_at":"2020-05-30 21:10:00","tags":["Nuxt.js","Markdown"],"bodyContent":"**Nuxt.js+processmd**でブログ作るよ\\r\\n\\r\\n# 環境\\r\\n| なまえ | あたい         |\\r\\n|--------|----------------|\\r\\n| OS     | Windows 10 Pro |\\r\\n| Node   | 12.14.1        |\\r\\n\\r\\n# Nuxt.jsプロジェクト作成\\r\\n\\r\\n```console\\r\\nnpx create-nuxt-app nuxtblog\\r\\n```\\r\\n\\r\\nあとは好きな方を選んでいきます\\r\\n- programming language\\r\\n    - TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）\\r\\n- UI framework\\r\\n    - Vuetifyがマテリアルデザイン（今回はElement使ってみる）\\r\\n- あとは適当に（PWA入れといた）\\r\\n\\r\\n```console\\r\\n✨  Generating Nuxt.js project in nuxtblog\\r\\n? Project name nuxtblog\\r\\n? Project description My cool Nuxt.js project\\r\\n? Author name takusan23\\r\\n? Choose programming language TypeScript     \\r\\n? Choose the package manager Npm      \\r\\n? Choose UI framework Element\\r\\n? Choose custom server framework None (Recommended) \\r\\n? Choose the runtime for TypeScript Default\\r\\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\\r\\n? Choose linting tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\\r\\n? Choose test framework None\\r\\n? Choose rendering mode Single Page App\\r\\n? Choose development tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\\r\\n```\\r\\n\\r\\nそしたら移動して、サーバー起動させます\\r\\n\\r\\n```console\\r\\ncd nuxt blog\\r\\nnpm run dev\\r\\n```\\r\\n\\r\\n![Imgur](https://i.imgur.com/fsdnyw3.png)\\r\\n\\r\\n# Markdownファイルの保存場所を作る\\r\\n\\r\\nnuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に  \\r\\n**contentsフォルダ**を作り、その中に  \\r\\n**postsフォルダ**を作り、その中に  \\r\\n**markdownフォルダ**を作成します。\\r\\n\\r\\nこんな感じに\\r\\n\\r\\n![Imgur](https://i.imgur.com/9MkedEP.png)\\r\\n\\r\\n後は**Markdownフォルダ**にMarkdownファイルを置いていきます。  \\r\\n\\r\\n今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。\\r\\n\\r\\n```markdown\\r\\n---\\r\\ntitle: Nuxt.jsの練習\\r\\ncreated_at: 2020-05-31\\r\\ntags:\\r\\n- JavaScript\\r\\n---\\r\\n# Hello World\\r\\n\\r\\n```\\r\\n\\r\\n# Markdownファイルの情報をJSONに変換するprocessmd\\r\\n\\r\\n## processmd入れます\\r\\n\\r\\n\\r\\n```console\\r\\nnpm install --save-dev processmd\\r\\n```\\r\\n\\r\\n## コマンド長いのでpackage.jsonに書き足します\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\": \\"nuxtblog\\",\\r\\n  \\"version\\": \\"1.0.0\\",\\r\\n  \\"description\\": \\"My cool Nuxt.js project\\",\\r\\n  \\"author\\": \\"takusan23\\",\\r\\n  \\"private\\": true,\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"nuxt\\",\\r\\n    \\"build\\": \\"nuxt build\\",\\r\\n    \\"start\\": \\"nuxt start\\",\\r\\n    \\"generate\\": \\"nuxt generate\\",\\r\\n    \\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"nuxt\\": \\"^2.0.0\\",\\r\\n    \\"element-ui\\": \\"^2.4.11\\",\\r\\n    \\"@nuxtjs/pwa\\": \\"^3.0.0-0\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@nuxt/typescript-build\\": \\"^0.6.0\\",\\r\\n    \\"processmd\\": \\"^4.5.0\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nscriptsの中にmdの一行書き足せばおｋ\\r\\n```json\\r\\n\\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\\"\\r\\n```\\r\\n\\r\\nあとはターミナルで以下叩きます。  \\r\\nこの作業は記事を追加したら毎回叩く必要があります。\\r\\n```console\\r\\nnpm run md\\r\\n```\\r\\n\\r\\n叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも\\r\\n\\r\\n# Nuxt.jsで記事一覧用意する\\r\\n\\r\\nこっからはコピペです。いくぞおおおおお  \\r\\n**pages/index.vue**を開いて以下のJSをどーん\\r\\n```vue\\r\\n<template>\\r\\n  <div class=\\"container\\">\\r\\n    <div>\\r\\n      <el-card class=\\"box-card\\" v-for=\\"item in blogItems\\" :key=\\"item\\">\\r\\n        <nuxt-link class=\\"text item\\" :to=\\"`posts/${item.fileName}`\\">{{ item.title }}</nuxt-link>\\r\\n      </el-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script lang=\\"js\\">\\r\\nimport Vue from \'vue\'\\r\\nimport { fileMap } from \\"../contents/posts/summary.json\\";\\r\\n\\r\\nexport default {\\r\\n  data: () => {\\r\\n    return {\\r\\n      blogItems: []\\r\\n    };\\r\\n  },\\r\\n  created() {\\r\\n    // キーを取り出す\\r\\n    Object.keys(fileMap).forEach(title => {\\r\\n      // 記事一個ずつ取る\\r\\n      const blog = fileMap[title];\\r\\n      // 名前\\r\\n      const name = blog.sourceBase.replace(\\".md\\", \\"\\");\\r\\n      blog.fileName = name;\\r\\n      this.blogItems.push(blog);\\r\\n    });\\r\\n  }\\r\\n};\\r\\n<\/script>\\r\\n```\\r\\n\\r\\nここではタイトルしか出てませんが、日付とかタグとかも出せると思います。\\r\\n\\r\\n![Imgur](https://i.imgur.com/LJF3l5H.png)\\r\\n\\r\\n> localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）\\r\\n\\r\\n# 記事一覧ページを作る\\r\\n\\r\\n## 動的ルーティング # とは\\r\\nよくわからんけど静的サイトジェネレートに必要。  \\r\\nというわけで**nuxt.config.js**開いてね\\r\\n\\r\\n参考：https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\\r\\n参考：https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/\\r\\n\\r\\n開いたらJS書き足していきます。\\r\\n\\r\\n```js\\r\\nconst { sourceFileArray } = require(\'./contents/posts/summary.json\');\\r\\n\\r\\n/** パス生成 */\\r\\nconst sourceFileNameToUrl = filepath => {\\r\\n  const name = filepath.replace(\'contents/posts/markdown/\', \'\').replace(\'.md\', \'\')\\r\\n  return `/posts/${name}`\\r\\n}\\r\\n\\r\\nconst generateDynamicRoutes = callback => {\\r\\n  const routes = sourceFileArray.map(sourceFileName => {\\r\\n    return sourceFileNameToUrl(sourceFileName);\\r\\n  });\\r\\n  callback(null, routes);\\r\\n};\\r\\n\\r\\nexport default {\\r\\n// 省略\\r\\n  generate: {\\r\\n    routes: generateDynamicRoutes\\r\\n  },\\r\\n}\\r\\n```\\r\\n\\r\\nsourceFileNameToUrl()関数は`posts/${ファイル名}`の文字列を返す関数です。\\r\\n\\r\\nこうすることでURLが`posts/{タイトル}`になるはずです。  \\r\\nですがこれだけではまだ生成できません。\\r\\n\\r\\n生成するには、  \\r\\n**pagesフォルダ**に**posts**フォルダを作成して、  \\r\\nその中に **_slug.vue** ファイルを作成します。\\r\\n\\r\\n![Imgur](https://imgur.com/DSJ9WSc.png)\\r\\n\\r\\n## _slug.vueの中身\\r\\n**_slug.vue**は記事の表示に使います。  \\r\\n\\r\\n```vue\\r\\n<template>\\r\\n  <div class=\\"container\\">\\r\\n    <div>\\r\\n      <el-card class=\\"box-card\\">\\r\\n        <div>{{(new Date(created_at).toLocaleDateString())}} 投稿</div>\\r\\n        <div v-html=\\"bodyHtml\\"></div>\\r\\n      </el-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nimport { sourceFileArray } from \\"../../contents/posts/summary.json\\";\\r\\n\\r\\nexport default {\\r\\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\\r\\n  validate({ params }) {\\r\\n    return sourceFileArray.includes(\\r\\n      `contents/posts/markdown/${params.slug}.md`\\r\\n    );\\r\\n  },\\r\\n  // 各記事のJSONファイルを読み込んでる。\\r\\n  asyncData({ params }) {\\r\\n    return Object.assign(\\r\\n      {},\\r\\n      require(`~/contents/posts/json/${params.slug}.json`),\\r\\n      { params }\\r\\n    );\\r\\n  },\\r\\n  mounted() {\\r\\n    // DOM生成後\\r\\n  },\\r\\n  // さあ？\\r\\n  head() {\\r\\n    const title = `${this.title}`;\\r\\n    const url = `posts/${this.params.slug}/`;\\r\\n    return {\\r\\n      title: title,\\r\\n      meta: [\\r\\n        { hid: \\"og:url\\", property: \\"og:url\\", content: url },\\r\\n        { hid: \\"og:title\\", property: \\"og:title\\", content: title }\\r\\n      ],\\r\\n      link: [{ rel: \\"canonical\\", href: url }]\\r\\n    };\\r\\n  }\\r\\n};\\r\\n<\/script>\\r\\n```\\r\\n\\r\\n記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。\\r\\n\\r\\n![Imgur](https://i.imgur.com/qbUf0P4.png)\\r\\n\\r\\n# おまけ 静的サイトジェネレートしてみる\\r\\n\\r\\n以下の一行をターミナルに入れます\\r\\n\\r\\n```console\\r\\nnpm run generate\\r\\n```\\r\\n\\r\\nこれで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。  \\r\\n今回は**Web Server for Chrome**が入ってたのでそれ使って見てみます。  \\r\\n\\r\\n`npm run generate`の出力先は**dist**になってるのでそれを指定してWeb鯖立てます。\\r\\n\\r\\n![Imgur](https://i.imgur.com/O6uBFod.png)\\r\\n\\r\\n以上です。  \\r\\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。\\r\\n\\r\\n![Imgur](https://i.imgur.com/74quEU3.png)\\r\\n\\r\\nPWAも入れてあるので試せる。\\r\\n\\r\\n# おまけ\\r\\nGitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。\\r\\n\\r\\n```js\\r\\nexport default {\\r\\n// 省略\\r\\n  router: {\\r\\n    base: \'/リポジトリ名/\'\\r\\n  },\\r\\n  generate: {\\r\\n    routes: generateDynamicRoutes,\\r\\n    dir: \'docs\',\\r\\n  },\\r\\n}\\r\\n```\\r\\n\\r\\n# おわりに\\r\\n**nuxt.config.js**の`mode: \'spa\'`ってSPAであってるの？\\r\\n静的サイトジェネレートの時は書いてなかったんだけど？\\r\\n\\r\\nソースコード：https://github.com/takusan23/NuxtBlog","bodyHtml":"<p><strong>Nuxt.js+processmd</strong>でブログ作るよ</p>\\n<h1>環境</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>なまえ</th>\\n<th>あたい</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>OS</td>\\n<td>Windows 10 Pro</td>\\n</tr>\\n<tr>\\n<td>Node</td>\\n<td>12.14.1</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>Nuxt.jsプロジェクト作成</h1>\\n<pre><code class=\\"hljs\\">npx create-nuxt-app nuxtblog</code></pre><p>あとは好きな方を選んでいきます</p>\\n<ul>\\n<li>programming language\\n<ul>\\n<li>TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）</li>\\n</ul>\\n</li>\\n<li>UI framework\\n<ul>\\n<li>Vuetifyがマテリアルデザイン（今回はElement使ってみる）</li>\\n</ul>\\n</li>\\n<li>あとは適当に（PWA入れといた）</li>\\n</ul>\\n<pre><code class=\\"hljs\\">✨  Generating Nuxt.js project in nuxtblog\\n? Project name nuxtblog\\n? Project description My cool Nuxt.js project\\n? Author name takusan23\\n? Choose programming language TypeScript     \\n? Choose the package manager Npm      \\n? Choose UI framework Element\\n? Choose custom server framework None (Recommended) \\n? Choose the runtime for TypeScript Default\\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\\n? Choose linting tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\\n? Choose test framework None\\n? Choose rendering mode Single Page App\\n? Choose development tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</code></pre><p>そしたら移動して、サーバー起動させます</p>\\n<pre><code class=\\"hljs\\">cd nuxt blog\\nnpm run dev</code></pre><p><img src=\\"https://i.imgur.com/fsdnyw3.png\\" alt=\\"Imgur\\"></p>\\n<h1>Markdownファイルの保存場所を作る</h1>\\n<p>nuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に<br>\\n<strong>contentsフォルダ</strong>を作り、その中に<br>\\n<strong>postsフォルダ</strong>を作り、その中に<br>\\n<strong>markdownフォルダ</strong>を作成します。</p>\\n<p>こんな感じに</p>\\n<p><img src=\\"https://i.imgur.com/9MkedEP.png\\" alt=\\"Imgur\\"></p>\\n<p>後は<strong>Markdownフォルダ</strong>にMarkdownファイルを置いていきます。</p>\\n<p>今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。</p>\\n<pre><code class=\\"hljs\\">---\\ntitle: Nuxt.jsの練習\\ncreated_at: 2020-05-31\\ntags:\\n<span class=\\"hljs-section\\">- JavaScript\\n---</span>\\n<span class=\\"hljs-section\\"># Hello World</span></code></pre><h1>Markdownファイルの情報をJSONに変換するprocessmd</h1>\\n<h2>processmd入れます</h2>\\n<pre><code class=\\"hljs\\">npm install --save-dev processmd</code></pre><h2>コマンド長いのでpackage.jsonに書き足します</h2>\\n<pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">\\"name\\"</span>: <span class=\\"hljs-string\\">\\"nuxtblog\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"version\\"</span>: <span class=\\"hljs-string\\">\\"1.0.0\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"description\\"</span>: <span class=\\"hljs-string\\">\\"My cool Nuxt.js project\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"author\\"</span>: <span class=\\"hljs-string\\">\\"takusan23\\"</span>,\\n  <span class=\\"hljs-attr\\">\\"private\\"</span>: <span class=\\"hljs-literal\\">true</span>,\\n  <span class=\\"hljs-attr\\">\\"scripts\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"dev\\"</span>: <span class=\\"hljs-string\\">\\"nuxt\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"build\\"</span>: <span class=\\"hljs-string\\">\\"nuxt build\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"start\\"</span>: <span class=\\"hljs-string\\">\\"nuxt start\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"generate\\"</span>: <span class=\\"hljs-string\\">\\"nuxt generate\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"md\\"</span>: <span class=\\"hljs-string\\">\\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\\"</span>\\n  },\\n  <span class=\\"hljs-attr\\">\\"dependencies\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"nuxt\\"</span>: <span class=\\"hljs-string\\">\\"^2.0.0\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"element-ui\\"</span>: <span class=\\"hljs-string\\">\\"^2.4.11\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"@nuxtjs/pwa\\"</span>: <span class=\\"hljs-string\\">\\"^3.0.0-0\\"</span>\\n  },\\n  <span class=\\"hljs-attr\\">\\"devDependencies\\"</span>: {\\n    <span class=\\"hljs-attr\\">\\"@nuxt/typescript-build\\"</span>: <span class=\\"hljs-string\\">\\"^0.6.0\\"</span>,\\n    <span class=\\"hljs-attr\\">\\"processmd\\"</span>: <span class=\\"hljs-string\\">\\"^4.5.0\\"</span>\\n  }\\n}</code></pre><p>scriptsの中にmdの一行書き足せばおｋ</p>\\n<pre><code class=\\"hljs\\">\\"md\\": \\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\\"</code></pre><p>あとはターミナルで以下叩きます。<br>\\nこの作業は記事を追加したら毎回叩く必要があります。</p>\\n<pre><code class=\\"hljs\\">npm run md</code></pre><p>叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも</p>\\n<h1>Nuxt.jsで記事一覧用意する</h1>\\n<p>こっからはコピペです。いくぞおおおおお<br>\\n<strong>pages/index.vue</strong>を開いて以下のJSをどーん</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div class=\\"container\\"&gt;\\n    &lt;div&gt;\\n      &lt;el-card class=\\"box-card\\" v-for=\\"item in blogItems\\" :key=\\"item\\"&gt;\\n        &lt;nuxt-link class=\\"text item\\" :to=\\"`posts/${item.fileName}`\\"&gt;{{ item.title }}&lt;/nuxt-link&gt;\\n      &lt;/el-card&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script lang=\\"js\\"&gt;\\nimport Vue from \'vue\'\\nimport { fileMap } from \\"../contents/posts/summary.json\\";\\n\\nexport default {\\n  data: () =&gt; {\\n    return {\\n      blogItems: []\\n    };\\n  },\\n  created() {\\n    // キーを取り出す\\n    Object.keys(fileMap).forEach(title =&gt; {\\n      // 記事一個ずつ取る\\n      const blog = fileMap[title];\\n      // 名前\\n      const name = blog.sourceBase.replace(\\".md\\", \\"\\");\\n      blog.fileName = name;\\n      this.blogItems.push(blog);\\n    });\\n  }\\n};\\n&lt;/script&gt;</code></pre><p>ここではタイトルしか出てませんが、日付とかタグとかも出せると思います。</p>\\n<p><img src=\\"https://i.imgur.com/LJF3l5H.png\\" alt=\\"Imgur\\"></p>\\n<blockquote>\\n<p>localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）</p>\\n</blockquote>\\n<h1>記事一覧ページを作る</h1>\\n<h2>動的ルーティング # とは</h2>\\n<p>よくわからんけど静的サイトジェネレートに必要。<br>\\nというわけで<strong>nuxt.config.js</strong>開いてね</p>\\n<p>参考：https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\\n参考：https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/</p>\\n<p>開いたらJS書き足していきます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">const</span> { sourceFileArray } = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">\'./contents/posts/summary.json\'</span>);\\n\\n<span class=\\"hljs-comment\\">/** パス生成 */</span>\\n<span class=\\"hljs-keyword\\">const</span> sourceFileNameToUrl = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">filepath</span> =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> name = filepath.replace(<span class=\\"hljs-string\\">\'contents/posts/markdown/\'</span>, <span class=\\"hljs-string\\">\'\'</span>).replace(<span class=\\"hljs-string\\">\'.md\'</span>, <span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">`/posts/<span class=\\"hljs-subst\\">${name}</span>`</span>\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> generateDynamicRoutes = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">callback</span> =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> routes = sourceFileArray.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">sourceFileName</span> =&gt;</span> {\\n    <span class=\\"hljs-keyword\\">return</span> sourceFileNameToUrl(sourceFileName);\\n  });\\n  callback(<span class=\\"hljs-literal\\">null</span>, routes);\\n};\\n\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n<span class=\\"hljs-comment\\">// 省略</span>\\n  <span class=\\"hljs-attr\\">generate</span>: {\\n    <span class=\\"hljs-attr\\">routes</span>: generateDynamicRoutes\\n  },\\n}</code></pre><p>sourceFileNameToUrl()関数は<code>posts/${ファイル名}</code>の文字列を返す関数です。</p>\\n<p>こうすることでURLが<code>posts/{タイトル}</code>になるはずです。<br>\\nですがこれだけではまだ生成できません。</p>\\n<p>生成するには、<br>\\n<strong>pagesフォルダ</strong>に<strong>posts</strong>フォルダを作成して、<br>\\nその中に <strong>_slug.vue</strong> ファイルを作成します。</p>\\n<p><img src=\\"https://imgur.com/DSJ9WSc.png\\" alt=\\"Imgur\\"></p>\\n<h2>_slug.vueの中身</h2>\\n<p><strong>_slug.vue</strong>は記事の表示に使います。</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div class=\\"container\\"&gt;\\n    &lt;div&gt;\\n      &lt;el-card class=\\"box-card\\"&gt;\\n        &lt;div&gt;{{(new Date(created_at).toLocaleDateString())}} 投稿&lt;/div&gt;\\n        &lt;div v-html=\\"bodyHtml\\"&gt;&lt;/div&gt;\\n      &lt;/el-card&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nimport { sourceFileArray } from \\"../../contents/posts/summary.json\\";\\n\\nexport default {\\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\\n  validate({ params }) {\\n    return sourceFileArray.includes(\\n      `contents/posts/markdown/${params.slug}.md`\\n    );\\n  },\\n  // 各記事のJSONファイルを読み込んでる。\\n  asyncData({ params }) {\\n    return Object.assign(\\n      {},\\n      require(`~/contents/posts/json/${params.slug}.json`),\\n      { params }\\n    );\\n  },\\n  mounted() {\\n    // DOM生成後\\n  },\\n  // さあ？\\n  head() {\\n    const title = `${this.title}`;\\n    const url = `posts/${this.params.slug}/`;\\n    return {\\n      title: title,\\n      meta: [\\n        { hid: \\"og:url\\", property: \\"og:url\\", content: url },\\n        { hid: \\"og:title\\", property: \\"og:title\\", content: title }\\n      ],\\n      link: [{ rel: \\"canonical\\", href: url }]\\n    };\\n  }\\n};\\n&lt;/script&gt;</code></pre><p>記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。</p>\\n<p><img src=\\"https://i.imgur.com/qbUf0P4.png\\" alt=\\"Imgur\\"></p>\\n<h1>おまけ 静的サイトジェネレートしてみる</h1>\\n<p>以下の一行をターミナルに入れます</p>\\n<pre><code class=\\"hljs\\">npm run generate</code></pre><p>これで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。<br>\\n今回は<strong>Web Server for Chrome</strong>が入ってたのでそれ使って見てみます。</p>\\n<p><code>npm run generate</code>の出力先は<strong>dist</strong>になってるのでそれを指定してWeb鯖立てます。</p>\\n<p><img src=\\"https://i.imgur.com/O6uBFod.png\\" alt=\\"Imgur\\"></p>\\n<p>以上です。<br>\\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。</p>\\n<p><img src=\\"https://i.imgur.com/74quEU3.png\\" alt=\\"Imgur\\"></p>\\n<p>PWAも入れてあるので試せる。</p>\\n<h1>おまけ</h1>\\n<p>GitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n<span class=\\"hljs-comment\\">// 省略</span>\\n  <span class=\\"hljs-attr\\">router</span>: {\\n    <span class=\\"hljs-attr\\">base</span>: <span class=\\"hljs-string\\">\'/リポジトリ名/\'</span>\\n  },\\n  <span class=\\"hljs-attr\\">generate</span>: {\\n    <span class=\\"hljs-attr\\">routes</span>: generateDynamicRoutes,\\n    <span class=\\"hljs-attr\\">dir</span>: <span class=\\"hljs-string\\">\'docs\'</span>,\\n  },\\n}</code></pre><h1>おわりに</h1>\\n<p><strong>nuxt.config.js</strong>の<code>mode: \'spa\'</code>ってSPAであってるの？\\n静的サイトジェネレートの時は書いてなかったんだけど？</p>\\n<p>ソースコード：https://github.com/takusan23/NuxtBlog</p>\\n","dir":"contents/posts/json","base":"first.json","ext":".json","sourceBase":"first.md","sourceExt":".md"}')},334:function(n){n.exports=JSON.parse('{"title":"早起きしたくない","created_at":"2020-06-01 21:10:00","tags":["その他"],"bodyContent":"書くことがない。テストだよ","bodyHtml":"<p>書くことがない。テストだよ</p>\\n","dir":"contents/posts/json","base":"hayaokisitakunai.json","ext":".json","sourceBase":"hayaokisitakunai.md","sourceExt":".md"}')},335:function(n){n.exports=JSON.parse('{"title":"未来の記事","created_at":"2020-06-02 00:00:00","tags":["そのた"],"bodyContent":"なにこれ？","bodyHtml":"<p>なにこれ？</p>\\n","dir":"contents/posts/json","base":"mirai.json","ext":".json","sourceBase":"mirai.md","sourceExt":".md"}')},336:function(n){n.exports=JSON.parse('{"title":"これ作るのに大変だったこと","created_at":"2020-06-02T00:00:00.000Z","tags":["その他"],"bodyContent":"後で書く。まってくれ～","bodyHtml":"<p>後で書く。まってくれ～</p>\\n","dir":"contents/posts/json","base":"taihendattakoto.json","ext":".json","sourceBase":"taihendattakoto.md","sourceExt":".md"}')},337:function(n){n.exports=JSON.parse('{"title":"自作ブログ(Nuxt.js+processmd)の使い方","created_at":"2020-05-31 21:10:00","tags":["とりせつ","Markdown","Nuxt.js"],"bodyContent":"# 自作ブログ(Nuxt.js+processmd)の使い方\\r\\nめも\\r\\n\\r\\n# 起動方法\\r\\n\\r\\n```console\\r\\nnpm run dev\\r\\n```\\r\\n\\r\\n# ファイル構成\\r\\n\\r\\n多分こうなってるはず\\r\\n\\r\\n- assets\\r\\n    - CSSファイル置いてある（フォント指定のために）\\r\\n- Components\\r\\n    - Vue.jsのやつと同じだと思う。\\r\\n    - UIの部品を分けて他で使い回す的な\\r\\n    - AndroidのFragmentに近いかな？\\r\\n- contents\\r\\n    - 重要フォルダ。\\r\\n    - 最重要なので後で詳しく。\\r\\n- dist\\r\\n    - `nuxt generate`で書き出したファイルの置き場所です。\\r\\n    - htmlがある。\\r\\n    - あとはこのフォルダでWebサーバー建てるなりすれば見れるはずです。\\r\\n- layouts\\r\\n    - （Viewの階層的に）一番下に居るやつ。\\r\\n    - AppBarとかNavigationDrawerはここに書いてある。\\r\\n    - Androidで言うとActivity？\\r\\n- middleware\\r\\n    - さあ？\\r\\n- node_modules\\r\\n    - 多分ライブラリが入ってる。基本いじらない。\\r\\n    - ~~Black holeよりも深い~~\\r\\n    - npmコマンドでコケた時はまず消して`npm install`する。\\r\\n- plugins\\r\\n    - わからん（使ってない）\\r\\n- static\\r\\n    - 静的サイトジェネレートのときのfaviconとか？\\r\\n- store\\r\\n    - さあ？\\r\\n- .から始まるファイル\\r\\n    - 基本触らないと思う\\r\\n- nuxt.config.js\\r\\n    - 静的サイトジェネレートの時にどのファイルを作ればいいかとか書く。\\r\\n    - Vuetifyでなんかやるときも書く。\\r\\n    - cssとかも\\r\\n- package-look.json\\r\\n    - ？\\r\\n- package.json\\r\\n    - このプログラムについてなど。\\r\\n    - 作者とかライセンスとかが書いてある。\\r\\n    - 必要なライブラリも書いてある。\\r\\n- README.md\\r\\n    - GitHub以外で見ること有る？\\r\\n- tsconfig.json\\r\\n    - ？\\r\\n\\r\\n# contentsフォルダについて / 記事の書き方\\r\\n## 共通\\r\\n記事を書いたら以下のコマンドを入れてね。（JSONファイルを更新するため）  \\r\\n↓ブログ(posts)書いたとき\\r\\n```console\\r\\nnpm run md\\r\\n```\\r\\n↓固定ページ(markdown)書いたとき\\r\\n```console\\r\\nnpm run page\\r\\n```  \\r\\n↓同時に実行する\\r\\n```console\\r\\nnpm run markdown\\r\\n```\\r\\n## contents/pages/markdown\\r\\n固定ページを書く時に使います。  \\r\\nこのサイトでは`pages/about`(このサイトについて)を書く時に使いました。  \\r\\nNuxt Routerでは`pages/{ファイル名}`を指定する。\\r\\n## contents/posts/markdown\\r\\nブログ書く時に使う。  \\r\\n記事はここに入れる。  \\r\\nNuxt Routerでは`posts/{ファイル名}`を指定する。\\r\\n\\r\\nなおどちらも`contents/*/markdown`に入れてね。（他にもjsonとかsummary.jsonとか有るけど気にするな。）  \\r\\nそうしないとJSON生成（ブログ一覧生成など）でコケる気がします。\\r\\n\\r\\n## markdownひながた\\r\\n↓これをmarkdownの先頭に書いてください。  \\r\\nそれぞれ適切な値を入れてね。\\r\\n```markdown\\r\\n---\\r\\ntitle: タイトル\\r\\ncreated_at: 2020-05-31\\r\\ntags:\\r\\n- Android\\r\\n---\\r\\n```\\r\\n\\r\\nいじょう？","bodyHtml":"<h1>自作ブログ(Nuxt.js+processmd)の使い方</h1>\\n<p>めも</p>\\n<h1>起動方法</h1>\\n<pre><code class=\\"hljs\\">npm run dev</code></pre><h1>ファイル構成</h1>\\n<p>多分こうなってるはず</p>\\n<ul>\\n<li>assets\\n<ul>\\n<li>CSSファイル置いてある（フォント指定のために）</li>\\n</ul>\\n</li>\\n<li>Components\\n<ul>\\n<li>Vue.jsのやつと同じだと思う。</li>\\n<li>UIの部品を分けて他で使い回す的な</li>\\n<li>AndroidのFragmentに近いかな？</li>\\n</ul>\\n</li>\\n<li>contents\\n<ul>\\n<li>重要フォルダ。</li>\\n<li>最重要なので後で詳しく。</li>\\n</ul>\\n</li>\\n<li>dist\\n<ul>\\n<li><code>nuxt generate</code>で書き出したファイルの置き場所です。</li>\\n<li>htmlがある。</li>\\n<li>あとはこのフォルダでWebサーバー建てるなりすれば見れるはずです。</li>\\n</ul>\\n</li>\\n<li>layouts\\n<ul>\\n<li>（Viewの階層的に）一番下に居るやつ。</li>\\n<li>AppBarとかNavigationDrawerはここに書いてある。</li>\\n<li>Androidで言うとActivity？</li>\\n</ul>\\n</li>\\n<li>middleware\\n<ul>\\n<li>さあ？</li>\\n</ul>\\n</li>\\n<li>node_modules\\n<ul>\\n<li>多分ライブラリが入ってる。基本いじらない。</li>\\n<li><s>Black holeよりも深い</s></li>\\n<li>npmコマンドでコケた時はまず消して<code>npm install</code>する。</li>\\n</ul>\\n</li>\\n<li>plugins\\n<ul>\\n<li>わからん（使ってない）</li>\\n</ul>\\n</li>\\n<li>static\\n<ul>\\n<li>静的サイトジェネレートのときのfaviconとか？</li>\\n</ul>\\n</li>\\n<li>store\\n<ul>\\n<li>さあ？</li>\\n</ul>\\n</li>\\n<li>.から始まるファイル\\n<ul>\\n<li>基本触らないと思う</li>\\n</ul>\\n</li>\\n<li>nuxt.config.js\\n<ul>\\n<li>静的サイトジェネレートの時にどのファイルを作ればいいかとか書く。</li>\\n<li>Vuetifyでなんかやるときも書く。</li>\\n<li>cssとかも</li>\\n</ul>\\n</li>\\n<li>package-look.json\\n<ul>\\n<li>？</li>\\n</ul>\\n</li>\\n<li>package.json\\n<ul>\\n<li>このプログラムについてなど。</li>\\n<li>作者とかライセンスとかが書いてある。</li>\\n<li>必要なライブラリも書いてある。</li>\\n</ul>\\n</li>\\n<li>README.md\\n<ul>\\n<li>GitHub以外で見ること有る？</li>\\n</ul>\\n</li>\\n<li>tsconfig.json\\n<ul>\\n<li>？</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>contentsフォルダについて / 記事の書き方</h1>\\n<h2>共通</h2>\\n<p>記事を書いたら以下のコマンドを入れてね。（JSONファイルを更新するため）<br>\\n↓ブログ(posts)書いたとき</p>\\n<pre><code class=\\"hljs\\">npm run md</code></pre><p>↓固定ページ(markdown)書いたとき</p>\\n<pre><code class=\\"hljs\\">npm run page</code></pre><p>↓同時に実行する</p>\\n<pre><code class=\\"hljs\\">npm run markdown</code></pre><h2>contents/pages/markdown</h2>\\n<p>固定ページを書く時に使います。<br>\\nこのサイトでは<code>pages/about</code>(このサイトについて)を書く時に使いました。<br>\\nNuxt Routerでは<code>pages/{ファイル名}</code>を指定する。</p>\\n<h2>contents/posts/markdown</h2>\\n<p>ブログ書く時に使う。<br>\\n記事はここに入れる。<br>\\nNuxt Routerでは<code>posts/{ファイル名}</code>を指定する。</p>\\n<p>なおどちらも<code>contents/*/markdown</code>に入れてね。（他にもjsonとかsummary.jsonとか有るけど気にするな。）<br>\\nそうしないとJSON生成（ブログ一覧生成など）でコケる気がします。</p>\\n<h2>markdownひながた</h2>\\n<p>↓これをmarkdownの先頭に書いてください。<br>\\nそれぞれ適切な値を入れてね。</p>\\n<pre><code class=\\"hljs\\">---\\ntitle: タイトル\\ncreated_at: 2020-05-31\\ntags:\\n<span class=\\"hljs-section\\">- Android\\n---</span></code></pre><p>いじょう？</p>\\n","dir":"contents/posts/json","base":"usersmanual.json","ext":".json","sourceBase":"usersmanual.md","sourceExt":".md"}')},338:function(n){n.exports=JSON.parse('{"title":"たちみどろいどのキャッシュ機能について","created_at":"2020-04-08T18:54:12.000Z","tags":["Android","たちみどろいど","ニコニコ動画"],"bodyContent":"自分用のメモ。\\n\\n# たちみどろいどのキャッシュの仕様\\nたちみどろいどに**なぜか**ニコニコ動画再生機能とキャッシュ再生機能が実装されたのでキャッシュ再生機能の仕様でも書き残します。\\n\\nあとこの記事はバージョン7.1.1以降の話です。\\n\\n# たちみどろいどでキャッシュを再生するには\\n二通りのやり方があります\\n- たちみどろいどでキャッシュを取得する\\n- 自分の持ってる動画を再生する。必要なものは以下\\n    - 動画ファイル。mp4\\n    - コメントファイル。xml\\n\\n# たちみどろいどでキャッシュ取得\\n- 動画再生中なら\\n    - 「メニュー」を選んで「キャッシュ取得」ボタンを押す\\n- 動画一覧画面なら\\n    - 「︙」を押して「キャッシュ取得」を選ぶ。\\n\\n~~**なおどちらも通知に「ダウンロードが完了しました」が表示されるまで画面回転したりアプリを終了したりしてはいけません。**~~\\n\\n最新版からキャッシュ取得部分はバッググラウンドに移行させたのでどんどんキャッシュ取得ボタン押して大丈夫です。終わり次第取得されます。  \\nキャッシュ取得が終われば通知が消えます。\\n\\n## ファイル構造\\n保存先は以下です\\n**sdcard/Android/data/io.github.takusan23.tatimidroid/files/cache**\\n\\nここのフォルダに動画IDでフォルダが生成されています。  \\nフォルダの中身は以下の通りです。\\n\\n- [動画ID].jpg\\n    - サムネイルです。\\n- [動画ID].json\\n    - 動画情報です。JSON形式です。\\n        - もしJSON形式とHTMLスクレイピングをかじったことがあるなら↓\\n            - ニコ動再生ページのHTML内のID「embedded-data」要素の「data-api-data」属性の値を保存しています。\\n            - ニコ動再生ページでF12を押してConsoleを開いて以下のJSを叩くと見れます。↓\\n                - ```JSON.parse(document.getElementById(\'js-initial-watch-data\').getAttribute(\'data-api-data\'))```\\n- [動画ID].mp4\\n    - 動画ファイルです。\\n    - 再生時の画質で保存していますので画質を変更した後ダウンロードすると変更した後の画質でダウンロードされます。\\n    - 公式動画はダウンロードできないしやりません。\\n- [動画ID]_comment.json\\n    - コメントです。JSON形式です。\\n    - nmsg.nicovideo.jp/api.json/ にPOSTして帰ってきた中身を保存しています。\\n    - **XML形式ではありません！！！**\\n\\n# 自分の手元の動画を再生する場合\\nlivedlなどのタイムシフト保存ツールなどで取得したファイルを再生するときに使えます。  \\n以下のファイルを用意する必要があります。\\n- 動画ファイル。mp4形式で。\\n- コメントファイル。\\n\\n## ファイル構造\\n以下の場所にフォルダを作成してください。\\n**sdcard/Android/data/io.github.takusan23.tatimidroid/files/cache**  \\nニコ動の場合は動画ID、生放送なら生放送IDでいいとお思います。\\n\\n## 中に入れるファイル\\n### 動画ファイル\\nmp4形式で頼む。  \\nファイル名は何でもいいです。動画ファイル名はキャッシュ一覧で表示される名前になります。\\n### コメントファイル\\nxml形式の場合はファイル名は何でもいいです。（変換時にxml形式のファイルを探すため）\\n\\nこんな感じの↓\\n```xml\\n<chat thread=\\"ThreadId\\" no=\\"3\\" vpos=\\"コメントの再生位置(100で1秒)\\" date=\\"投稿日時\\" user_id=\\"ユーザーID\\">コメント</chat>\\n```\\n\\nJSON形式の場合は以下の名前で保存することで読み込まれます。  \\n**[動画ID]_comment.json**  \\n例：sm157_comment.json\\n\\nxml形式の場合はJSON形式に変換しないと扱えないため変換する必要があります。  \\nキャッシュ一覧画面で「︙」を押して「XML形式のコメントをJSON形式に変換する」を押して変換する作業をする必要があります。  \\nこの作業をすると[動画ID]_comment.jsonというファイルが生成されて無事再生できるようになるはずです。\\n\\nなお自分の動画を再生する際は以下のファイルは必要ありません。\\n\\n- 動画情報ファイル（動画ID.json）\\n    - ない場合は「動画情報」タブが表示されないだけで再生はできます。\\n- サムネイルファイル（動画ID.jpg）\\n    - ない場合はキャッシュ一覧でサムネイルが表示されないだけで再生はできます。\\n\\n以上です。\\n\\n# 注意点\\nアプリを消すとキャッシュもなくなります。\\n\\nあと保存先フォルダがくっそ長い理由ですが、Android 10からScopedStorageを使わないとファイル保存ができないので私は悪くない。","bodyHtml":"<p>自分用のメモ。</p>\\n<h1>たちみどろいどのキャッシュの仕様</h1>\\n<p>たちみどろいどに<strong>なぜか</strong>ニコニコ動画再生機能とキャッシュ再生機能が実装されたのでキャッシュ再生機能の仕様でも書き残します。</p>\\n<p>あとこの記事はバージョン7.1.1以降の話です。</p>\\n<h1>たちみどろいどでキャッシュを再生するには</h1>\\n<p>二通りのやり方があります</p>\\n<ul>\\n<li>たちみどろいどでキャッシュを取得する</li>\\n<li>自分の持ってる動画を再生する。必要なものは以下\\n<ul>\\n<li>動画ファイル。mp4</li>\\n<li>コメントファイル。xml</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>たちみどろいどでキャッシュ取得</h1>\\n<ul>\\n<li>動画再生中なら\\n<ul>\\n<li>「メニュー」を選んで「キャッシュ取得」ボタンを押す</li>\\n</ul>\\n</li>\\n<li>動画一覧画面なら\\n<ul>\\n<li>「︙」を押して「キャッシュ取得」を選ぶ。</li>\\n</ul>\\n</li>\\n</ul>\\n<p><s><strong>なおどちらも通知に「ダウンロードが完了しました」が表示されるまで画面回転したりアプリを終了したりしてはいけません。</strong></s></p>\\n<p>最新版からキャッシュ取得部分はバッググラウンドに移行させたのでどんどんキャッシュ取得ボタン押して大丈夫です。終わり次第取得されます。<br>\\nキャッシュ取得が終われば通知が消えます。</p>\\n<h2>ファイル構造</h2>\\n<p>保存先は以下です\\n<strong>sdcard/Android/data/io.github.takusan23.tatimidroid/files/cache</strong></p>\\n<p>ここのフォルダに動画IDでフォルダが生成されています。<br>\\nフォルダの中身は以下の通りです。</p>\\n<ul>\\n<li>[動画ID].jpg\\n<ul>\\n<li>サムネイルです。</li>\\n</ul>\\n</li>\\n<li>[動画ID].json\\n<ul>\\n<li>動画情報です。JSON形式です。\\n<ul>\\n<li>もしJSON形式とHTMLスクレイピングをかじったことがあるなら↓\\n<ul>\\n<li>ニコ動再生ページのHTML内のID「embedded-data」要素の「data-api-data」属性の値を保存しています。</li>\\n<li>ニコ動再生ページでF12を押してConsoleを開いて以下のJSを叩くと見れます。↓\\n<ul>\\n<li><code>JSON.parse(document.getElementById(\'js-initial-watch-data\').getAttribute(\'data-api-data\'))</code></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>[動画ID].mp4\\n<ul>\\n<li>動画ファイルです。</li>\\n<li>再生時の画質で保存していますので画質を変更した後ダウンロードすると変更した後の画質でダウンロードされます。</li>\\n<li>公式動画はダウンロードできないしやりません。</li>\\n</ul>\\n</li>\\n<li>[動画ID]_comment.json\\n<ul>\\n<li>コメントです。JSON形式です。</li>\\n<li>nmsg.nicovideo.jp/api.json/ にPOSTして帰ってきた中身を保存しています。</li>\\n<li><strong>XML形式ではありません！！！</strong></li>\\n</ul>\\n</li>\\n</ul>\\n<h1>自分の手元の動画を再生する場合</h1>\\n<p>livedlなどのタイムシフト保存ツールなどで取得したファイルを再生するときに使えます。<br>\\n以下のファイルを用意する必要があります。</p>\\n<ul>\\n<li>動画ファイル。mp4形式で。</li>\\n<li>コメントファイル。</li>\\n</ul>\\n<h2>ファイル構造</h2>\\n<p>以下の場所にフォルダを作成してください。\\n<strong>sdcard/Android/data/io.github.takusan23.tatimidroid/files/cache</strong><br>\\nニコ動の場合は動画ID、生放送なら生放送IDでいいとお思います。</p>\\n<h2>中に入れるファイル</h2>\\n<h3>動画ファイル</h3>\\n<p>mp4形式で頼む。<br>\\nファイル名は何でもいいです。動画ファイル名はキャッシュ一覧で表示される名前になります。</p>\\n<h3>コメントファイル</h3>\\n<p>xml形式の場合はファイル名は何でもいいです。（変換時にxml形式のファイルを探すため）</p>\\n<p>こんな感じの↓</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">chat</span> <span class=\\"hljs-attr\\">thread</span>=<span class=\\"hljs-string\\">\\"ThreadId\\"</span> <span class=\\"hljs-attr\\">no</span>=<span class=\\"hljs-string\\">\\"3\\"</span> <span class=\\"hljs-attr\\">vpos</span>=<span class=\\"hljs-string\\">\\"コメントの再生位置(100で1秒)\\"</span> <span class=\\"hljs-attr\\">date</span>=<span class=\\"hljs-string\\">\\"投稿日時\\"</span> <span class=\\"hljs-attr\\">user_id</span>=<span class=\\"hljs-string\\">\\"ユーザーID\\"</span>&gt;</span>コメント<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">chat</span>&gt;</span></code></pre><p>JSON形式の場合は以下の名前で保存することで読み込まれます。<br>\\n<strong>[動画ID]_comment.json</strong><br>\\n例：sm157_comment.json</p>\\n<p>xml形式の場合はJSON形式に変換しないと扱えないため変換する必要があります。<br>\\nキャッシュ一覧画面で「︙」を押して「XML形式のコメントをJSON形式に変換する」を押して変換する作業をする必要があります。<br>\\nこの作業をすると[動画ID]_comment.jsonというファイルが生成されて無事再生できるようになるはずです。</p>\\n<p>なお自分の動画を再生する際は以下のファイルは必要ありません。</p>\\n<ul>\\n<li>動画情報ファイル（動画ID.json）\\n<ul>\\n<li>ない場合は「動画情報」タブが表示されないだけで再生はできます。</li>\\n</ul>\\n</li>\\n<li>サムネイルファイル（動画ID.jpg）\\n<ul>\\n<li>ない場合はキャッシュ一覧でサムネイルが表示されないだけで再生はできます。</li>\\n</ul>\\n</li>\\n</ul>\\n<p>以上です。</p>\\n<h1>注意点</h1>\\n<p>アプリを消すとキャッシュもなくなります。</p>\\n<p>あと保存先フォルダがくっそ長い理由ですが、Android 10からScopedStorageを使わないとファイル保存ができないので私は悪くない。</p>\\n","dir":"contents/posts/json","base":"たちみどろいどのキャッシュ機能について.json","ext":".json","sourceBase":"たちみどろいどのキャッシュ機能について.md","sourceExt":".md"}')},339:function(n){n.exports=JSON.parse('{"title":"全コメントきしめんやりたい","created_at":"2020-05-20T23:06:17.000Z","tags":["Android","たちみどろいど","ニコニコ動画"],"bodyContent":"どうもこんばんわ。  \\nニコ生でAngel Beats!一挙見ました。天使ちゃんかわいい。  \\n最終回私は好きです\\n\\n# ほんだい\\n全コメント~~きしめん~~Nursery Rhymeをたちみどろいどで再生したい。  \\nちなみに最古のきしめん[sm157](https://nico.ms/sm157)は空耳なんだよね\\n\\n# たちみどろいどでのコメント描画\\nSurfaceViewではなくCanvas(View)でやってる。  \\n10ミリ秒ごとに動かしている。ちなみに60fpsは16ミリ秒で更新らしい(1000÷60=16...)  \\n私のPixelくん(3 XL)は60fpsなので無駄に計算させてる？。  \\n90fpsな端末欲しいなぁ！\\n\\n## SurfaceViewではない\\nSurfaceViewとTextureView(Android N 以降非推奨)がなんか速くて、別スレッドで書かれるからUIが固まらないとか！？  \\nというわけで試しにCanvasで書いたコメント描画をお引越ししてみたんだけど、    \\n\\n一気にコメント描画されるとコメントの移動が遅くなっちゃう。  \\nでもこれCanvasだとコメントの移動が遅くなるとか無いんだよね（流しすぎて固まる事はある）\\n\\n私の実装が間違っている説はあるけどとりあえずCanvasのまま行きます。\\n\\nCanvas(View)だとハードウェアアクセラレーション(よくわからんけどGPU使ってくれる？)が使えるからもしかして・・・？\\n\\n# 全コメント取得する\\nニコニコ動画には過去コメント(名前の通り昔投稿されたコメント)を取得する機能があります。  \\nこれで全コメントが取れるようになります。  \\n\\n> ちなみに：ニコニコ動画のコメント取得はクライアント(プレイヤー)側で制御してる。  再生時間に合わせて250件とか1000件とか指定してるっぽい。たちみどろいどではどんな動画でも1000件取ってます。\\n\\n|   | 全コメント取得は以下の感じに                                          |\\n|---|-----------------------------------------------------------------------|\\n| 1 | コメント取得API叩く                                                   |\\n| 2 | 取得した中で一番古いコメントをの投稿時間を取る                        |\\n| 3 | 一番古い投稿時間を過去コメントの時間に指定してAPI叩く                 |\\n| 4 | 一番古いコメントの投稿時間を取得する                                  |\\n| 5 | 3~4を**ゆっくり(負荷がかかるから)**繰り返すことで全コメント取得できる |\\n\\n今回は全コメント取得できるツールがあったので使わせてもらいました→ http://xeno.grrr.jp/\\n\\n# たちみどろいどで再生\\nたちみどろいどはmp4とコメントxmlファイルがあれば再生できます。  \\nこんな感じの↓\\n```xml\\n<chat thread=\\"ThreadId\\" no=\\"3\\" vpos=\\"コメントの再生位置(100で1秒)\\" date=\\"投稿日時\\" user_id=\\"ユーザーID\\">コメント</chat>\\n```\\n\\n# 結果\\n全コメントきしめん [sm367861](https://www.nicovideo.jp/watch/sm367861) (9万コメントちょい)でやった  \\n\\nきしめん弾幕のところは固まってしまった  \\n\\n{% asset_img kishimen.png kishimen %}\\n\\n1万コメントでもちょっと固まった\\n\\n{% asset_img 10000.png 10000 %}\\n\\n# おわりに\\nさきゅばすの追悼記事を読んでずっとやろうとしてたことができた。  \\n下コメで動画が占拠されたり弾幕流れてるの見ると作ってよかったってなる。つくってよかった。  \\nあとこれとは関係ないんだけど課題が多いんだが？もう休校終わるやんけ","bodyHtml":"<p>どうもこんばんわ。<br>\\nニコ生でAngel Beats!一挙見ました。天使ちゃんかわいい。<br>\\n最終回私は好きです</p>\\n<h1>ほんだい</h1>\\n<p>全コメント<s>きしめん</s>Nursery Rhymeをたちみどろいどで再生したい。<br>\\nちなみに最古のきしめん<a href=\\"https://nico.ms/sm157\\">sm157</a>は空耳なんだよね</p>\\n<h1>たちみどろいどでのコメント描画</h1>\\n<p>SurfaceViewではなくCanvas(View)でやってる。<br>\\n10ミリ秒ごとに動かしている。ちなみに60fpsは16ミリ秒で更新らしい(1000÷60=16...)<br>\\n私のPixelくん(3 XL)は60fpsなので無駄に計算させてる？。<br>\\n90fpsな端末欲しいなぁ！</p>\\n<h2>SurfaceViewではない</h2>\\n<p>SurfaceViewとTextureView(Android N 以降非推奨)がなんか速くて、別スレッドで書かれるからUIが固まらないとか！？<br>\\nというわけで試しにCanvasで書いたコメント描画をお引越ししてみたんだけど、</p>\\n<p>一気にコメント描画されるとコメントの移動が遅くなっちゃう。<br>\\nでもこれCanvasだとコメントの移動が遅くなるとか無いんだよね（流しすぎて固まる事はある）</p>\\n<p>私の実装が間違っている説はあるけどとりあえずCanvasのまま行きます。</p>\\n<p>Canvas(View)だとハードウェアアクセラレーション(よくわからんけどGPU使ってくれる？)が使えるからもしかして・・・？</p>\\n<h1>全コメント取得する</h1>\\n<p>ニコニコ動画には過去コメント(名前の通り昔投稿されたコメント)を取得する機能があります。<br>\\nこれで全コメントが取れるようになります。</p>\\n<blockquote>\\n<p>ちなみに：ニコニコ動画のコメント取得はクライアント(プレイヤー)側で制御してる。  再生時間に合わせて250件とか1000件とか指定してるっぽい。たちみどろいどではどんな動画でも1000件取ってます。</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>全コメント取得は以下の感じに</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>コメント取得API叩く</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>取得した中で一番古いコメントをの投稿時間を取る</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>一番古い投稿時間を過去コメントの時間に指定してAPI叩く</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>一番古いコメントの投稿時間を取得する</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td>3~4を**ゆっくり(負荷がかかるから)**繰り返すことで全コメント取得できる</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>今回は全コメント取得できるツールがあったので使わせてもらいました→ http://xeno.grrr.jp/</p>\\n<h1>たちみどろいどで再生</h1>\\n<p>たちみどろいどはmp4とコメントxmlファイルがあれば再生できます。<br>\\nこんな感じの↓</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">chat</span> <span class=\\"hljs-attr\\">thread</span>=<span class=\\"hljs-string\\">\\"ThreadId\\"</span> <span class=\\"hljs-attr\\">no</span>=<span class=\\"hljs-string\\">\\"3\\"</span> <span class=\\"hljs-attr\\">vpos</span>=<span class=\\"hljs-string\\">\\"コメントの再生位置(100で1秒)\\"</span> <span class=\\"hljs-attr\\">date</span>=<span class=\\"hljs-string\\">\\"投稿日時\\"</span> <span class=\\"hljs-attr\\">user_id</span>=<span class=\\"hljs-string\\">\\"ユーザーID\\"</span>&gt;</span>コメント<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">chat</span>&gt;</span></code></pre><h1>結果</h1>\\n<p>全コメントきしめん <a href=\\"https://www.nicovideo.jp/watch/sm367861\\">sm367861</a> (9万コメントちょい)でやった</p>\\n<p>きしめん弾幕のところは固まってしまった</p>\\n<p>{% asset_img kishimen.png kishimen %}</p>\\n<p>1万コメントでもちょっと固まった</p>\\n<p>{% asset_img 10000.png 10000 %}</p>\\n<h1>おわりに</h1>\\n<p>さきゅばすの追悼記事を読んでずっとやろうとしてたことができた。<br>\\n下コメで動画が占拠されたり弾幕流れてるの見ると作ってよかったってなる。つくってよかった。<br>\\nあとこれとは関係ないんだけど課題が多いんだが？もう休校終わるやんけ</p>\\n","dir":"contents/posts/json","base":"全コメントきしめんやりたい.json","ext":".json","sourceBase":"全コメントきしめんやりたい.md","sourceExt":".md"}')},340:function(n){n.exports=JSON.parse('{"title":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う","created_at":"2020-05-17T00:32:19.000Z","tags":["Android","Kotlin"],"bodyContent":"あなたのインナーチャイルド、今日も元気？  \\nカツドンチャンネルで好きな動画置いときますね  \\n<iframe width=\\"312\\" height=\\"176\\" src=\\"https://ext.nicovideo.jp/thumb/sm27998318\\" scrolling=\\"no\\" style=\\"border:solid 1px #ccc;\\" frameborder=\\"0\\"><a href=\\"https://www.nicovideo.jp/watch/sm27998318\\">キレて食器を破壊したのでみなさん見て下さい</a></iframe>\\n<iframe width=\\"312\\" height=\\"176\\" src=\\"https://ext.nicovideo.jp/thumb/sm30369283\\" scrolling=\\"no\\" style=\\"border:solid 1px #ccc;\\" frameborder=\\"0\\"><a href=\\"https://www.nicovideo.jp/watch/sm30369283\\">パワー系ガイジのムーブを披露しながら歌うサイコマルマイン</a></iframe>\\n\\n# 本題\\n画面回転する→onSaveInstanceState()→onDestroy()→onCreate()という感じ（超省略）でふりだしに戻ります。\\n\\n# つくる\\n## ScreenRotationFragment.kt / fragment_screen_roration.xml\\n今回はFragmentでの値の引き継ぎですのでまずFragment作ります\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:gravity=\\"center\\"\\n    android:orientation=\\"vertical\\">\\n\\n    <EditText\\n        android:id=\\"@+id/editText\\"\\n        android:layout_width=\\"match_parent\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:ems=\\"10\\"\\n        android:inputType=\\"textPersonName\\"\\n        android:text=\\"Name\\" />\\n</LinearLayout>\\n```\\n\\n```kotlin\\nclass ScreenRotationFragment : Fragment() {\\n\\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\\n        return inflater.inflate(R.layout.fragment_screen_roration, container, false)\\n    }\\n\\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\\n        super.onViewCreated(view, savedInstanceState)\\n        // 画面回転のときは savedInstanceState が null 以外になる\\n        if (savedInstanceState != null) {\\n            editText.setText(savedInstanceState.getString(\\"text\\"))\\n        }\\n    }\\n\\n    override fun onSaveInstanceState(outState: Bundle) {\\n        super.onSaveInstanceState(outState)\\n        outState.apply {\\n            putString(\\"text\\", editText.text.toString())\\n        }\\n    }\\n\\n}\\n```\\n\\n## MainActivity.kt / activity_main.xml\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<LinearLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:id=\\"@+id/activity_main_fragment\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    android:orientation=\\"horizontal\\"\\n    tools:context=\\".MainActivity\\">\\n\\n</LinearLayout>\\n```\\n```kotlin\\nclass MainActivity : AppCompatActivity() {\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // 画面回転してもFragmentが残るらしい\\n        val fragment = if (supportFragmentManager.findFragmentByTag(\\"rotation_fragment\\") != null) {\\n            supportFragmentManager.findFragmentByTag(\\"rotation_fragment\\") as ScreenRotationFragment\\n        } else {\\n            ScreenRotationFragment()\\n        }\\n        supportFragmentManager\\n            .beginTransaction()\\n            .replace(R.id.activity_main_fragment, fragment, \\"rotation_fragment\\") // 第三引数にタグ入れる\\n            .commit()\\n\\n    }\\n}\\n```\\n\\nこれで実行してEditTextにテキスト入れて画面回転してもなんと！値が復元されてるんですね～\\n\\n{%asset_img port.png port%}\\n\\n{%asset_img land.png lanf%}\\n\\n# データクラスのときは？\\n複数の値をまとめたデータクラスのときはどうやって引き継ぐのかって話ですが`Serializable`ってのを使うそうですよ？\\n\\n## データクラスつくる\\n### TestData.kt\\n```kotlin\\ndata class TestData(\\n    val text: String\\n) : Serializable\\n```\\n`Serializable`ってのを使います\\n\\n## Fragment書き換え\\n```kotlin\\nclass ScreenRotationFragment : Fragment() {\\n\\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\\n        return inflater.inflate(R.layout.fragment_screen_roration, container, false)\\n    }\\n\\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\\n        super.onViewCreated(view, savedInstanceState)\\n        // 画面回転のときは savedInstanceState が null 以外になる\\n        if (savedInstanceState != null) {\\n            // データクラスもらう\\n            val testData = savedInstanceState.getSerializable(\\"data\\") as TestData\\n            editText.setText(testData.text)\\n        }\\n    }\\n\\n    override fun onSaveInstanceState(outState: Bundle) {\\n        super.onSaveInstanceState(outState)\\n        // 画面回転時に保存するときはここに書く\\n        outState.apply {\\n            val testData = TestData(editText.text.toString())\\n            putSerializable(\\"data\\", testData)\\n        }\\n    }\\n\\n}\\n```\\n\\nこれでも値が復元されるはずです。\\n\\n{%asset_img data_port.png port%}\\n\\n{%asset_img data_land.png lanf%}\\n\\n# 終わりに\\n`Serializable`ともう一個、`Parcelable`ってのが有るんだけどなんか実装がだるい（IDEがやってくれるけど）ので今回は見送った。  \\n別に今回のような使い方なら`Serializable`で十分だと思う。","bodyHtml":"<p>あなたのインナーチャイルド、今日も元気？<br>\\nカツドンチャンネルで好きな動画置いときますね<br>\\n&lt;iframe width=&quot;312&quot; height=&quot;176&quot; src=&quot;https://ext.nicovideo.jp/thumb/sm27998318&quot; scrolling=&quot;no&quot; style=&quot;border:solid 1px #ccc;&quot; frameborder=&quot;0&quot;&gt;&lt;a href=&quot;https://www.nicovideo.jp/watch/sm27998318&quot;&gt;キレて食器を破壊したのでみなさん見て下さい&lt;/a&gt;&lt;/iframe&gt;\\n&lt;iframe width=&quot;312&quot; height=&quot;176&quot; src=&quot;https://ext.nicovideo.jp/thumb/sm30369283&quot; scrolling=&quot;no&quot; style=&quot;border:solid 1px #ccc;&quot; frameborder=&quot;0&quot;&gt;&lt;a href=&quot;https://www.nicovideo.jp/watch/sm30369283&quot;&gt;パワー系ガイジのムーブを披露しながら歌うサイコマルマイン&lt;/a&gt;&lt;/iframe&gt;</p>\\n<h1>本題</h1>\\n<p>画面回転する→onSaveInstanceState()→onDestroy()→onCreate()という感じ（超省略）でふりだしに戻ります。</p>\\n<h1>つくる</h1>\\n<h2>ScreenRotationFragment.kt / fragment_screen_roration.xml</h2>\\n<p>今回はFragmentでの値の引き継ぎですのでまずFragment作ります</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:gravity</span>=<span class=\\"hljs-string\\">\\"center\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"vertical\\"</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">EditText</span>\\n        <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/editText\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n        <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"wrap_content\\"</span>\\n        <span class=\\"hljs-attr\\">android:ems</span>=<span class=\\"hljs-string\\">\\"10\\"</span>\\n        <span class=\\"hljs-attr\\">android:inputType</span>=<span class=\\"hljs-string\\">\\"textPersonName\\"</span>\\n        <span class=\\"hljs-attr\\">android:text</span>=<span class=\\"hljs-string\\">\\"Name\\"</span> /&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ScreenRotationFragment</span> : <span class=\\"hljs-type\\">Fragment</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreateView</span><span class=\\"hljs-params\\">(inflater: <span class=\\"hljs-type\\">LayoutInflater</span>, container: <span class=\\"hljs-type\\">ViewGroup</span>?, savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span>: View? {\\n        <span class=\\"hljs-keyword\\">return</span> inflater.inflate(R.layout.fragment_screen_roration, container, <span class=\\"hljs-literal\\">false</span>)\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onViewCreated</span><span class=\\"hljs-params\\">(view: <span class=\\"hljs-type\\">View</span>, savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onViewCreated(view, savedInstanceState)\\n        <span class=\\"hljs-comment\\">// 画面回転のときは savedInstanceState が null 以外になる</span>\\n        <span class=\\"hljs-keyword\\">if</span> (savedInstanceState != <span class=\\"hljs-literal\\">null</span>) {\\n            editText.setText(savedInstanceState.getString(<span class=\\"hljs-string\\">\\"text\\"</span>))\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onSaveInstanceState</span><span class=\\"hljs-params\\">(outState: <span class=\\"hljs-type\\">Bundle</span>)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onSaveInstanceState(outState)\\n        outState.apply {\\n            putString(<span class=\\"hljs-string\\">\\"text\\"</span>, editText.text.toString())\\n        }\\n    }\\n\\n}</code></pre><h2>MainActivity.kt / activity_main.xml</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">LinearLayout</span> <span class=\\"hljs-attr\\">xmlns:android</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res/android\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:app</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/apk/res-auto\\"</span>\\n    <span class=\\"hljs-attr\\">xmlns:tools</span>=<span class=\\"hljs-string\\">\\"http://schemas.android.com/tools\\"</span>\\n    <span class=\\"hljs-attr\\">android:id</span>=<span class=\\"hljs-string\\">\\"@+id/activity_main_fragment\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_width</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:layout_height</span>=<span class=\\"hljs-string\\">\\"match_parent\\"</span>\\n    <span class=\\"hljs-attr\\">android:orientation</span>=<span class=\\"hljs-string\\">\\"horizontal\\"</span>\\n    <span class=\\"hljs-attr\\">tools:context</span>=<span class=\\"hljs-string\\">\\".MainActivity\\"</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MainActivity</span> : <span class=\\"hljs-type\\">AppCompatActivity</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreate</span><span class=\\"hljs-params\\">(savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        <span class=\\"hljs-comment\\">// 画面回転してもFragmentが残るらしい</span>\\n        <span class=\\"hljs-keyword\\">val</span> fragment = <span class=\\"hljs-keyword\\">if</span> (supportFragmentManager.findFragmentByTag(<span class=\\"hljs-string\\">\\"rotation_fragment\\"</span>) != <span class=\\"hljs-literal\\">null</span>) {\\n            supportFragmentManager.findFragmentByTag(<span class=\\"hljs-string\\">\\"rotation_fragment\\"</span>) <span class=\\"hljs-keyword\\">as</span> ScreenRotationFragment\\n        } <span class=\\"hljs-keyword\\">else</span> {\\n            ScreenRotationFragment()\\n        }\\n        supportFragmentManager\\n            .beginTransaction()\\n            .replace(R.id.activity_main_fragment, fragment, <span class=\\"hljs-string\\">\\"rotation_fragment\\"</span>) <span class=\\"hljs-comment\\">// 第三引数にタグ入れる</span>\\n            .commit()\\n\\n    }\\n}</code></pre><p>これで実行してEditTextにテキスト入れて画面回転してもなんと！値が復元されてるんですね～</p>\\n<p>{%asset_img port.png port%}</p>\\n<p>{%asset_img land.png lanf%}</p>\\n<h1>データクラスのときは？</h1>\\n<p>複数の値をまとめたデータクラスのときはどうやって引き継ぐのかって話ですが<code>Serializable</code>ってのを使うそうですよ？</p>\\n<h2>データクラスつくる</h2>\\n<h3>TestData.kt</h3>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">data</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">TestData</span></span>(\\n    <span class=\\"hljs-keyword\\">val</span> text: String\\n) : Serializable</code></pre><p><code>Serializable</code>ってのを使います</p>\\n<h2>Fragment書き換え</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ScreenRotationFragment</span> : <span class=\\"hljs-type\\">Fragment</span></span>() {\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onCreateView</span><span class=\\"hljs-params\\">(inflater: <span class=\\"hljs-type\\">LayoutInflater</span>, container: <span class=\\"hljs-type\\">ViewGroup</span>?, savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span>: View? {\\n        <span class=\\"hljs-keyword\\">return</span> inflater.inflate(R.layout.fragment_screen_roration, container, <span class=\\"hljs-literal\\">false</span>)\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onViewCreated</span><span class=\\"hljs-params\\">(view: <span class=\\"hljs-type\\">View</span>, savedInstanceState: <span class=\\"hljs-type\\">Bundle</span>?)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onViewCreated(view, savedInstanceState)\\n        <span class=\\"hljs-comment\\">// 画面回転のときは savedInstanceState が null 以外になる</span>\\n        <span class=\\"hljs-keyword\\">if</span> (savedInstanceState != <span class=\\"hljs-literal\\">null</span>) {\\n            <span class=\\"hljs-comment\\">// データクラスもらう</span>\\n            <span class=\\"hljs-keyword\\">val</span> testData = savedInstanceState.getSerializable(<span class=\\"hljs-string\\">\\"data\\"</span>) <span class=\\"hljs-keyword\\">as</span> TestData\\n            editText.setText(testData.text)\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">onSaveInstanceState</span><span class=\\"hljs-params\\">(outState: <span class=\\"hljs-type\\">Bundle</span>)</span></span> {\\n        <span class=\\"hljs-keyword\\">super</span>.onSaveInstanceState(outState)\\n        <span class=\\"hljs-comment\\">// 画面回転時に保存するときはここに書く</span>\\n        outState.apply {\\n            <span class=\\"hljs-keyword\\">val</span> testData = TestData(editText.text.toString())\\n            putSerializable(<span class=\\"hljs-string\\">\\"data\\"</span>, testData)\\n        }\\n    }\\n\\n}</code></pre><p>これでも値が復元されるはずです。</p>\\n<p>{%asset_img data_port.png port%}</p>\\n<p>{%asset_img data_land.png lanf%}</p>\\n<h1>終わりに</h1>\\n<p><code>Serializable</code>ともう一個、<code>Parcelable</code>ってのが有るんだけどなんか実装がだるい（IDEがやってくれるけど）ので今回は見送った。<br>\\n別に今回のような使い方なら<code>Serializable</code>で十分だと思う。</p>\\n","dir":"contents/posts/json","base":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う.json","ext":".json","sourceBase":"画面回転しても尊厳損傷しないようにonSaveInstanceState使う.md","sourceExt":".md"}')},356:function(n,t,e){"use strict";e.r(t);e(35),e(36);var summary=e(315),l={validate:function(n){var t=n.params;return summary.b.includes("contents/posts/markdown/".concat(t.slug,".md"))},asyncData:function(n){var t=n.params;return Object.assign({},e(325)("./".concat(t.slug,".json")),{params:t})},mounted:function(){document.getElementById("title").innerText=this.title},head:function(){var title="".concat(this.title),n="posts/".concat(this.params.slug,"/");return{title:title,meta:[{hid:"og:url",property:"og:url",content:n},{hid:"og:title",property:"og:title",content:title}],link:[{rel:"canonical",href:n}]}},data:function(){return{instans:["best-friends.chat","pawoo.net"]}},methods:{shareDon:function(n){open("https://".concat(n,"/share?text=").concat(this.title,"\n").concat(location.href),"_brank")}}},o=e(62),r=e(81),c=e.n(r),d=e(166),h=e(303),m=e(302),j=e(351),y=e(295),w=e(116),k=e(117),v=e(78),f=e(33),S=e(353),_=e(319),component=Object(o.a)(l,(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-card",{staticClass:"pa-5",staticStyle:{"margin-top":"-64px"},attrs:{elevation:"10"}},[e("div",{staticClass:"post-meta pa-2"},[e("v-icon",[n._v("mdi-file-upload-outline")]),n._v(" "),e("time",[n._v(n._s(new Date(this.created_at).toLocaleDateString())+" 投稿")])],1),n._v(" "),n._l(this.tags,(function(t){return e("v-chip",{key:t,staticClass:"ma-1",attrs:{small:"",color:"indigo","text-color":"white"}},[n._v(n._s(t))])})),n._v(" "),e("v-divider"),n._v(" "),e("div",{attrs:{id:"content"},domProps:{innerHTML:n._s(n.bodyHtml)}}),n._v(" "),e("div",{attrs:{id:"count"}}),n._v(" "),e("v-divider"),n._v(" "),e("v-card-actions",[e("v-row",{attrs:{align:"center",justify:"end"}},[e("v-menu",{attrs:{"offset-y":""},scopedSlots:n._u([{key:"activator",fn:function(t){var l=t.on;return[e("v-btn",n._g({attrs:{text:"",color:"blue",dark:""}},l),[e("v-icon",[n._v("mdi-mastodon")]),n._v("Mastodonで共有？\n          ")],1)]}}])},[n._v(" "),e("v-list",n._l(n.instans,(function(t){return e("v-list-item",{key:t},[e("v-list-item-title",{staticStyle:{cursor:"pointer"},on:{click:function(e){return n.shareDon(t)}}},[n._v(n._s(t))])],1)})),1)],1)],1)],1)],2)}),[],!1,null,null,null);t.default=component.exports;c()(component,{VBtn:d.a,VCard:h.a,VCardActions:m.a,VChip:j.a,VDivider:y.a,VIcon:w.a,VList:k.a,VListItem:v.a,VListItemTitle:f.c,VMenu:S.a,VRow:_.a})}}]);