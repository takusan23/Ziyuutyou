__NUXT_JSONP__("/posts/first", {data:[{title:"Nuxt.jsとprocessmdでブログ作りたい。",created_at:"2020-05-30 21:10:00",tags:["NuxtJS","Markdown","JavaScript"],bodyContent:"**Nuxt.js+processmd**でブログ作るよ\r\n\r\n# 環境\r\n| なまえ | あたい         |\r\n|--------|----------------|\r\n| OS     | Windows 10 Pro |\r\n| Node   | 12.14.1        |\r\n\r\n# Nuxt.jsプロジェクト作成\r\n\r\n```console\r\nnpx create-nuxt-app nuxtblog\r\n```\r\n\r\nあとは好きな方を選んでいきます\r\n- programming language\r\n    - TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）\r\n- UI framework\r\n    - Vuetifyがマテリアルデザイン（今回はElement使ってみる）\r\n- あとは適当に（PWA入れといた）\r\n\r\n```console\r\n✨  Generating Nuxt.js project in nuxtblog\r\n? Project name nuxtblog\r\n? Project description My cool Nuxt.js project\r\n? Author name takusan23\r\n? Choose programming language TypeScript     \r\n? Choose the package manager Npm      \r\n? Choose UI framework Element\r\n? Choose custom server framework None (Recommended) \r\n? Choose the runtime for TypeScript Default\r\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\r\n? Choose linting tools (Press \u003Cspace\u003E to select, \u003Ca\u003E to toggle all, \u003Ci\u003E to invert selection)\r\n? Choose test framework None\r\n? Choose rendering mode Single Page App\r\n? Choose development tools (Press \u003Cspace\u003E to select, \u003Ca\u003E to toggle all, \u003Ci\u003E to invert selection)\r\n```\r\n\r\nそしたら移動して、サーバー起動させます\r\n\r\n```console\r\ncd nuxt blog\r\nnpm run dev\r\n```\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002Ffsdnyw3.png)\r\n\r\n# Markdownファイルの保存場所を作る\r\n\r\nnuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に  \r\n**contentsフォルダ**を作り、その中に  \r\n**postsフォルダ**を作り、その中に  \r\n**markdownフォルダ**を作成します。\r\n\r\nこんな感じに\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002F9MkedEP.png)\r\n\r\n後は**Markdownフォルダ**にMarkdownファイルを置いていきます。  \r\n\r\n今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。\r\n\r\n```markdown\r\n---\r\ntitle: Nuxt.jsの練習\r\ncreated_at: 2020-05-31\r\ntags:\r\n- JavaScript\r\n---\r\n# Hello World\r\n\r\n```\r\n\r\n# Markdownファイルの情報をJSONに変換するprocessmd\r\n\r\n## processmd入れます\r\n\r\n\r\n```console\r\nnpm install --save-dev processmd\r\n```\r\n\r\n## コマンド長いのでpackage.jsonに書き足します\r\n\r\n```json\r\n{\r\n  \"name\": \"nuxtblog\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"My cool Nuxt.js project\",\r\n  \"author\": \"takusan23\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"nuxt\",\r\n    \"build\": \"nuxt build\",\r\n    \"start\": \"nuxt start\",\r\n    \"generate\": \"nuxt generate\",\r\n    \"md\": \"processmd contents\u002Fposts\u002F**\u002F*.md --stdout --outputDir contents\u002Fposts\u002Fjson \u003E contents\u002Fposts\u002Fsummary.json\"\r\n  },\r\n  \"dependencies\": {\r\n    \"nuxt\": \"^2.0.0\",\r\n    \"element-ui\": \"^2.4.11\",\r\n    \"@nuxtjs\u002Fpwa\": \"^3.0.0-0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@nuxt\u002Ftypescript-build\": \"^0.6.0\",\r\n    \"processmd\": \"^4.5.0\"\r\n  }\r\n}\r\n```\r\n\r\nscriptsの中にmdの一行書き足せばおｋ\r\n```json\r\n\"md\": \"processmd contents\u002Fposts\u002F**\u002F*.md --stdout --outputDir contents\u002Fposts\u002Fjson \u003E contents\u002Fposts\u002Fsummary.json\"\r\n```\r\n\r\nあとはターミナルで以下叩きます。  \r\nこの作業は記事を追加したら毎回叩く必要があります。\r\n```console\r\nnpm run md\r\n```\r\n\r\n叩くとcontents\u002Fpostsにjsonってフォルダが出来てると思います。あとsummary.jsonも\r\n\r\n# Nuxt.jsで記事一覧用意する\r\n\r\nこっからはコピペです。いくぞおおおおお  \r\n**pages\u002Findex.vue**を開いて以下のJSをどーん\r\n```vue\r\n\u003Ctemplate\u003E\r\n  \u003Cdiv class=\"container\"\u003E\r\n    \u003Cdiv\u003E\r\n      \u003Cel-card class=\"box-card\" v-for=\"item in blogItems\" :key=\"item\"\u003E\r\n        \u003Cnuxt-link class=\"text item\" :to=\"`posts\u002F${item.fileName}`\"\u003E{{ item.title }}\u003C\u002Fnuxt-link\u003E\r\n      \u003C\u002Fel-card\u003E\r\n    \u003C\u002Fdiv\u003E\r\n  \u003C\u002Fdiv\u003E\r\n\u003C\u002Ftemplate\u003E\r\n\r\n\u003Cscript lang=\"js\"\u003E\r\nimport Vue from 'vue'\r\nimport { fileMap } from \"..\u002Fcontents\u002Fposts\u002Fsummary.json\";\r\n\r\nexport default {\r\n  data: () =\u003E {\r\n    return {\r\n      blogItems: []\r\n    };\r\n  },\r\n  created() {\r\n    \u002F\u002F キーを取り出す\r\n    Object.keys(fileMap).forEach(title =\u003E {\r\n      \u002F\u002F 記事一個ずつ取る\r\n      const blog = fileMap[title];\r\n      \u002F\u002F 名前\r\n      const name = blog.sourceBase.replace(\".md\", \"\");\r\n      blog.fileName = name;\r\n      this.blogItems.push(blog);\r\n    });\r\n  }\r\n};\r\n\u003C\u002Fscript\u003E\r\n```\r\n\r\nここではタイトルしか出てませんが、日付とかタグとかも出せると思います。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FLJF3l5H.png)\r\n\r\n\u003E localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）\r\n\r\n# 記事一覧ページを作る\r\n\r\n## 動的ルーティング # とは\r\nよくわからんけど静的サイトジェネレートに必要。  \r\nというわけで**nuxt.config.js**開いてね\r\n\r\n参考：https:\u002F\u002Fjmblog.jp\u002Fposts\u002F2018-01-18\u002Fbuild-a-blog-with-nuxtjs-and-markdown-2\u002F\r\n参考：https:\u002F\u002Fisoppp.com\u002Fnote\u002F2018-05-16\u002F3-nuxt-firebase-blog-markdown\u002F\r\n\r\n開いたらJS書き足していきます。\r\n\r\n```js\r\nconst { sourceFileArray } = require('.\u002Fcontents\u002Fposts\u002Fsummary.json');\r\n\r\n\u002F** パス生成 *\u002F\r\nconst sourceFileNameToUrl = filepath =\u003E {\r\n  const name = filepath.replace('contents\u002Fposts\u002Fmarkdown\u002F', '').replace('.md', '')\r\n  return `\u002Fposts\u002F${name}`\r\n}\r\n\r\nconst generateDynamicRoutes = callback =\u003E {\r\n  const routes = sourceFileArray.map(sourceFileName =\u003E {\r\n    return sourceFileNameToUrl(sourceFileName);\r\n  });\r\n  callback(null, routes);\r\n};\r\n\r\nexport default {\r\n\u002F\u002F 省略\r\n  generate: {\r\n    routes: generateDynamicRoutes\r\n  },\r\n}\r\n```\r\n\r\nsourceFileNameToUrl()関数は`posts\u002F${ファイル名}`の文字列を返す関数です。\r\n\r\nこうすることでURLが`posts\u002F{タイトル}`になるはずです。  \r\nですがこれだけではまだ生成できません。\r\n\r\n生成するには、  \r\n**pagesフォルダ**に**posts**フォルダを作成して、  \r\nその中に **_slug.vue** ファイルを作成します。\r\n\r\n![Imgur](https:\u002F\u002Fimgur.com\u002FDSJ9WSc.png)\r\n\r\n## _slug.vueの中身\r\n**_slug.vue**は記事の表示に使います。  \r\n\r\n```vue\r\n\u003Ctemplate\u003E\r\n  \u003Cdiv class=\"container\"\u003E\r\n    \u003Cdiv\u003E\r\n      \u003Cel-card class=\"box-card\"\u003E\r\n        \u003Cdiv\u003E{{(new Date(created_at).toLocaleDateString())}} 投稿\u003C\u002Fdiv\u003E\r\n        \u003Cdiv v-html=\"bodyHtml\"\u003E\u003C\u002Fdiv\u003E\r\n      \u003C\u002Fel-card\u003E\r\n    \u003C\u002Fdiv\u003E\r\n  \u003C\u002Fdiv\u003E\r\n\u003C\u002Ftemplate\u003E\r\n\r\n\u003Cscript\u003E\r\nimport { sourceFileArray } from \"..\u002F..\u002Fcontents\u002Fposts\u002Fsummary.json\";\r\n\r\nexport default {\r\n  \u002F\u002F 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\r\n  validate({ params }) {\r\n    return sourceFileArray.includes(\r\n      `contents\u002Fposts\u002Fmarkdown\u002F${params.slug}.md`\r\n    );\r\n  },\r\n  \u002F\u002F 各記事のJSONファイルを読み込んでる。\r\n  asyncData({ params }) {\r\n    return Object.assign(\r\n      {},\r\n      require(`~\u002Fcontents\u002Fposts\u002Fjson\u002F${params.slug}.json`),\r\n      { params }\r\n    );\r\n  },\r\n  mounted() {\r\n    \u002F\u002F DOM生成後\r\n  },\r\n  \u002F\u002F さあ？\r\n  head() {\r\n    const title = `${this.title}`;\r\n    const url = `posts\u002F${this.params.slug}\u002F`;\r\n    return {\r\n      title: title,\r\n      meta: [\r\n        { hid: \"og:url\", property: \"og:url\", content: url },\r\n        { hid: \"og:title\", property: \"og:title\", content: title }\r\n      ],\r\n      link: [{ rel: \"canonical\", href: url }]\r\n    };\r\n  }\r\n};\r\n\u003C\u002Fscript\u003E\r\n```\r\n\r\n記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FqbUf0P4.png)\r\n\r\n# おまけ 静的サイトジェネレートしてみる\r\n\r\n以下の一行をターミナルに入れます\r\n\r\n```console\r\nnpm run generate\r\n```\r\n\r\nこれで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。  \r\n今回は**Web Server for Chrome**が入ってたのでそれ使って見てみます。  \r\n\r\n`npm run generate`の出力先は**dist**になってるのでそれを指定してWeb鯖立てます。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FO6uBFod.png)\r\n\r\n以上です。  \r\n一応\u002Fposts\u002Ffirst\u002Fにアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002F74quEU3.png)\r\n\r\nPWAも入れてあるので試せる。\r\n\r\n# おまけ\r\nGitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。\r\n\r\n```js\r\nexport default {\r\n\u002F\u002F 省略\r\n  router: {\r\n    base: '\u002Fリポジトリ名\u002F'\r\n  },\r\n  generate: {\r\n    routes: generateDynamicRoutes,\r\n    dir: 'docs',\r\n  },\r\n}\r\n```\r\n\r\n# おわりに\r\n**nuxt.config.js**の`mode: 'spa'`ってSPAであってるの？\r\n静的サイトジェネレートの時は書いてなかったんだけど？\r\n\r\nソースコード：https:\u002F\u002Fgithub.com\u002Ftakusan23\u002FNuxtBlog",bodyHtml:"\u003Cp\u003E\u003Cstrong\u003ENuxt.js+processmd\u003C\u002Fstrong\u003Eでブログ作るよ\u003C\u002Fp\u003E\n\u003Ch1\u003E環境\u003C\u002Fh1\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003Eなまえ\u003C\u002Fth\u003E\n\u003Cth\u003Eあたい\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EOS\u003C\u002Ftd\u003E\n\u003Ctd\u003EWindows 10 Pro\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003ENode\u003C\u002Ftd\u003E\n\u003Ctd\u003E12.14.1\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Ch1\u003ENuxt.jsプロジェクト作成\u003C\u002Fh1\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Enpx create-nuxt-app nuxtblog\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eあとは好きな方を選んでいきます\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eprogramming language\n\u003Cul\u003E\n\u003Cli\u003ETypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EUI framework\n\u003Cul\u003E\n\u003Cli\u003EVuetifyがマテリアルデザイン（今回はElement使ってみる）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eあとは適当に（PWA入れといた）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E✨  Generating Nuxt.js project in nuxtblog\n? Project name nuxtblog\n? Project description My cool Nuxt.js project\n? Author name takusan23\n? Choose programming language TypeScript     \n? Choose the package manager Npm      \n? Choose UI framework Element\n? Choose custom server framework None (Recommended) \n? Choose the runtime for TypeScript Default\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\n? Choose linting tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n? Choose test framework None\n? Choose rendering mode Single Page App\n? Choose development tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eそしたら移動して、サーバー起動させます\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Ecd nuxt blog\nnpm run dev\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Ffsdnyw3.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003EMarkdownファイルの保存場所を作る\u003C\u002Fh1\u003E\n\u003Cp\u003Enuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に\u003Cbr\u003E\n\u003Cstrong\u003Econtentsフォルダ\u003C\u002Fstrong\u003Eを作り、その中に\u003Cbr\u003E\n\u003Cstrong\u003Epostsフォルダ\u003C\u002Fstrong\u003Eを作り、その中に\u003Cbr\u003E\n\u003Cstrong\u003Emarkdownフォルダ\u003C\u002Fstrong\u003Eを作成します。\u003C\u002Fp\u003E\n\u003Cp\u003Eこんな感じに\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F9MkedEP.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E後は\u003Cstrong\u003EMarkdownフォルダ\u003C\u002Fstrong\u003EにMarkdownファイルを置いていきます。\u003C\u002Fp\u003E\n\u003Cp\u003E今回は適当にこんなMarkdownファイル（名前：\u003Ca href=\"http:\u002F\u002Ffirst.md\"\u003Efirst.md\u003C\u002Fa\u003E）を入れます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E---\ntitle: Nuxt.jsの練習\ncreated_at: 2020-05-31\ntags:\n\u003Cspan class=\"hljs-section\"\u003E- JavaScript\n---\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-section\"\u003E# Hello World\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003EMarkdownファイルの情報をJSONに変換するprocessmd\u003C\u002Fh1\u003E\n\u003Ch2\u003Eprocessmd入れます\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Enpm install --save-dev processmd\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003Eコマンド長いのでpackage.jsonに書き足します\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E{\n  \u003Cspan class=\"hljs-attr\"\u003E\"name\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxtblog\"\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003E\"version\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"1.0.0\"\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003E\"description\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"My cool Nuxt.js project\"\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003E\"author\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"takusan23\"\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003E\"private\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003E\"scripts\"\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003E\"dev\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxt\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"build\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxt build\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxt start\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"generate\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxt generate\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"md\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"processmd contents\u002Fposts\u002F**\u002F*.md --stdout --outputDir contents\u002Fposts\u002Fjson &gt; contents\u002Fposts\u002Fsummary.json\"\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003E\"dependencies\"\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003E\"nuxt\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"^2.0.0\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"element-ui\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"^2.4.11\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"@nuxtjs\u002Fpwa\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"^3.0.0-0\"\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003E\"devDependencies\"\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003E\"@nuxt\u002Ftypescript-build\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"^0.6.0\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"processmd\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"^4.5.0\"\u003C\u002Fspan\u003E\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Escriptsの中にmdの一行書き足せばおｋ\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\"md\": \"processmd contents\u002Fposts\u002F**\u002F*.md --stdout --outputDir contents\u002Fposts\u002Fjson &gt; contents\u002Fposts\u002Fsummary.json\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eあとはターミナルで以下叩きます。\u003Cbr\u003E\nこの作業は記事を追加したら毎回叩く必要があります。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Enpm run md\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E叩くとcontents\u002Fpostsにjsonってフォルダが出来てると思います。あとsummary.jsonも\u003C\u002Fp\u003E\n\u003Ch1\u003ENuxt.jsで記事一覧用意する\u003C\u002Fh1\u003E\n\u003Cp\u003Eこっからはコピペです。いくぞおおおおお\u003Cbr\u003E\n\u003Cstrong\u003Epages\u002Findex.vue\u003C\u002Fstrong\u003Eを開いて以下のJSをどーん\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&lt;template&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div&gt;\n      &lt;el-card class=\"box-card\" v-for=\"item in blogItems\" :key=\"item\"&gt;\n        &lt;nuxt-link class=\"text item\" :to=\"`posts\u002F${item.fileName}`\"&gt;{{ item.title }}&lt;\u002Fnuxt-link&gt;\n      &lt;\u002Fel-card&gt;\n    &lt;\u002Fdiv&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script lang=\"js\"&gt;\nimport Vue from 'vue'\nimport { fileMap } from \"..\u002Fcontents\u002Fposts\u002Fsummary.json\";\n\nexport default {\n  data: () =&gt; {\n    return {\n      blogItems: []\n    };\n  },\n  created() {\n    \u002F\u002F キーを取り出す\n    Object.keys(fileMap).forEach(title =&gt; {\n      \u002F\u002F 記事一個ずつ取る\n      const blog = fileMap[title];\n      \u002F\u002F 名前\n      const name = blog.sourceBase.replace(\".md\", \"\");\n      blog.fileName = name;\n      this.blogItems.push(blog);\n    });\n  }\n};\n&lt;\u002Fscript&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eここではタイトルしか出てませんが、日付とかタグとかも出せると思います。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FLJF3l5H.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003Elocalhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch1\u003E記事一覧ページを作る\u003C\u002Fh1\u003E\n\u003Ch2\u003E動的ルーティング # とは\u003C\u002Fh2\u003E\n\u003Cp\u003Eよくわからんけど静的サイトジェネレートに必要。\u003Cbr\u003E\nというわけで\u003Cstrong\u003Enuxt.config.js\u003C\u002Fstrong\u003E開いてね\u003C\u002Fp\u003E\n\u003Cp\u003E参考：\u003Ca href=\"https:\u002F\u002Fjmblog.jp\u002Fposts\u002F2018-01-18\u002Fbuild-a-blog-with-nuxtjs-and-markdown-2\u002F\"\u003Ehttps:\u002F\u002Fjmblog.jp\u002Fposts\u002F2018-01-18\u002Fbuild-a-blog-with-nuxtjs-and-markdown-2\u002F\u003C\u002Fa\u003E\n参考：\u003Ca href=\"https:\u002F\u002Fisoppp.com\u002Fnote\u002F2018-05-16\u002F3-nuxt-firebase-blog-markdown\u002F\"\u003Ehttps:\u002F\u002Fisoppp.com\u002Fnote\u002F2018-05-16\u002F3-nuxt-firebase-blog-markdown\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E開いたらJS書き足していきます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { sourceFileArray } = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'.\u002Fcontents\u002Fposts\u002Fsummary.json'\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F** パス生成 *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E sourceFileNameToUrl = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Efilepath\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E name = filepath.replace(\u003Cspan class=\"hljs-string\"\u003E'contents\u002Fposts\u002Fmarkdown\u002F'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E''\u003C\u002Fspan\u003E).replace(\u003Cspan class=\"hljs-string\"\u003E'.md'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E''\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E`\u002Fposts\u002F\u003Cspan class=\"hljs-subst\"\u003E${name}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E generateDynamicRoutes = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ecallback\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E routes = sourceFileArray.map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EsourceFileName\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E sourceFileNameToUrl(sourceFileName);\n  });\n  callback(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E, routes);\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 省略\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Egenerate\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eroutes\u003C\u002Fspan\u003E: generateDynamicRoutes\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EsourceFileNameToUrl()関数は\u003Ccode\u003Eposts\u002F${ファイル名}\u003C\u002Fcode\u003Eの文字列を返す関数です。\u003C\u002Fp\u003E\n\u003Cp\u003EこうすることでURLが\u003Ccode\u003Eposts\u002F{タイトル}\u003C\u002Fcode\u003Eになるはずです。\u003Cbr\u003E\nですがこれだけではまだ生成できません。\u003C\u002Fp\u003E\n\u003Cp\u003E生成するには、\u003Cbr\u003E\n\u003Cstrong\u003Epagesフォルダ\u003C\u002Fstrong\u003Eに\u003Cstrong\u003Eposts\u003C\u002Fstrong\u003Eフォルダを作成して、\u003Cbr\u003E\nその中に \u003Cstrong\u003E_slug.vue\u003C\u002Fstrong\u003E ファイルを作成します。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fimgur.com\u002FDSJ9WSc.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E_slug.vueの中身\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cstrong\u003E_slug.vue\u003C\u002Fstrong\u003Eは記事の表示に使います。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&lt;template&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div&gt;\n      &lt;el-card class=\"box-card\"&gt;\n        &lt;div&gt;{{(new Date(created_at).toLocaleDateString())}} 投稿&lt;\u002Fdiv&gt;\n        &lt;div v-html=\"bodyHtml\"&gt;&lt;\u002Fdiv&gt;\n      &lt;\u002Fel-card&gt;\n    &lt;\u002Fdiv&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport { sourceFileArray } from \"..\u002F..\u002Fcontents\u002Fposts\u002Fsummary.json\";\n\nexport default {\n  \u002F\u002F 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\n  validate({ params }) {\n    return sourceFileArray.includes(\n      `contents\u002Fposts\u002Fmarkdown\u002F${params.slug}.md`\n    );\n  },\n  \u002F\u002F 各記事のJSONファイルを読み込んでる。\n  asyncData({ params }) {\n    return Object.assign(\n      {},\n      require(`~\u002Fcontents\u002Fposts\u002Fjson\u002F${params.slug}.json`),\n      { params }\n    );\n  },\n  mounted() {\n    \u002F\u002F DOM生成後\n  },\n  \u002F\u002F さあ？\n  head() {\n    const title = `${this.title}`;\n    const url = `posts\u002F${this.params.slug}\u002F`;\n    return {\n      title: title,\n      meta: [\n        { hid: \"og:url\", property: \"og:url\", content: url },\n        { hid: \"og:title\", property: \"og:title\", content: title }\n      ],\n      link: [{ rel: \"canonical\", href: url }]\n    };\n  }\n};\n&lt;\u002Fscript&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FqbUf0P4.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003Eおまけ 静的サイトジェネレートしてみる\u003C\u002Fh1\u003E\n\u003Cp\u003E以下の一行をターミナルに入れます\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Enpm run generate\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。\u003Cbr\u003E\n今回は\u003Cstrong\u003EWeb Server for Chrome\u003C\u002Fstrong\u003Eが入ってたのでそれ使って見てみます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm run generate\u003C\u002Fcode\u003Eの出力先は\u003Cstrong\u003Edist\u003C\u002Fstrong\u003Eになってるのでそれを指定してWeb鯖立てます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FO6uBFod.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E以上です。\u003Cbr\u003E\n一応\u002Fposts\u002Ffirst\u002Fにアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F74quEU3.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EPWAも入れてあるので試せる。\u003C\u002Fp\u003E\n\u003Ch1\u003Eおまけ\u003C\u002Fh1\u003E\n\u003Cp\u003EGitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 省略\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Erouter\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ebase\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'\u002Fリポジトリ名\u002F'\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Egenerate\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eroutes\u003C\u002Fspan\u003E: generateDynamicRoutes,\n    \u003Cspan class=\"hljs-attr\"\u003Edir\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'docs'\u003C\u002Fspan\u003E,\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003Eおわりに\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Cstrong\u003Enuxt.config.js\u003C\u002Fstrong\u003Eの\u003Ccode\u003Emode: 'spa'\u003C\u002Fcode\u003EってSPAであってるの？\n静的サイトジェネレートの時は書いてなかったんだけど？\u003C\u002Fp\u003E\n\u003Cp\u003Eソースコード：\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftakusan23\u002FNuxtBlog\"\u003Ehttps:\u002F\u002Fgithub.com\u002Ftakusan23\u002FNuxtBlog\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",dir:"contents\u002Fposts\u002Fjson",base:"first.json",ext:".json",sourceBase:"first.md",sourceExt:".md",params:{slug:"first"}}],fetch:[],mutations:void 0});