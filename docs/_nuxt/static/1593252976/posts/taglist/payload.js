__NUXT_JSONP__("/posts/taglist", {data:[{title:"タグのページ作った",created_at:"2020-06-03T00:00:00.000Z",tags:["その他","NuxtJS","自作ブログ","JavaScript"],bodyContent:"タグのページ作りました。  \r\n**まだタグ一覧は作ってませんが**、タグが含まれている記事の一覧表示ならできるようになりました\r\n\r\n試しにChipを押してみてね。  \r\n\r\n**あとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる**\r\n\r\n## 技術的な話\r\n\r\n`posts\u002Ftag\u002F自作ブログ\u002Findex.html` みたいなファイルが生成されるようになりました。  \r\n\r\n```js\r\n\u002F** タグが含まれている記事一覧のパス配列生成関数。 *\u002F\r\nconst generateTagPageRoutesList = () =\u003E {\r\n  \u002F\u002F 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す\r\n  const blogItems = Object.keys(postsJSON.fileMap).map(key =\u003E postsJSON.fileMap[key])\r\n  \u002F\u002F タグだけの配列を作る\r\n  const allTagItems = blogItems.map(blog =\u003E blog.tags).flat()\r\n  \u002F\u002F 被りを消す。new Set()でいいらしい\r\n  const tagList = [...new Set(allTagItems)]\r\n  \u002F\u002F パス生成。こんな感じの→ \u002Fposts\u002Ftag\u002F自作ブログ みたいな感じに\r\n  const pathList = tagList.map(tagName =\u003E `\u002Fposts\u002Ftag\u002F${tagName}`)\r\n  return pathList\r\n}\r\n\u002F\u002F 省略\r\n\u002F** 静的サイトジェネレート関数。配列(pages\u002Fとposts\u002F)くっつける *\u002F\r\nconst generateRoutes = callback =\u003E {\r\n  callback(null, [generateTagPageRoutesList()].flat())\r\n}\r\n```\r\n\r\nJavaScriptの配列、被りを消す方法にこんな方法があったんですね。  \r\n```js\r\nconsole.log([...new Set([1,2,1])]) \u002F\u002F [1,2]\r\n```\r\n\r\nちなみにKotlinだと`array()#distinct()`があります。超便利\r\n\r\n以上です（？）  \r\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。  \r\n\r\nあと2m確保とが無理じゃね？",bodyHtml:"\u003Cp\u003Eタグのページ作りました。\u003Cbr\u003E\n\u003Cstrong\u003Eまだタグ一覧は作ってませんが\u003C\u002Fstrong\u003E、タグが含まれている記事の一覧表示ならできるようになりました\u003C\u002Fp\u003E\n\u003Cp\u003E試しにChipを押してみてね。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Eあとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E技術的な話\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Eposts\u002Ftag\u002F自作ブログ\u002Findex.html\u003C\u002Fcode\u003E みたいなファイルが生成されるようになりました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F** タグが含まれている記事一覧のパス配列生成関数。 *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E generateTagPageRoutesList = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E blogItems = \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E.keys(postsJSON.fileMap).map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ekey\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E postsJSON.fileMap[key])\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F タグだけの配列を作る\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E allTagItems = blogItems.map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eblog\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E blog.tags).flat()\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 被りを消す。new Set()でいいらしい\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E tagList = [...new \u003Cspan class=\"hljs-built_in\"\u003ESet\u003C\u002Fspan\u003E(allTagItems)]\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F パス生成。こんな感じの→ \u002Fposts\u002Ftag\u002F自作ブログ みたいな感じに\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E pathList = tagList.map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EtagName\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E`\u002Fposts\u002Ftag\u002F\u003Cspan class=\"hljs-subst\"\u003E${tagName}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E pathList\n}\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 省略\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F** 静的サイトジェネレート関数。配列(pages\u002Fとposts\u002F)くっつける *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E generateRoutes = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ecallback\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  callback(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E, [generateTagPageRoutesList()].flat())\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EJavaScriptの配列、被りを消す方法にこんな方法があったんですね。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log([...new \u003Cspan class=\"hljs-built_in\"\u003ESet\u003C\u002Fspan\u003E([\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E])]) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F [1,2]\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EちなみにKotlinだと\u003Ccode\u003Earray()#distinct()\u003C\u002Fcode\u003Eがあります。超便利\u003C\u002Fp\u003E\n\u003Cp\u003E以上です（？）\u003Cbr\u003E\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。\u003C\u002Fp\u003E\n\u003Cp\u003Eあと2m確保とが無理じゃね？\u003C\u002Fp\u003E\n",dir:"contents\u002Fposts\u002Fjson",base:"taglist.json",ext:".json",sourceBase:"taglist.md",sourceExt:".md",params:{slug:"taglist"}}],fetch:[],mutations:void 0});