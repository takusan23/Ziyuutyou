__NUXT_JSONP__("/posts/android_sqlite_to_room", {data:[{title:"SQLiteの思い出をRoomへお引越しする",created_at:"2020-07-11T00:00:00.000Z",tags:["Android","Kotlin","Room"],bodyContent:"進路どーすっかな\r\n\r\n# 本題\r\n既存のAndroidアプリにデータベースを追加したいわけですが、これから作るならRoomをやっぱ使いたいわけですよ。  \r\nでもRoomとSQLite（旧式）が共存してるのなんか気持ち悪いので**めっちゃ面倒くさそうだけど**Roomへ移行しようというわけです。\r\n\r\n# 環境\r\n| なまえ  | あたい    |\r\n|---------|-----------|\r\n| Android | 11 Beta 2 |\r\n| 言語    | Kotlin    |\r\n\r\n# やること\r\nSQLite -\u003E Room\r\n\r\n# ライブラリを入れる\r\n## build.gradleを開いて\r\n以下のコードを足します。  \r\nファイルの一番上に`apply plugin: 'kotlin-kapt'`を書かないとエラー出ます。  \r\nあとついでにコルーチンも入れましょう。無くても`thread {}`使って別スレッドで扱えば使えますがコールバック地獄になるのでやめとこう\r\n\r\n```gradle\r\napply plugin: 'kotlin-kapt' \u002F\u002F 一番上に\r\n\r\ndependencies {\r\n\r\n    \u002F\u002F Room\r\n    def room_version = \"2.2.5\"\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    implementation \"androidx.room:room-ktx:$room_version\"\r\n    kapt \"androidx.room:room-compiler:$room_version\"\r\n    \r\n    \u002F\u002F Coroutines\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\r\n   \r\n    \u002F\u002F 省略...\r\n\r\n}\r\n```\r\n\r\n# なんでコルーチン\r\n\r\n**RoomはUIスレッドでは使えません。**  \r\nだからコルーチンが必要だったのですね。\r\n\r\n# Roomの構成\r\nRoomさんは3つのコンポーネントで成り立ってます。\r\n\r\n- RoomDatabase\r\n    - データベースの中心的な役割\r\n    - 説明がめんどいし何するのかよくわかっていない。\r\n    - DAOにはこいつが必要\r\n- Entity\r\n    - テーブル。Excelだと一番上の行。\r\n    - データベースの中身を定義する（主キーとか）\r\n- DAO\r\n    - データベースへアクセスする際に使う関数を定義する\r\n    - クエリも入力補助が付いたので間違いが減った（＋実行前に間違いが分かるようになってる）\r\n\r\n# 移行する\r\n流石にちょっと怖くね？\r\n\r\n## Entityを作成する\r\n今回はファイル名を`CommentCollectionEntity.kt`とします。  \r\n\r\n### 例\r\n\r\nSQLiteHelperがこうなっているとして\r\n\r\n```kotlin\r\n\u002F\u002F データーベース名\r\nprivate val DATABASE_NAME = \"CommentCollection.db\"\r\nprivate val TABLE_NAME = \"comment_collection_db\"\r\nprivate val DESCRIPTION = \"description\"\r\nprivate val YOMI = \"yomi\"\r\nprivate val COMMENT = \"comment\"\r\nprivate val _ID = \"_id\"\r\n\u002F\u002F , を付け忘れるとエラー\r\nprivate val SQL_CREATE_ENTRIES = \"CREATE TABLE \" + TABLE_NAME + \" (\" +\r\n        _ID + \" INTEGER PRIMARY KEY,\" +\r\n        COMMENT + \" TEXT ,\" +\r\n        YOMI + \" TEXT ,\" +\r\n        DESCRIPTION + \" TEXT\" +\r\n        \")\"\r\n```\r\n\r\nEntityはこうなります（例がクソわかりにくい。**まるで教科書の例題の解き方が参考にならない問題みたい**）\r\n\r\n```kotlin\r\n@Entity(tableName = \"comment_collection_db\")\r\ndata class CommentCollectionEntity(\r\n    @ColumnInfo(name = \"_id\") @PrimaryKey(autoGenerate = true) val id: Int = 0,\r\n    @ColumnInfo(name = \"comment\") val comment: String,\r\n    @ColumnInfo(name = \"yomi\") val yomi: String,\r\n    @ColumnInfo(name = \"description\") val description: String\r\n)\r\n```\r\n\r\n#### Entity書くときに注意しないといけないこと\r\n- `@Entity(tableName = \"\")`を書かないとだめ。\r\n    - `CREATE TABLE {ここ} `の値ですね。忘れそう\r\n- カラムと変数名が同じじゃない場合は`@ColumnInfo`を使う\r\n- **実はnullを許容するように書くと移行のときだけ楽になる**\r\n    - `Migrationを書く`の工程がほぼなくなり楽になりますが、使うときに毎回nullの可能性がある値を使う羽目になるので今回は**null絶対許さん**方針で行きます。\r\n    - nullを許容する場合は`String?`や`Int?`のように最後に`?`をつければいいですが**今回はつけません**。\r\n\r\n### DAOを書く\r\nデータベースへアクセスするする際に使う関数を定義します。  \r\nクエリもここに書きます。  \r\nここでは一般的に使いそうな動作を例として置いとくので、各自Entityクラス名等を書き換えてください。\r\n\r\nファイル名は`CommentCollectionDAO.kt`で\r\n\r\n```kotlin\r\n\u002F**\r\n * データベースへアクセスするときに使う関数を定義する\r\n * *\u002F\r\n@Dao\r\ninterface CommentCollectionDAO {\r\n    \u002F** 全データ取得 *\u002F\r\n    @Query(\"SELECT * FROM comment_collection_db\")\r\n    fun getAll(): List\u003CCommentCollectionEntity\u003E\r\n\r\n    \u002F** データ更新 *\u002F\r\n    @Update\r\n    fun update(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    \u002F** データ追加 *\u002F\r\n    @Insert\r\n    fun insert(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    \u002F** データ削除 *\u002F\r\n    @Delete\r\n    fun delete(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    \u002F** データをIDを使って検索 *\u002F\r\n    @Query(\"SELECT * FROM comment_collection_db WHERE _id = :id\")\r\n    fun findById(id: Int): CommentCollectionEntity\r\n}\r\n```\r\n\r\nこれを書く際も入力補助が聞くので間違いが減ります（この記事二回目の発言）\r\n\r\n#### 注意点\r\nなくない？\r\n\r\n### Database\r\n中心的な役割を持ちます。  \r\nファイル名は`CommentCollectionDB.kt`で\r\n\r\n```kotlin\r\n\u002F**\r\n * コメントコレクションのデータベース。\r\n * SQLiteから移行する場合はバージョンを上げる必要がある\r\n * *\u002F\r\n@Database(entities = [CommentCollectionEntity::class], version = 2)\r\nabstract class CommentCollectionDB : RoomDatabase() {\r\n    abstract fun commentCollectionDAO(): CommentCollectionDAO\r\n}\r\n```\r\n\r\n#### 注意点\r\n- バージョンを上げないといけないそうです。\r\n\r\n## データベースへアクセス\r\nデータベースを使うときにバージョンを上げる処理を書きます。  \r\n\r\n```kotlin\r\n\u002F\u002F データベース初期化\r\nval commentCollectionDB = Room.databaseBuilder(this, CommentCollectionDB::class.java, \"CommentCollection.db\")\r\n    .addMigrations(object : Migration(1, 2) {\r\n        override fun migrate(database: SupportSQLiteDatabase) {\r\n        }\r\n    })\r\n    .build()\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    \u002F\u002F コルーチン\r\n    withContext(Dispatchers.IO) {\r\n        \u002F\u002F データベースから値を取る\r\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { data -\u003E\r\n            println(data.comment)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nまあこれじゃ動かないんですけどね。  \r\nそのための **addMigrations** があるので使っていきます。\r\n\r\n### なんで？動かないの？\r\n実はEntityでnullを許容すればこの問題は消えます。  \r\n```kotlin\r\n@ColumnInfo(name = \"comment\") val comment: String? \u002F\u002F null ok!\r\n```\r\nしかしnullを許容すると使うときに面倒くさくなります（この例だと`comment?.length`みたいに?付けないといけなくなる）\r\n\r\nこの問題はSQLiteとRoomとでnullを許すかどうかで問題が発生しています。\r\n- **SQLiteくん**\r\n    - null？良いんじゃね？\r\n- **Roomくん**\r\n    - `Entity`がnullを許してくれない；；\r\n    - よし落とすか←いまここ\r\n\r\nちなみに出力されたエラーはこちら。\r\n```js\r\nExpected:\r\n    TableInfo{name='comment_collection_db', columns={description=Column{name='description', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, comment=Column{name='comment', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, yomi=Column{name='yomi', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, _id=Column{name='_id', type='INTEGER', affinity='3', notNull=true, primaryKeyPosition=1, defaultValue='null'}}, foreignKeys=[], indices=[]}\r\nFound:\r\n    TableInfo{name='comment_collection_db', columns={description=Column{name='description', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, comment=Column{name='comment', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, yomi=Column{name='yomi', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, _id=Column{name='_id', type='INTEGER', affinity='3', notNull=false, primaryKeyPosition=1, defaultValue='null'}}, foreignKeys=[], indices=[]}\r\n```\r\n\r\nよく見ると上の`Expected`の方の`notNull`は`true(null良いよ)`ですが、  \r\n`Found(今回作ったEntity)`は`notNull`が`false(nullだめだよ)`ってことで中身が噛み合わず例外が発生しています。\r\n\r\n## Migration\r\nnullを許容 から nullを許さん に変更したいのですが、残念ながら変更するにはデータベースを作り直す必要があるそうです。  \r\n\r\nまあまあ面倒くさい。やることは以下の4つ\r\n- 新しくデータベースを作成する\r\n    - 今までのデータベースにあったカラムを全部書く\r\n- 新しく作ったデータベースへデータを移す\r\n- 古いデータベースを消す\r\n- 新しく作ったデータベースの名前を古いデータベースの名前に変更する\r\n\r\nこれをKotlinで書くとこうなります。\r\n\r\n```kotlin\r\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n    \u002F\u002F SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\r\n    database.execSQL(\r\n        \"\"\"\r\n        CREATE TABLE comment_collection_db_tmp (\r\n          _id INTEGER NOT NULL PRIMARY KEY, \r\n          comment TEXT NOT NULL,\r\n          yomi TEXT NOT NULL,\r\n          description TEXT NOT NULL\r\n        )\r\n        \"\"\"\r\n    )\r\n    \u002F\u002F 移行後のデータベースへデータを移す\r\n    database.execSQL(\r\n        \"\"\"\r\n        INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\r\n        SELECT _id, comment, yomi, description FROM comment_collection_db\r\n        \"\"\"\r\n    )\r\n    \u002F\u002F 前あったデータベースを消す\r\n    database.execSQL(\"DROP TABLE comment_collection_db\")\r\n    \u002F\u002F 移行後のデータベースの名前を移行前と同じにして移行完了\r\n    database.execSQL(\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\")\r\n}\r\n```\r\n\r\n全部くっつけるとこう\r\n\r\n```kotlin\r\n\u002F\u002F データベース初期化\r\nval commentCollectionDB = Room.databaseBuilder(this, CommentCollectionDB::class.java, \"CommentCollection.db\")\r\n    .addMigrations(object : Migration(1, 2) {\r\n        override fun migrate(database: SupportSQLiteDatabase) {\r\n            \u002F\u002F SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\r\n            database.execSQL(\r\n                \"\"\"\r\n                CREATE TABLE comment_collection_db_tmp (\r\n                  _id INTEGER NOT NULL PRIMARY KEY, \r\n                  comment TEXT NOT NULL,\r\n                  yomi TEXT NOT NULL,\r\n                  description TEXT NOT NULL\r\n                )\r\n                \"\"\"\r\n            )\r\n            \u002F\u002F 移行後のデータベースへデータを移す\r\n            database.execSQL(\r\n                \"\"\"\r\n                INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\r\n                SELECT _id, comment, yomi, description FROM comment_collection_db\r\n                \"\"\"\r\n            )\r\n            \u002F\u002F 前あったデータベースを消す\r\n            database.execSQL(\"DROP TABLE comment_collection_db\")\r\n            \u002F\u002F 移行後のデータベースの名前を移行前と同じにして移行完了\r\n            database.execSQL(\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\")\r\n        }\r\n    })\r\n    .build()\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    \u002F\u002F コルーチン\r\n    withContext(Dispatchers.IO) {\r\n        \u002F\u002F データベースから値を取る\r\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { data -\u003E\r\n            println(data.comment)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n以上です。  \r\n\r\n# 追加する方法\r\nSQLite時代の`ContentValues`よりずっとわかりやすい。\r\n```kotlin\r\nGlobalScope.launch(Dispatchers.Main) { \r\n    withContext(Dispatchers.IO){\r\n        val commentCollectionEntity = CommentCollectionEntity(comment = \"comment\", yomi = \"yomi\", description = \"\")\r\n        commentCollectionDB.commentCollectionDAO().insert(commentCollectionEntity)\r\n    }\r\n}\r\n```\r\n\r\n# これ今まで通りSQLiteOpenHelper経由でアクセスするとどうなるの？\r\n\r\n```terminal\r\nandroid.database.sqlite.SQLiteException: Can't downgrade database from version 2 to 1\r\n```\r\n\r\nバージョン下げんなって怒られた。\r\n\r\n# おわりに\r\nカラムが縦か横かわからん時がよくあるのでその時は**TweetDeckがマルチカラム**だってことを思い出してあ～横並びのことか～って思い出すようにしています。\r\n\r\n作らないと行けないファイルが多くて初見さんは大変そうだと思った（こなみ）\r\n\r\n# 参考にしました\r\nhttps:\u002F\u002Fdeveloper.android.com\u002Ftraining\u002Fdata-storage\u002Froom\u002Fmigrating-db-versions  \r\nhttps:\u002F\u002Fmedium.com\u002F@manuelvicnt\u002Fandroid-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9  \r\nhttps:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F47562157\u002Fandroid-room-migration-null-error  \r\nhttps:\u002F\u002Fqiita.com\u002Farara_tepi\u002Fitems\u002F7267418ca4b6bd65d744#notnull%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B",bodyHtml:"\u003Cp\u003E進路どーすっかな\u003C\u002Fp\u003E\n\u003Ch1\u003E本題\u003C\u002Fh1\u003E\n\u003Cp\u003E既存のAndroidアプリにデータベースを追加したいわけですが、これから作るならRoomをやっぱ使いたいわけですよ。\u003Cbr\u003E\nでもRoomとSQLite（旧式）が共存してるのなんか気持ち悪いので\u003Cstrong\u003Eめっちゃ面倒くさそうだけど\u003C\u002Fstrong\u003ERoomへ移行しようというわけです。\u003C\u002Fp\u003E\n\u003Ch1\u003E環境\u003C\u002Fh1\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003Eなまえ\u003C\u002Fth\u003E\n\u003Cth\u003Eあたい\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EAndroid\u003C\u002Ftd\u003E\n\u003Ctd\u003E11 Beta 2\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E言語\u003C\u002Ftd\u003E\n\u003Ctd\u003EKotlin\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Ch1\u003Eやること\u003C\u002Fh1\u003E\n\u003Cp\u003ESQLite -&gt; Room\u003C\u002Fp\u003E\n\u003Ch1\u003Eライブラリを入れる\u003C\u002Fh1\u003E\n\u003Ch2\u003Ebuild.gradleを開いて\u003C\u002Fh2\u003E\n\u003Cp\u003E以下のコードを足します。\u003Cbr\u003E\nファイルの一番上に\u003Ccode\u003Eapply plugin: 'kotlin-kapt'\u003C\u002Fcode\u003Eを書かないとエラー出ます。\u003Cbr\u003E\nあとついでにコルーチンも入れましょう。無くても\u003Ccode\u003Ethread {}\u003C\u002Fcode\u003E使って別スレッドで扱えば使えますがコールバック地獄になるのでやめとこう\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Eapply plugin: \u003Cspan class=\"hljs-string\"\u003E'kotlin-kapt'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 一番上に\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Edependencies\u003C\u002Fspan\u003E {\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Room\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Edef\u003C\u002Fspan\u003E room_version = \u003Cspan class=\"hljs-string\"\u003E\"2.2.5\"\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"androidx.room:room-runtime:$room_version\"\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"androidx.room:room-ktx:$room_version\"\u003C\u002Fspan\u003E\n    kapt \u003Cspan class=\"hljs-string\"\u003E\"androidx.room:room-compiler:$room_version\"\u003C\u002Fspan\u003E\n    \n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Coroutines\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\u003C\u002Fspan\u003E\n   \n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 省略...\u003C\u002Fspan\u003E\n\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003Eなんでコルーチン\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Cstrong\u003ERoomはUIスレッドでは使えません。\u003C\u002Fstrong\u003E\u003Cbr\u003E\nだからコルーチンが必要だったのですね。\u003C\u002Fp\u003E\n\u003Ch1\u003ERoomの構成\u003C\u002Fh1\u003E\n\u003Cp\u003ERoomさんは3つのコンポーネントで成り立ってます。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ERoomDatabase\n\u003Cul\u003E\n\u003Cli\u003Eデータベースの中心的な役割\u003C\u002Fli\u003E\n\u003Cli\u003E説明がめんどいし何するのかよくわかっていない。\u003C\u002Fli\u003E\n\u003Cli\u003EDAOにはこいつが必要\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EEntity\n\u003Cul\u003E\n\u003Cli\u003Eテーブル。Excelだと一番上の行。\u003C\u002Fli\u003E\n\u003Cli\u003Eデータベースの中身を定義する（主キーとか）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EDAO\n\u003Cul\u003E\n\u003Cli\u003Eデータベースへアクセスする際に使う関数を定義する\u003C\u002Fli\u003E\n\u003Cli\u003Eクエリも入力補助が付いたので間違いが減った（＋実行前に間違いが分かるようになってる）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch1\u003E移行する\u003C\u002Fh1\u003E\n\u003Cp\u003E流石にちょっと怖くね？\u003C\u002Fp\u003E\n\u003Ch2\u003EEntityを作成する\u003C\u002Fh2\u003E\n\u003Cp\u003E今回はファイル名を\u003Ccode\u003ECommentCollectionEntity.kt\u003C\u002Fcode\u003Eとします。\u003C\u002Fp\u003E\n\u003Ch3\u003E例\u003C\u002Fh3\u003E\n\u003Cp\u003ESQLiteHelperがこうなっているとして\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F データーベース名\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E DATABASE_NAME = \u003Cspan class=\"hljs-string\"\u003E\"CommentCollection.db\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E TABLE_NAME = \u003Cspan class=\"hljs-string\"\u003E\"comment_collection_db\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E DESCRIPTION = \u003Cspan class=\"hljs-string\"\u003E\"description\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E YOMI = \u003Cspan class=\"hljs-string\"\u003E\"yomi\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E COMMENT = \u003Cspan class=\"hljs-string\"\u003E\"comment\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E _ID = \u003Cspan class=\"hljs-string\"\u003E\"_id\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F , を付け忘れるとエラー\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E SQL_CREATE_ENTRIES = \u003Cspan class=\"hljs-string\"\u003E\"CREATE TABLE \"\u003C\u002Fspan\u003E + TABLE_NAME + \u003Cspan class=\"hljs-string\"\u003E\" (\"\u003C\u002Fspan\u003E +\n        _ID + \u003Cspan class=\"hljs-string\"\u003E\" INTEGER PRIMARY KEY,\"\u003C\u002Fspan\u003E +\n        COMMENT + \u003Cspan class=\"hljs-string\"\u003E\" TEXT ,\"\u003C\u002Fspan\u003E +\n        YOMI + \u003Cspan class=\"hljs-string\"\u003E\" TEXT ,\"\u003C\u002Fspan\u003E +\n        DESCRIPTION + \u003Cspan class=\"hljs-string\"\u003E\" TEXT\"\u003C\u002Fspan\u003E +\n        \u003Cspan class=\"hljs-string\"\u003E\")\"\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EEntityはこうなります（例がクソわかりにくい。\u003Cstrong\u003Eまるで教科書の例題の解き方が参考にならない問題みたい\u003C\u002Fstrong\u003E）\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E@Entity(tableName = \u003Cspan class=\"hljs-meta-string\"\u003E\"comment_collection_db\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Edata\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECommentCollectionEntity\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(\n    \u003Cspan class=\"hljs-meta\"\u003E@ColumnInfo(name = \u003Cspan class=\"hljs-meta-string\"\u003E\"_id\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-meta\"\u003E@PrimaryKey(autoGenerate = true)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E id: \u003Cspan class=\"hljs-built_in\"\u003EInt\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-meta\"\u003E@ColumnInfo(name = \u003Cspan class=\"hljs-meta-string\"\u003E\"comment\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E comment: String,\n    \u003Cspan class=\"hljs-meta\"\u003E@ColumnInfo(name = \u003Cspan class=\"hljs-meta-string\"\u003E\"yomi\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E yomi: String,\n    \u003Cspan class=\"hljs-meta\"\u003E@ColumnInfo(name = \u003Cspan class=\"hljs-meta-string\"\u003E\"description\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E description: String\n)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003EEntity書くときに注意しないといけないこと\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E@Entity(tableName = &quot;&quot;)\u003C\u002Fcode\u003Eを書かないとだめ。\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003ECREATE TABLE {ここ} \u003C\u002Fcode\u003Eの値ですね。忘れそう\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eカラムと変数名が同じじゃない場合は\u003Ccode\u003E@ColumnInfo\u003C\u002Fcode\u003Eを使う\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E実はnullを許容するように書くと移行のときだけ楽になる\u003C\u002Fstrong\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EMigrationを書く\u003C\u002Fcode\u003Eの工程がほぼなくなり楽になりますが、使うときに毎回nullの可能性がある値を使う羽目になるので今回は\u003Cstrong\u003Enull絶対許さん\u003C\u002Fstrong\u003E方針で行きます。\u003C\u002Fli\u003E\n\u003Cli\u003Enullを許容する場合は\u003Ccode\u003EString?\u003C\u002Fcode\u003Eや\u003Ccode\u003EInt?\u003C\u002Fcode\u003Eのように最後に\u003Ccode\u003E?\u003C\u002Fcode\u003Eをつければいいですが\u003Cstrong\u003E今回はつけません\u003C\u002Fstrong\u003E。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EDAOを書く\u003C\u002Fh3\u003E\n\u003Cp\u003Eデータベースへアクセスするする際に使う関数を定義します。\u003Cbr\u003E\nクエリもここに書きます。\u003Cbr\u003E\nここでは一般的に使いそうな動作を例として置いとくので、各自Entityクラス名等を書き換えてください。\u003C\u002Fp\u003E\n\u003Cp\u003Eファイル名は\u003Ccode\u003ECommentCollectionDAO.kt\u003C\u002Fcode\u003Eで\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F**\n * データベースへアクセスするときに使う関数を定義する\n * *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@Dao\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECommentCollectionDAO\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F** 全データ取得 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E@Query(\u003Cspan class=\"hljs-meta-string\"\u003E\"SELECT * FROM comment_collection_db\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EgetAll\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E: List&lt;CommentCollectionEntity&gt;\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F** データ更新 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E@Update\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eupdate\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(commentCollectionEntity: \u003Cspan class=\"hljs-type\"\u003ECommentCollectionEntity\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F** データ追加 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E@Insert\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Einsert\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(commentCollectionEntity: \u003Cspan class=\"hljs-type\"\u003ECommentCollectionEntity\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F** データ削除 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E@Delete\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Edelete\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(commentCollectionEntity: \u003Cspan class=\"hljs-type\"\u003ECommentCollectionEntity\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F** データをIDを使って検索 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E@Query(\u003Cspan class=\"hljs-meta-string\"\u003E\"SELECT * FROM comment_collection_db WHERE _id = :id\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EfindById\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(id: \u003Cspan class=\"hljs-type\"\u003EInt\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E: CommentCollectionEntity\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれを書く際も入力補助が聞くので間違いが減ります（この記事二回目の発言）\u003C\u002Fp\u003E\n\u003Ch4\u003E注意点\u003C\u002Fh4\u003E\n\u003Cp\u003Eなくない？\u003C\u002Fp\u003E\n\u003Ch3\u003EDatabase\u003C\u002Fh3\u003E\n\u003Cp\u003E中心的な役割を持ちます。\u003Cbr\u003E\nファイル名は\u003Ccode\u003ECommentCollectionDB.kt\u003C\u002Fcode\u003Eで\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F**\n * コメントコレクションのデータベース。\n * SQLiteから移行する場合はバージョンを上げる必要がある\n * *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@Database(entities = [CommentCollectionEntity::class], version = 2)\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eabstract\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECommentCollectionDB\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-type\"\u003ERoomDatabase\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E() {\n    \u003Cspan class=\"hljs-keyword\"\u003Eabstract\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EcommentCollectionDAO\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E: CommentCollectionDAO\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003E注意点\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003Eバージョンを上げないといけないそうです。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003Eデータベースへアクセス\u003C\u002Fh2\u003E\n\u003Cp\u003Eデータベースを使うときにバージョンを上げる処理を書きます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F データベース初期化\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E commentCollectionDB = Room.databaseBuilder(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E, CommentCollectionDB::\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title\"\u003Ejava\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-type\"\u003E\"CommentCollection.db\")\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n    .addMigrations(\u003Cspan class=\"hljs-keyword\"\u003Eobject\u003C\u002Fspan\u003E : Migration(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Emigrate\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(database: \u003Cspan class=\"hljs-type\"\u003ESupportSQLiteDatabase\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n        }\n    })\n    .build()\nGlobalScope.launch(Dispatchers.Main) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F コルーチン\u003C\u002Fspan\u003E\n    withContext(Dispatchers.IO) {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F データベースから値を取る\u003C\u002Fspan\u003E\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { \u003Cspan class=\"hljs-keyword\"\u003Edata\u003C\u002Fspan\u003E -&gt;\n            println(\u003Cspan class=\"hljs-keyword\"\u003Edata\u003C\u002Fspan\u003E.comment)\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eまあこれじゃ動かないんですけどね。\u003Cbr\u003E\nそのための \u003Cstrong\u003EaddMigrations\u003C\u002Fstrong\u003E があるので使っていきます。\u003C\u002Fp\u003E\n\u003Ch3\u003Eなんで？動かないの？\u003C\u002Fh3\u003E\n\u003Cp\u003E実はEntityでnullを許容すればこの問題は消えます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E@ColumnInfo(name = \u003Cspan class=\"hljs-meta-string\"\u003E\"comment\"\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E comment: String? \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F null ok!\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eしかしnullを許容すると使うときに面倒くさくなります（この例だと\u003Ccode\u003Ecomment?.length\u003C\u002Fcode\u003Eみたいに?付けないといけなくなる）\u003C\u002Fp\u003E\n\u003Cp\u003Eこの問題はSQLiteとRoomとでnullを許すかどうかで問題が発生しています。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003ESQLiteくん\u003C\u002Fstrong\u003E\n\u003Cul\u003E\n\u003Cli\u003Enull？良いんじゃね？\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003ERoomくん\u003C\u002Fstrong\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EEntity\u003C\u002Fcode\u003Eがnullを許してくれない；；\u003C\u002Fli\u003E\n\u003Cli\u003Eよし落とすか←いまここ\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eちなみに出力されたエラーはこちら。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003EExpected:\n    TableInfo{name=\u003Cspan class=\"hljs-string\"\u003E'comment_collection_db'\u003C\u002Fspan\u003E, columns={description=Column{name=\u003Cspan class=\"hljs-string\"\u003E'description'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, comment=Column{name=\u003Cspan class=\"hljs-string\"\u003E'comment'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, yomi=Column{name=\u003Cspan class=\"hljs-string\"\u003E'yomi'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, _id=Column{name=\u003Cspan class=\"hljs-string\"\u003E'_id'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'INTEGER'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'3'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}}, foreignKeys=[], indices=[]}\n\u003Cspan class=\"hljs-attr\"\u003EFound\u003C\u002Fspan\u003E:\n    TableInfo{name=\u003Cspan class=\"hljs-string\"\u003E'comment_collection_db'\u003C\u002Fspan\u003E, columns={description=Column{name=\u003Cspan class=\"hljs-string\"\u003E'description'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, comment=Column{name=\u003Cspan class=\"hljs-string\"\u003E'comment'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, yomi=Column{name=\u003Cspan class=\"hljs-string\"\u003E'yomi'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'TEXT'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'2'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}, _id=Column{name=\u003Cspan class=\"hljs-string\"\u003E'_id'\u003C\u002Fspan\u003E, type=\u003Cspan class=\"hljs-string\"\u003E'INTEGER'\u003C\u002Fspan\u003E, affinity=\u003Cspan class=\"hljs-string\"\u003E'3'\u003C\u002Fspan\u003E, notNull=\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E, primaryKeyPosition=\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, defaultValue=\u003Cspan class=\"hljs-string\"\u003E'null'\u003C\u002Fspan\u003E}}, foreignKeys=[], indices=[]}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eよく見ると上の\u003Ccode\u003EExpected\u003C\u002Fcode\u003Eの方の\u003Ccode\u003EnotNull\u003C\u002Fcode\u003Eは\u003Ccode\u003Etrue(null良いよ)\u003C\u002Fcode\u003Eですが、\u003Cbr\u003E\n\u003Ccode\u003EFound(今回作ったEntity)\u003C\u002Fcode\u003Eは\u003Ccode\u003EnotNull\u003C\u002Fcode\u003Eが\u003Ccode\u003Efalse(nullだめだよ)\u003C\u002Fcode\u003Eってことで中身が噛み合わず例外が発生しています。\u003C\u002Fp\u003E\n\u003Ch2\u003EMigration\u003C\u002Fh2\u003E\n\u003Cp\u003Enullを許容 から nullを許さん に変更したいのですが、残念ながら変更するにはデータベースを作り直す必要があるそうです。\u003C\u002Fp\u003E\n\u003Cp\u003Eまあまあ面倒くさい。やることは以下の4つ\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E新しくデータベースを作成する\n\u003Cul\u003E\n\u003Cli\u003E今までのデータベースにあったカラムを全部書く\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E新しく作ったデータベースへデータを移す\u003C\u002Fli\u003E\n\u003Cli\u003E古いデータベースを消す\u003C\u002Fli\u003E\n\u003Cli\u003E新しく作ったデータベースの名前を古いデータベースの名前に変更する\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EこれをKotlinで書くとこうなります。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Emigrate\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(database: \u003Cspan class=\"hljs-type\"\u003ESupportSQLiteDatabase\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\u003C\u002Fspan\u003E\n    database.execSQL(\n        \u003Cspan class=\"hljs-string\"\u003E\"\"\"\n        CREATE TABLE comment_collection_db_tmp (\n          _id INTEGER NOT NULL PRIMARY KEY, \n          comment TEXT NOT NULL,\n          yomi TEXT NOT NULL,\n          description TEXT NOT NULL\n        )\n        \"\"\"\u003C\u002Fspan\u003E\n    )\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 移行後のデータベースへデータを移す\u003C\u002Fspan\u003E\n    database.execSQL(\n        \u003Cspan class=\"hljs-string\"\u003E\"\"\"\n        INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\n        SELECT _id, comment, yomi, description FROM comment_collection_db\n        \"\"\"\u003C\u002Fspan\u003E\n    )\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 前あったデータベースを消す\u003C\u002Fspan\u003E\n    database.execSQL(\u003Cspan class=\"hljs-string\"\u003E\"DROP TABLE comment_collection_db\"\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 移行後のデータベースの名前を移行前と同じにして移行完了\u003C\u002Fspan\u003E\n    database.execSQL(\u003Cspan class=\"hljs-string\"\u003E\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\"\u003C\u002Fspan\u003E)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E全部くっつけるとこう\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F データベース初期化\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E commentCollectionDB = Room.databaseBuilder(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E, CommentCollectionDB::\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title\"\u003Ejava\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-type\"\u003E\"CommentCollection.db\")\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n    .addMigrations(\u003Cspan class=\"hljs-keyword\"\u003Eobject\u003C\u002Fspan\u003E : Migration(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Emigrate\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(database: \u003Cspan class=\"hljs-type\"\u003ESupportSQLiteDatabase\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\u003C\u002Fspan\u003E\n            database.execSQL(\n                \u003Cspan class=\"hljs-string\"\u003E\"\"\"\n                CREATE TABLE comment_collection_db_tmp (\n                  _id INTEGER NOT NULL PRIMARY KEY, \n                  comment TEXT NOT NULL,\n                  yomi TEXT NOT NULL,\n                  description TEXT NOT NULL\n                )\n                \"\"\"\u003C\u002Fspan\u003E\n            )\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 移行後のデータベースへデータを移す\u003C\u002Fspan\u003E\n            database.execSQL(\n                \u003Cspan class=\"hljs-string\"\u003E\"\"\"\n                INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\n                SELECT _id, comment, yomi, description FROM comment_collection_db\n                \"\"\"\u003C\u002Fspan\u003E\n            )\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 前あったデータベースを消す\u003C\u002Fspan\u003E\n            database.execSQL(\u003Cspan class=\"hljs-string\"\u003E\"DROP TABLE comment_collection_db\"\u003C\u002Fspan\u003E)\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 移行後のデータベースの名前を移行前と同じにして移行完了\u003C\u002Fspan\u003E\n            database.execSQL(\u003Cspan class=\"hljs-string\"\u003E\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\"\u003C\u002Fspan\u003E)\n        }\n    })\n    .build()\nGlobalScope.launch(Dispatchers.Main) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F コルーチン\u003C\u002Fspan\u003E\n    withContext(Dispatchers.IO) {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F データベースから値を取る\u003C\u002Fspan\u003E\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { \u003Cspan class=\"hljs-keyword\"\u003Edata\u003C\u002Fspan\u003E -&gt;\n            println(\u003Cspan class=\"hljs-keyword\"\u003Edata\u003C\u002Fspan\u003E.comment)\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E以上です。\u003C\u002Fp\u003E\n\u003Ch1\u003E追加する方法\u003C\u002Fh1\u003E\n\u003Cp\u003ESQLite時代の\u003Ccode\u003EContentValues\u003C\u002Fcode\u003Eよりずっとわかりやすい。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003EGlobalScope.launch(Dispatchers.Main) { \n    withContext(Dispatchers.IO){\n        \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E commentCollectionEntity = CommentCollectionEntity(comment = \u003Cspan class=\"hljs-string\"\u003E\"comment\"\u003C\u002Fspan\u003E, yomi = \u003Cspan class=\"hljs-string\"\u003E\"yomi\"\u003C\u002Fspan\u003E, description = \u003Cspan class=\"hljs-string\"\u003E\"\"\u003C\u002Fspan\u003E)\n        commentCollectionDB.commentCollectionDAO().insert(commentCollectionEntity)\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003Eこれ今まで通りSQLiteOpenHelper経由でアクセスするとどうなるの？\u003C\u002Fh1\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Eandroid.database.sqlite.SQLiteException: Can't downgrade database from version 2 to 1\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eバージョン下げんなって怒られた。\u003C\u002Fp\u003E\n\u003Ch1\u003Eおわりに\u003C\u002Fh1\u003E\n\u003Cp\u003Eカラムが縦か横かわからん時がよくあるのでその時は\u003Cstrong\u003ETweetDeckがマルチカラム\u003C\u002Fstrong\u003Eだってことを思い出してあ～横並びのことか～って思い出すようにしています。\u003C\u002Fp\u003E\n\u003Cp\u003E作らないと行けないファイルが多くて初見さんは大変そうだと思った（こなみ）\u003C\u002Fp\u003E\n\u003Ch1\u003E参考にしました\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Ftraining\u002Fdata-storage\u002Froom\u002Fmigrating-db-versions\"\u003Ehttps:\u002F\u002Fdeveloper.android.com\u002Ftraining\u002Fdata-storage\u002Froom\u002Fmigrating-db-versions\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fmedium.com\u002F@manuelvicnt\u002Fandroid-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9\"\u003Ehttps:\u002F\u002Fmedium.com\u002F@manuelvicnt\u002Fandroid-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F47562157\u002Fandroid-room-migration-null-error\"\u003Ehttps:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F47562157\u002Fandroid-room-migration-null-error\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fqiita.com\u002Farara_tepi\u002Fitems\u002F7267418ca4b6bd65d744#notnull%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B\"\u003Ehttps:\u002F\u002Fqiita.com\u002Farara_tepi\u002Fitems\u002F7267418ca4b6bd65d744#notnullを合わせる\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",dir:"contents\u002Fposts\u002Fjson",base:"android_sqlite_to_room.json",ext:".json",sourceBase:"android_sqlite_to_room.md",sourceExt:".md",params:{slug:"android_sqlite_to_room"}}],fetch:[],mutations:void 0});