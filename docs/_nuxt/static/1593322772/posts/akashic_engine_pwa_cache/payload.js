__NUXT_JSONP__("/posts/akashic_engine_pwa_cache", {data:[{title:"データプラン弱者集合。PWAでオフラインに対応させる",created_at:"2020-06-27T00:00:00.000Z",tags:["JavaScript","PWA"],bodyContent:"今月はあんまりモバイルデータ使ってないですね。\r\n\r\n# 本題\r\nPWAのキャッシュ機能でオフラインでも見れるサイトができたので書きたいと思います。  \r\n\r\n今回は**Akashic Engine**で作ったゲームをPWAに対応させてオフラインでも遊べるようにしたいと思います。  \r\n別にAkashic Engineじゃなくても良いですが\r\n\r\nちなみにこのサイトはnuxt.jsにPWA関係を任せているので特に何もせずに動いてます。\r\n\r\n\r\n*PWA+Cacheでモバイルデータを節約するぞ*\r\n\r\nPWAが何をするのかは各自で調べてください（え\r\n\r\n# 今回使うサイトは\r\n- ソースコード\r\n    - https:\u002F\u002Fgithub.com\u002Ftakusan23\u002FAkashicEngine-FlappyBird\r\n- Netlifyに公開した完成品はこちら\r\n    - https:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\r\n    - PWAのインストールボタンが出てくるはず。\r\n\r\nこれ。前のブログのおまけで使ってたやつ[^1]\r\n\r\n# 用意するもの\r\n- PWA化したいサイトのソース\r\n    - htmlとか画像とかjsとかな\r\n- PWA化したときのアイコン\r\n    - 192x192の大きさと512x512の大きさが必要らしいです。\r\n- Webサーバー建てる拡張機能。別にこれ以外でも良い\r\n    - https:\u002F\u002Fchrome.google.com\u002Fwebstore\u002Fdetail\u002Fweb-server-for-chrome\u002Fofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja\r\n- やる気。諦めないぞというお気持ち\r\n    - PWA厳しい\r\n- 今回はNetlifyで公開する\r\n    - GitHub Pagesだと話が変わってくると思う。\r\n\r\n# HTMLを用意する\r\nもうすでにhtmlを持ってる方は良いです。  \r\n今回私はAkashic EngineをHTML形式に書き出さないといけないので以下を実行\r\n\r\n```console\r\nakashic export html --bundle --magnify --minify --output export\r\n```\r\n\r\n`--minify`を指定して必要なファイルを極限まで減らします。\r\n\r\nこれでHTMLを用意できました。  \r\n![Imgur](https:\u002F\u002Fimgur.com\u002Ff4QhGBO.png)\r\n\r\n**あとは生成されたHTMLファイルの`\u003Ctitle\u003E`を書き換えて名前を変えましょう**\r\n\r\n# ServiceWorker\r\n~~Hello, Worker~~  \r\n\r\n## sw.jsを置く\r\nindex.htmlのあるところに`sw.js`を作成します。  \r\n中身はとりあえず空のままでいいです。\r\n\r\n## iconsフォルダを置く\r\n`sw.js`と同じ感じで同じ場所に`icons`フォルダを作成します。  \r\n中には、`192x192`の大きさのアイコン画像と`512x512`の大きさのアイコン画像を入れます。  \r\n名前はそれぞれ以下のようにします。\r\n- `icon_192.png`\r\n- `icon_512.png`\r\n\r\n## manifest.jsonを置く\r\n`sw.js`と同じ感じで同じ場所に`manifest.json`を作成します。  \r\nそして以下の内容を入れます\r\n\r\n```json\r\n{\r\n    \"name\": \"Akashic Engine Flappy Bird\",\r\n    \"short_name\": \"Akashic Bird\",\r\n    \"icons\": [\r\n        {\r\n            \"src\": \"\u002Ficons\u002Ficon_192.png\",\r\n            \"sizes\": \"192x192\",\r\n            \"type\": \"image\u002Fpng\"\r\n        },\r\n        {\r\n            \"src\": \"\u002Ficons\u002Ficon_512.png\",\r\n            \"sizes\": \"512x512\",\r\n            \"type\": \"image\u002Fpng\"\r\n        }\r\n    ],\r\n    \"start_url\": \"\u002Findex.html\",\r\n    \"display\": \"standalone\",\r\n    \"background_color\": \"#FFFFFF\",\r\n    \"theme_color\": \"#FFFFFF\"\r\n}\r\n```\r\n\r\n最低限、\r\n- `name`\r\n    - なまえ\r\n- `short_name`\r\n    - アプリ一覧で表示される名前\r\n\r\nを書き換えればいいと思います。\r\n\r\n## ServiceWorker登録\r\n`index.html`を開きます。  \r\n開いたら、head内に以下のように書きます。  \r\nよくわからない場合は`\u003Ctitle\u003E`の下辺りに書いておけばいいと思います。\r\n\r\n```html\r\n\u003C!-- ウェブアプリマニフェストの読み込み --\u003E\r\n\u003Clink rel=\"manifest\" href=\"manifest.json\"\u003E\r\n\u003C!-- さーびすわーかー --\u003E\r\n\u003Cscript\u003E\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker\r\n            .register(\"sw.js\")\r\n            .then(() =\u003E console.log(\"registered service worker!\"));\r\n    }\r\n\u003C\u002Fscript\u003E\r\n```\r\n\r\n# ここまででできたファイル\r\n`image`フォルダ以外はみんなあるよね？  \r\n![Imgur](https:\u002F\u002Fimgur.com\u002FffmuHM6.png)\r\n\r\n# sw.jsを書く\r\nsw.js白紙だとインストールのためのバナー（ホーム画面に {アプリ名} を追加）すら出ない模様。  \r\n\r\n## キャッシュしなければいけないファイルを並べる\r\nここでファイル名を間違えるとキャッシュ取得諦めるのでちゃんと書きましょう。先生が生徒の名前間違えないようにするみたいな感じで\r\n\r\n```js\r\n\u002F\u002F キャッシュしないといけないファイルを列挙する。間違えないように\r\nconst CACHE_LIST = [\r\n    \"\u002Ficons\u002Ficon_192.png\",\r\n    \"\u002Ficons\u002Ficon_512.png\",\r\n    \"\u002Fimage\u002Fplay.png\",\r\n    \"\u002Fimage\u002Fresult.png\",\r\n    \"\u002Fimage\u002Ftitle.png\",\r\n    \"\u002Fimage\u002Ftori.png\",\r\n    \"index.html\",\r\n    \"manifest.json\",\r\n    \"\u002F\"\r\n]\r\n```\r\n\r\n## キャッシュに付ける名前\r\n多分識別に使うと思います。同じ名前だったら取得しない、名前が変わっていたら再度取り直すみたいな感じだと思います。  \r\n\r\nキャッシュ取得し直したい場合はここの値を変えることで再度取り直してくれます。\r\n\r\n```js\r\n\u002F\u002F バージョンの名前。識別に使う\r\nconst VERSION_NAME = 'bird_20200627' \u002F\u002F ここの値が変わるとキャッシュを再登録するっぽい？\r\n```\r\n\r\n## `install` イベント\r\nコピペで行けると思います。\r\n```js\r\n\u002F\u002F インストール時に\r\nself.addEventListener('install', event =\u003E {\r\n    console.log('インストールするぞ')\r\n    event.waitUntil(\r\n        caches.open(VERSION_NAME).then(cache =\u003E {\r\n            return cache.addAll(CACHE_LIST) \u002F\u002F キャッシュ登録\r\n        }).catch(err =\u003E { console.log(err) }) \u002F\u002F えらー\r\n    )\r\n})\r\n```\r\n\r\n## リクエスト横取り\r\nインターネットに画像リクエストしよー  \r\n↓  \r\nServiceWorkerが検知  \r\n↓  \r\nキャッシュがあればキャッシュを返す\r\n\r\nこれを書きます。\r\n\r\n```js\r\n\u002F\u002F リクエストを横取りする\r\nself.addEventListener('fetch', event =\u003E {\r\n    \u002F\u002F キャッシュの内容に置き換える\r\n    event.respondWith(\r\n        caches.match(event.request).then(function (response) {\r\n            return response || fetch(event.request);\r\n        })\r\n    );\r\n})\r\n```\r\n\r\n## 古いキャッシュを消す\r\n**キャッシュに付ける名前**の項目で、キャッシュを再度取り直してくれますなど言いましたが、これ勝手には消してくれないので消してくれるコードです。\r\n\r\n```js\r\n\u002F\u002F 古いキャッシュを消す。\r\nself.addEventListener('activate', function (event) {\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.filter(function (cacheName) {\r\n                    return cacheName !== VERSION_NAME;\r\n                }).map(function (cacheName) {\r\n                    return caches.delete(cacheName);\r\n                })\r\n            );\r\n        })\r\n    );\r\n});\r\n```\r\n\r\n# ここまでのsw.js\r\n\r\n```js\r\n\u002F\u002F キャッシュしないといけないファイルを列挙する。間違えないように\r\nconst CACHE_LIST = [\r\n    \"\u002Ficons\u002Ficon_192.png\",\r\n    \"\u002Ficons\u002Ficon_512.png\",\r\n    \"\u002Fimage\u002Fplay.png\",\r\n    \"\u002Fimage\u002Fresult.png\",\r\n    \"\u002Fimage\u002Ftitle.png\",\r\n    \"\u002Fimage\u002Ftori.png\",\r\n    \"index.html\",\r\n    \"manifest.json\",\r\n    \"\u002F\"\r\n]\r\n\r\n\u002F\u002F バージョンの名前。識別に使う\r\nconst VERSION_NAME = 'bird_20200627' \u002F\u002F ここの値が変わるとキャッシュを再登録するっぽい？\r\n\r\n\u002F\u002F インストール時に\r\nself.addEventListener('install', event =\u003E {\r\n    console.log('インストールするぞ')\r\n    event.waitUntil(\r\n        caches.open(VERSION_NAME).then(cache =\u003E {\r\n            return cache.addAll(CACHE_LIST) \u002F\u002F キャッシュ登録\r\n        }).catch(err =\u003E { console.log(err) }) \u002F\u002F えらー\r\n    )\r\n})\r\n\r\n\u002F\u002F リクエストを横取りする\r\nself.addEventListener('fetch', event =\u003E {\r\n    \u002F\u002F キャッシュの内容に置き換える\r\n    event.respondWith(\r\n        caches.match(event.request).then(function (response) {\r\n            return response || fetch(event.request);\r\n        })\r\n    );\r\n})\r\n\r\n\u002F\u002F 古いキャッシュを消す。\r\nself.addEventListener('activate', function (event) {\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.filter(function (cacheName) {\r\n                    return cacheName !== VERSION_NAME;\r\n                }).map(function (cacheName) {\r\n                    return caches.delete(cacheName);\r\n                })\r\n            );\r\n        })\r\n    );\r\n});\r\n```\r\n\r\n# Web Server for Chrome を開いて\r\n`CHOOSE FOLDER`を押して、`index.html`のあるフォルダを指定します。  \r\nそしたら`Web Server`のスイッチを押して起動させます。 \r\n\r\n起動できたら、`http:\u002F\u002F127.0.0.1`から始まるURLが`Web Server URL(s)`の下に表示されるので押します。するとWebページが表示されるようになるんですね～\r\n\r\nそしたらWebページを開いた状態で`F12`おして`Application`タブを押します。\r\n\r\nその中から`Cache Storage`を探して、キャッシュが取得できてるか確認しましょう。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FPWEuyxl.png)\r\n\r\nこのように登録されていれば完成です。おめ！\r\n\r\nちなみに：本当なら`index.html`をブラウザで開くだけで見れるわけですが、Service Workerを動かすためにはURLが `https`で始まるか`localhost（127.0.0.1）`で始まる必要があるようです。  \r\nだから**Web Server for Chrome**を利用する必要があったのですね。\r\n\r\n# 本当にオフラインで動くの？\r\n\r\n`Service Worker`を押して、`Offline`にチャックを入れます。  \r\n入れた後に再読み込みしても表示されている場合は動いてます。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FBjjxnvm.png)\r\n\r\n# Netlifyで公開\r\nもう一回タイトル見てください。データプラン弱者がなんとかとか書いてあります。そうスマホで見れないと意味がないんですよ。\r\n\r\nというわけでNetlifyで公開します。  \r\nアカウントは各自作成してください。この記事に辿り着くってことはそれなりの知識があるはずです。  \r\n\r\n## Netlify Drop\r\nなんか`index.html`なんかが入ったフォルダをブラウザに投げるだけで公開できるらしい。\r\n\r\nというわけで`index.html sw.js manifest.json`もろもろ入ってるフォルダをNetlifyのサイトに投げましょう。この方法ならGitHubを経由すること無く公開できます。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002FwCFDJiW.png)\r\n\r\n## Site Settings \u003E Change site name からURLを変更\r\n`https:\u002F\u002F {自由に決められる} .netlify.app`の自由に決められるの部分なら、自由に変更可能です。\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002F911F4E7.png)\r\n\r\n自分の持ってるドメインを設定する場合は前に書きました→ [Google Domainsでドメイン買った](\u002Fposts\u002Fdomain_katta)\r\n\r\n以上です。  \r\n今回できたサイトはこちら。→ https:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\r\n# おわりに\r\nところで今の所通信制限かかったことは無いと思われ\r\n\r\n![Imgur](https:\u002F\u002Fi.imgur.com\u002Fq8X1FOT.png)\r\n\r\n# 参考にしました\r\nhttps:\u002F\u002Fqiita.com\u002Fmasanarih0ri\u002Fitems\u002F0845f312cff5c8d0ec60  \r\nhttps:\u002F\u002Fwww.simicart.com\u002Fblog\u002Fpwa-offline\u002F  \r\n\r\n[^1]:Nuxt.jsでHTML貼るのってどうすりゃいいんだ？",bodyHtml:"\u003Cp\u003E今月はあんまりモバイルデータ使ってないですね。\u003C\u002Fp\u003E\n\u003Ch1\u003E本題\u003C\u002Fh1\u003E\n\u003Cp\u003EPWAのキャッシュ機能でオフラインでも見れるサイトができたので書きたいと思います。\u003C\u002Fp\u003E\n\u003Cp\u003E今回は\u003Cstrong\u003EAkashic Engine\u003C\u002Fstrong\u003Eで作ったゲームをPWAに対応させてオフラインでも遊べるようにしたいと思います。\u003Cbr\u003E\n別にAkashic Engineじゃなくても良いですが\u003C\u002Fp\u003E\n\u003Cp\u003Eちなみにこのサイトはnuxt.jsにPWA関係を任せているので特に何もせずに動いてます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003EPWA+Cacheでモバイルデータを節約するぞ\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EPWAが何をするのかは各自で調べてください（え\u003C\u002Fp\u003E\n\u003Ch1\u003E今回使うサイトは\u003C\u002Fh1\u003E\n\u003Cul\u003E\n\u003Cli\u003Eソースコード\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftakusan23\u002FAkashicEngine-FlappyBird\"\u003Ehttps:\u002F\u002Fgithub.com\u002Ftakusan23\u002FAkashicEngine-FlappyBird\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ENetlifyに公開した完成品はこちら\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\"\u003Ehttps:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EPWAのインストールボタンが出てくるはず。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eこれ。前のブログのおまけで使ってたやつ\u003Ca href=\"Nuxt.js%E3%81%A7HTML%E8%B2%BC%E3%82%8B%E3%81%AE%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%81%99%E3%82%8A%E3%82%83%E3%81%84%E3%81%84%E3%82%93%E3%81%A0%EF%BC%9F\"\u003E^1\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003E用意するもの\u003C\u002Fh1\u003E\n\u003Cul\u003E\n\u003Cli\u003EPWA化したいサイトのソース\n\u003Cul\u003E\n\u003Cli\u003Ehtmlとか画像とかjsとかな\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EPWA化したときのアイコン\n\u003Cul\u003E\n\u003Cli\u003E192x192の大きさと512x512の大きさが必要らしいです。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EWebサーバー建てる拡張機能。別にこれ以外でも良い\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fchrome.google.com\u002Fwebstore\u002Fdetail\u002Fweb-server-for-chrome\u002Fofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja\"\u003Ehttps:\u002F\u002Fchrome.google.com\u002Fwebstore\u002Fdetail\u002Fweb-server-for-chrome\u002Fofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eやる気。諦めないぞというお気持ち\n\u003Cul\u003E\n\u003Cli\u003EPWA厳しい\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E今回はNetlifyで公開する\n\u003Cul\u003E\n\u003Cli\u003EGitHub Pagesだと話が変わってくると思う。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch1\u003EHTMLを用意する\u003C\u002Fh1\u003E\n\u003Cp\u003Eもうすでにhtmlを持ってる方は良いです。\u003Cbr\u003E\n今回私はAkashic EngineをHTML形式に書き出さないといけないので以下を実行\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Eakashic export html --bundle --magnify --minify --output export\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003E--minify\u003C\u002Fcode\u003Eを指定して必要なファイルを極限まで減らします。\u003C\u002Fp\u003E\n\u003Cp\u003EこれでHTMLを用意できました。\u003Cbr\u003E\n\u003Cimg src=\"https:\u002F\u002Fimgur.com\u002Ff4QhGBO.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Eあとは生成されたHTMLファイルの\u003Ccode\u003E&lt;title&gt;\u003C\u002Fcode\u003Eを書き換えて名前を変えましょう\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003EServiceWorker\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Cs\u003EHello, Worker\u003C\u002Fs\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003Esw.jsを置く\u003C\u002Fh2\u003E\n\u003Cp\u003Eindex.htmlのあるところに\u003Ccode\u003Esw.js\u003C\u002Fcode\u003Eを作成します。\u003Cbr\u003E\n中身はとりあえず空のままでいいです。\u003C\u002Fp\u003E\n\u003Ch2\u003Eiconsフォルダを置く\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Esw.js\u003C\u002Fcode\u003Eと同じ感じで同じ場所に\u003Ccode\u003Eicons\u003C\u002Fcode\u003Eフォルダを作成します。\u003Cbr\u003E\n中には、\u003Ccode\u003E192x192\u003C\u002Fcode\u003Eの大きさのアイコン画像と\u003Ccode\u003E512x512\u003C\u002Fcode\u003Eの大きさのアイコン画像を入れます。\u003Cbr\u003E\n名前はそれぞれ以下のようにします。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eicon_192.png\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eicon_512.png\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003Emanifest.jsonを置く\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Esw.js\u003C\u002Fcode\u003Eと同じ感じで同じ場所に\u003Ccode\u003Emanifest.json\u003C\u002Fcode\u003Eを作成します。\u003Cbr\u003E\nそして以下の内容を入れます\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E{\n    \u003Cspan class=\"hljs-attr\"\u003E\"name\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"Akashic Engine Flappy Bird\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"short_name\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"Akashic Bird\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"icons\"\u003C\u002Fspan\u003E: [\n        {\n            \u003Cspan class=\"hljs-attr\"\u003E\"src\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_192.png\"\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-attr\"\u003E\"sizes\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"192x192\"\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-attr\"\u003E\"type\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"image\u002Fpng\"\u003C\u002Fspan\u003E\n        },\n        {\n            \u003Cspan class=\"hljs-attr\"\u003E\"src\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_512.png\"\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-attr\"\u003E\"sizes\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"512x512\"\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-attr\"\u003E\"type\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"image\u002Fpng\"\u003C\u002Fspan\u003E\n        }\n    ],\n    \u003Cspan class=\"hljs-attr\"\u003E\"start_url\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"\u002Findex.html\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"display\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"standalone\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"background_color\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"#FFFFFF\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"theme_color\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"#FFFFFF\"\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E最低限、\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Ename\u003C\u002Fcode\u003E\n\u003Cul\u003E\n\u003Cli\u003Eなまえ\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eshort_name\u003C\u002Fcode\u003E\n\u003Cul\u003E\n\u003Cli\u003Eアプリ一覧で表示される名前\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eを書き換えればいいと思います。\u003C\u002Fp\u003E\n\u003Ch2\u003EServiceWorker登録\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Eindex.html\u003C\u002Fcode\u003Eを開きます。\u003Cbr\u003E\n開いたら、head内に以下のように書きます。\u003Cbr\u003E\nよくわからない場合は\u003Ccode\u003E&lt;title&gt;\u003C\u002Fcode\u003Eの下辺りに書いておけばいいと思います。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- ウェブアプリマニフェストの読み込み --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Elink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Erel\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"manifest\"\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ehref\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"manifest.json\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- さーびすわーかー --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-string\"\u003E\"serviceWorker\"\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E navigator) {\n        navigator.serviceWorker\n            .register(\u003Cspan class=\"hljs-string\"\u003E\"sw.js\"\u003C\u002Fspan\u003E)\n            .then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E\"registered service worker!\"\u003C\u002Fspan\u003E));\n    }\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003Eここまででできたファイル\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003Eimage\u003C\u002Fcode\u003Eフォルダ以外はみんなあるよね？\u003Cbr\u003E\n\u003Cimg src=\"https:\u002F\u002Fimgur.com\u002FffmuHM6.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003Esw.jsを書く\u003C\u002Fh1\u003E\n\u003Cp\u003Esw.js白紙だとインストールのためのバナー（ホーム画面に {アプリ名} を追加）すら出ない模様。\u003C\u002Fp\u003E\n\u003Ch2\u003Eキャッシュしなければいけないファイルを並べる\u003C\u002Fh2\u003E\n\u003Cp\u003Eここでファイル名を間違えるとキャッシュ取得諦めるのでちゃんと書きましょう。先生が生徒の名前間違えないようにするみたいな感じで\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュしないといけないファイルを列挙する。間違えないように\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E CACHE_LIST = [\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_192.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_512.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Fplay.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Fresult.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Ftitle.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Ftori.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"index.html\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"manifest.json\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002F\"\u003C\u002Fspan\u003E\n]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003Eキャッシュに付ける名前\u003C\u002Fh2\u003E\n\u003Cp\u003E多分識別に使うと思います。同じ名前だったら取得しない、名前が変わっていたら再度取り直すみたいな感じだと思います。\u003C\u002Fp\u003E\n\u003Cp\u003Eキャッシュ取得し直したい場合はここの値を変えることで再度取り直してくれます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F バージョンの名前。識別に使う\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E VERSION_NAME = \u003Cspan class=\"hljs-string\"\u003E'bird_20200627'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ここの値が変わるとキャッシュを再登録するっぽい？\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003E\u003Ccode\u003Einstall\u003C\u002Fcode\u003E イベント\u003C\u002Fh2\u003E\n\u003Cp\u003Eコピペで行けると思います。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F インストール時に\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'install'\u003C\u002Fspan\u003E, event =&gt; {\n    \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'インストールするぞ'\u003C\u002Fspan\u003E)\n    event.waitUntil(\n        caches.open(VERSION_NAME).then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ecache\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E cache.addAll(CACHE_LIST) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュ登録\u003C\u002Fspan\u003E\n        }).catch(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eerr\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(err) }) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F えらー\u003C\u002Fspan\u003E\n    )\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003Eリクエスト横取り\u003C\u002Fh2\u003E\n\u003Cp\u003Eインターネットに画像リクエストしよー\u003Cbr\u003E\n↓\u003Cbr\u003E\nServiceWorkerが検知\u003Cbr\u003E\n↓\u003Cbr\u003E\nキャッシュがあればキャッシュを返す\u003C\u002Fp\u003E\n\u003Cp\u003Eこれを書きます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F リクエストを横取りする\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'fetch'\u003C\u002Fspan\u003E, event =&gt; {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュの内容に置き換える\u003C\u002Fspan\u003E\n    event.respondWith(\n        caches.match(event.request).then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eresponse\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E response || fetch(event.request);\n        })\n    );\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003E古いキャッシュを消す\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cstrong\u003Eキャッシュに付ける名前\u003C\u002Fstrong\u003Eの項目で、キャッシュを再度取り直してくれますなど言いましたが、これ勝手には消してくれないので消してくれるコードです。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 古いキャッシュを消す。\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'activate'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eevent\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n    event.waitUntil(\n        caches.keys().then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheNames\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EPromise\u003C\u002Fspan\u003E.all(\n                cacheNames.filter(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheName\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n                    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E cacheName !== VERSION_NAME;\n                }).map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheName\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n                    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E caches.delete(cacheName);\n                })\n            );\n        })\n    );\n});\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003Eここまでのsw.js\u003C\u002Fh1\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュしないといけないファイルを列挙する。間違えないように\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E CACHE_LIST = [\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_192.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Ficons\u002Ficon_512.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Fplay.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Fresult.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Ftitle.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002Fimage\u002Ftori.png\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"index.html\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"manifest.json\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E\"\u002F\"\u003C\u002Fspan\u003E\n]\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F バージョンの名前。識別に使う\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E VERSION_NAME = \u003Cspan class=\"hljs-string\"\u003E'bird_20200627'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ここの値が変わるとキャッシュを再登録するっぽい？\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F インストール時に\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'install'\u003C\u002Fspan\u003E, event =&gt; {\n    \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'インストールするぞ'\u003C\u002Fspan\u003E)\n    event.waitUntil(\n        caches.open(VERSION_NAME).then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ecache\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E cache.addAll(CACHE_LIST) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュ登録\u003C\u002Fspan\u003E\n        }).catch(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eerr\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(err) }) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F えらー\u003C\u002Fspan\u003E\n    )\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F リクエストを横取りする\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'fetch'\u003C\u002Fspan\u003E, event =&gt; {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F キャッシュの内容に置き換える\u003C\u002Fspan\u003E\n    event.respondWith(\n        caches.match(event.request).then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eresponse\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E response || fetch(event.request);\n        })\n    );\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 古いキャッシュを消す。\u003C\u002Fspan\u003E\nself.addEventListener(\u003Cspan class=\"hljs-string\"\u003E'activate'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eevent\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n    event.waitUntil(\n        caches.keys().then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheNames\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n            \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EPromise\u003C\u002Fspan\u003E.all(\n                cacheNames.filter(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheName\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n                    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E cacheName !== VERSION_NAME;\n                }).map(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EcacheName\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n                    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E caches.delete(cacheName);\n                })\n            );\n        })\n    );\n});\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003EWeb Server for Chrome を開いて\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003ECHOOSE FOLDER\u003C\u002Fcode\u003Eを押して、\u003Ccode\u003Eindex.html\u003C\u002Fcode\u003Eのあるフォルダを指定します。\u003Cbr\u003E\nそしたら\u003Ccode\u003EWeb Server\u003C\u002Fcode\u003Eのスイッチを押して起動させます。\u003C\u002Fp\u003E\n\u003Cp\u003E起動できたら、\u003Ccode\u003Ehttp:\u002F\u002F127.0.0.1\u003C\u002Fcode\u003Eから始まるURLが\u003Ccode\u003EWeb Server URL(s)\u003C\u002Fcode\u003Eの下に表示されるので押します。するとWebページが表示されるようになるんですね～\u003C\u002Fp\u003E\n\u003Cp\u003EそしたらWebページを開いた状態で\u003Ccode\u003EF12\u003C\u002Fcode\u003Eおして\u003Ccode\u003EApplication\u003C\u002Fcode\u003Eタブを押します。\u003C\u002Fp\u003E\n\u003Cp\u003Eその中から\u003Ccode\u003ECache Storage\u003C\u002Fcode\u003Eを探して、キャッシュが取得できてるか確認しましょう。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FPWEuyxl.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eこのように登録されていれば完成です。おめ！\u003C\u002Fp\u003E\n\u003Cp\u003Eちなみに：本当なら\u003Ccode\u003Eindex.html\u003C\u002Fcode\u003Eをブラウザで開くだけで見れるわけですが、Service Workerを動かすためにはURLが \u003Ccode\u003Ehttps\u003C\u002Fcode\u003Eで始まるか\u003Ccode\u003Elocalhost（127.0.0.1）\u003C\u002Fcode\u003Eで始まる必要があるようです。\u003Cbr\u003E\nだから\u003Cstrong\u003EWeb Server for Chrome\u003C\u002Fstrong\u003Eを利用する必要があったのですね。\u003C\u002Fp\u003E\n\u003Ch1\u003E本当にオフラインで動くの？\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003EService Worker\u003C\u002Fcode\u003Eを押して、\u003Ccode\u003EOffline\u003C\u002Fcode\u003Eにチャックを入れます。\u003Cbr\u003E\n入れた後に再読み込みしても表示されている場合は動いてます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FBjjxnvm.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003ENetlifyで公開\u003C\u002Fh1\u003E\n\u003Cp\u003Eもう一回タイトル見てください。データプラン弱者がなんとかとか書いてあります。そうスマホで見れないと意味がないんですよ。\u003C\u002Fp\u003E\n\u003Cp\u003EというわけでNetlifyで公開します。\u003Cbr\u003E\nアカウントは各自作成してください。この記事に辿り着くってことはそれなりの知識があるはずです。\u003C\u002Fp\u003E\n\u003Ch2\u003ENetlify Drop\u003C\u002Fh2\u003E\n\u003Cp\u003Eなんか\u003Ccode\u003Eindex.html\u003C\u002Fcode\u003Eなんかが入ったフォルダをブラウザに投げるだけで公開できるらしい。\u003C\u002Fp\u003E\n\u003Cp\u003Eというわけで\u003Ccode\u003Eindex.html sw.js manifest.json\u003C\u002Fcode\u003Eもろもろ入ってるフォルダをNetlifyのサイトに投げましょう。この方法ならGitHubを経由すること無く公開できます。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FwCFDJiW.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003ESite Settings &gt; Change site name からURLを変更\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Ehttps:\u002F\u002F {自由に決められる} .netlify.app\u003C\u002Fcode\u003Eの自由に決められるの部分なら、自由に変更可能です。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F911F4E7.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E自分の持ってるドメインを設定する場合は前に書きました→ \u003Ca href=\"\u002Fposts\u002Fdomain_katta\"\u003EGoogle Domainsでドメイン買った\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E以上です。\u003Cbr\u003E\n今回できたサイトはこちら。→ \u003Ca href=\"https:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\"\u003Ehttps:\u002F\u002Fgame-akashic-bird.negitoro.dev\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003Eおわりに\u003C\u002Fh1\u003E\n\u003Cp\u003Eところで今の所通信制限かかったことは無いと思われ\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Fq8X1FOT.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003E参考にしました\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fqiita.com\u002Fmasanarih0ri\u002Fitems\u002F0845f312cff5c8d0ec60\"\u003Ehttps:\u002F\u002Fqiita.com\u002Fmasanarih0ri\u002Fitems\u002F0845f312cff5c8d0ec60\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.simicart.com\u002Fblog\u002Fpwa-offline\u002F\"\u003Ehttps:\u002F\u002Fwww.simicart.com\u002Fblog\u002Fpwa-offline\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",dir:"contents\u002Fposts\u002Fjson",base:"akashic_engine_pwa_cache.json",ext:".json",sourceBase:"akashic_engine_pwa_cache.md",sourceExt:".md",params:{slug:"akashic_engine_pwa_cache"}}],fetch:[],mutations:void 0});