__NUXT_JSONP__("/posts/android11_coroutine", {data:[{title:"Android11からAsyncTask非推奨だしCoroutine使おう",created_at:"2020-06-19T00:00:00.000Z",tags:["Android","Android11","Kotlin","Coroutine"],bodyContent:"どうもこんばんわ。  \r\nOkHttpの非同期もコルーチンに対応できたので記事書く。\r\n\r\nあとあってるかは知りません。一応動くとは思いますが\r\n\r\n# ~~AsyncTask~~\r\n非推奨になりました。  \r\nOkHttpの非同期処理ばっか使ったせいでAsyncTaskあんま使わなかったですね。\r\n\r\n![Imgur](https:\u002F\u002Fimgur.com\u002F8YPfGeW.png)\r\n\r\n# 環境\r\n\r\n|なまえ|あたい|\r\n|---|---|\r\n|Android|11 Beta 1|\r\n|targetSdkVersion|30（Android 11）|\r\n|言語|Kotlin|\r\n\r\n# OkHttp+CoroutineでWebAPI使う\r\n\r\n今回はWebAPIに[ニコニコ動画のランキングRSS](https:\u002F\u002Fdwango.github.io\u002Fniconico\u002Fgenre_ranking\u002Franking_rss\u002F)を使おうと思います。\r\n\r\n# ライブラリ入れる\r\n`app\u002Fbuild.gradle`を開いて、\r\n\r\n```gradle\r\ndependencies {\r\n    \u002F\u002F okhttp\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.7.2\")\r\n    \u002F\u002F Coroutines\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\r\n}\r\n```\r\n\r\nOkHttpとCoroutineを入れます。\r\n\r\n# レイアウト\r\nTextView見切れた場合でもScrollView置いてるのでスクロールできます。\r\n\r\n```xml\r\n\u003C?xml version=\"1.0\" encoding=\"utf-8\"?\u003E\r\n\u003CLinearLayout xmlns:android=\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres\u002Fandroid\"\r\n    xmlns:app=\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres-auto\"\r\n    xmlns:tools=\"http:\u002F\u002Fschemas.android.com\u002Ftools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\"\u003E\r\n\r\n    \u003CScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\u003E\r\n\r\n        \u003CLinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\" \u003E\r\n\r\n            \u003CTextView\r\n                android:id=\"@+id\u002Ftextview\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"Hello World!\" \u002F\u003E\r\n        \u003C\u002FLinearLayout\u003E\r\n    \u003C\u002FScrollView\u003E\r\n\r\n\u003C\u002FLinearLayout\u003E\r\n```\r\n\r\n# まずOkHttpだけだとどうなの？\r\nAndroidはUIスレッドで通信できないのでOkHttpの非同期通信で\r\n\r\n```kotlin\r\nval request = Request.Builder().apply {\r\n    url(RANKING_RSS_URL)\r\n    addHeader(\"User-Agent\", \"@takusan_23\")\r\n    get()\r\n}.build()\r\nval okHttpClient = OkHttpClient()\r\nokHttpClient.newCall(request).enqueue(object : Callback {\r\n    override fun onFailure(call: Call, e: IOException) {\r\n        \u002F\u002F 失敗時\r\n    }\r\n    override fun onResponse(call: Call, response: Response) {\r\n        if (response.isSuccessful) {\r\n            \u002F\u002F 成功時\r\n            textview.text = response.body?.string()\r\n        } else {\r\n            \u002F\u002F 失敗時\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n括弧が多いね。  \r\n\r\n\r\n# GlobalScope#launch{ }\r\n\r\n`thread {  }`みたいに現在のスレッドに関係なく動くやつ（だと思います）。\r\n\r\n```kotlin\r\n\u002F\u002F こるーちん\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    \u002F\u002F 取得前\r\n    Toast.makeText(this@MainActivity, \"取得するね\", Toast.LENGTH_SHORT).show()\r\n    \u002F\u002F 取得\r\n    val rankingString = withContext(Dispatchers.IO) {\r\n        getRanking().await()\r\n    }\r\n    textview.text = rankingString\r\n}\r\n```\r\n\r\n`getRanking()`関数はこう\r\n\r\n```kotlin\r\n\u002F\u002F ニコ動の例のアレランキングRSS\r\nval RANKING_RSS_URL = \"https:\u002F\u002Fwww.nicovideo.jp\u002Franking\u002Fgenre\u002Fother?video_ranking_menu&rss=2.0&lang=ja-jp\"\r\nprivate fun getRanking() = GlobalScope.async {\r\n    val request = Request.Builder().apply {\r\n        url(RANKING_RSS_URL)\r\n        addHeader(\"User-Agent\", \"@takusan_23\")\r\n        get()\r\n    }.build()\r\n    val okHttpClient = OkHttpClient()\r\n    try {\r\n        okHttpClient.newCall(request).execute().body?.string()\r\n    } catch (e: IOException) {\r\n        null\r\n    }\r\n}\r\n```\r\n\r\ntry\u002Fcatch置いてる理由はタイムアウトすると落ちると思うからです。\r\n\r\n## （分かる範囲で）解説\r\n`Dispatchers.Main`はUI操作可能なコルーチンを作成しますよってことです。  \r\nでもUI操作できるスレッドでは通信ができないので、`withContext(Dispatchers.IO)`を利用して通信します。この中ではUI操作はできません。  \r\n通信が終わると`withContext`の後の処理が始まります。  \r\nまってこれ動いてるけどあってんの？\r\n\r\n# AsyncTaskを書き換えるならこんな感じ？\r\n\r\n```kotlin\r\nGlobalScope.launch {\r\n    \u002F\u002F AsyncTaskのonPreExecute()でやる処理（読み込み中出すなど）はここに書く\r\n    withContext(Dispatchers.IO){\r\n        \u002F\u002F AsyncTaskのdoInBackground()でやる処理（WebAPI叩くなど）はここに書く\r\n    }\r\n    \u002F\u002F AsyncTaskのonPostExecute()でやる処理（WebAPIのレスポンス結果）はここに書く。\r\n}\r\n```\r\n\r\n# runBlocking { }\r\nこいつは`GlobalScope.launch { }`とは違い、現在のスレッドを止めます。**UIスレッドだろうと止めます。** ぶっちゃけどこで使えば良いのかよくわからん。\r\n\r\n```kotlin\r\n\u002F\u002F 取得前\r\nToast.makeText(this@MainActivity, \"取得するね\", Toast.LENGTH_SHORT).show()\r\nval rankingString = runBlocking(Dispatchers.IO) {\r\n    getRanking().await()\r\n}\r\ntextview.text = rankingString\r\n```\r\n\r\n`getRanking()`関数はこう\r\n\r\n```kotlin\r\n\u002F\u002F ニコ動の例のアレランキングRSS\r\nval RANKING_RSS_URL = \"https:\u002F\u002Fwww.nicovideo.jp\u002Franking\u002Fgenre\u002Fother?video_ranking_menu&rss=2.0&lang=ja-jp\"\r\nprivate fun getRanking() = GlobalScope.async {\r\n    val request = Request.Builder().apply {\r\n        url(RANKING_RSS_URL)\r\n        addHeader(\"User-Agent\", \"@takusan_23\")\r\n        get()\r\n    }.build()\r\n    val okHttpClient = OkHttpClient()\r\n    try {\r\n        okHttpClient.newCall(request).execute().body?.string()\r\n    } catch (e: IOException) {\r\n        null\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 本当にUIスレッド止めてるの？\r\n多分。Activity起動が遅くなってる気がする。  \r\n`GlobalScope.launch { }`の方は  \r\n**Activity表示→WebAPI叩く** みたいな感じだけど、\r\n\r\n`runBlocking { }`の方は  \r\n**WebAPI叩く→Activity表示** みたいな感じ。データ取得終わってからActivityを表示してますね。\r\n\r\n# おまけ OkHttpの非同期通信をコルーチンに対応させる\r\n`OkHttpのコルーチン`以外にも高階関数などでも使い回せると思います。頑張って作った高階関数もコルーチンに対応できます。\r\n\r\n参考にしました：https:\u002F\u002Fmedium.com\u002F@star_zero\u002Fcallback%E5%BD%A2%E5%BC%8F%E3%81%AE%E3%82%82%E3%81%AE%E3%82%92coroutines%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B-9384dfa6ad77\r\n\r\n```kotlin\r\n\u002F** ランキングRSS取得関数 *\u002F\r\nprivate suspend fun getRanking() = suspendCoroutine\u003CString?\u003E { suspendCoroutine -\u003E\r\n    val request = Request.Builder().apply {\r\n        url(RANKING_RSS_URL)\r\n        addHeader(\"User-Agent\", \"@takusan_23\")\r\n        get()\r\n    }.build()\r\n    val okHttpClient = OkHttpClient()\r\n    okHttpClient.newCall(request).enqueue(object : Callback {\r\n        override fun onFailure(call: Call, e: IOException) {\r\n            suspendCoroutine.resumeWithException(e)\r\n        }\r\n        override fun onResponse(call: Call, response: Response) {\r\n            if (response.isSuccessful) {\r\n                suspendCoroutine.resume(response.body?.string())\r\n            } else {\r\n                suspendCoroutine.resume(null)\r\n            }\r\n        }\r\n    })\r\n}\r\n```\r\n\r\n`suspendCoroutine`を使えばコールバックなコードでもコルーチンに対応できます。  \r\n\r\n使い方はこう\r\n\r\n```kotlin\r\n\u002F\u002F こるーちん\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    \u002F\u002F 取得前\r\n    Toast.makeText(this@MainActivity, \"取得するね\", Toast.LENGTH_SHORT).show()\r\n    \u002F\u002F 取得\r\n    val rankingString = withContext(Dispatchers.IO) {\r\n        getRanking()\r\n    }\r\n    textview.text = rankingString\r\n}\r\n```\r\n\r\n`suspend`ってのは中断って意味らしいですよ。\r\n\r\n# おわりに\r\nなんとなくでCoroutine触ってるけどやっぱりよくわからない。  \r\n\r\nあとOkHttp作ってるSquareってあのクレカ決済とかキャッシュレスの決済やってる会社？すごくね？",bodyHtml:"\u003Cp\u003Eどうもこんばんわ。\u003Cbr\u003E\nOkHttpの非同期もコルーチンに対応できたので記事書く。\u003C\u002Fp\u003E\n\u003Cp\u003Eあとあってるかは知りません。一応動くとは思いますが\u003C\u002Fp\u003E\n\u003Ch1\u003E\u003Cs\u003EAsyncTask\u003C\u002Fs\u003E\u003C\u002Fh1\u003E\n\u003Cp\u003E非推奨になりました。\u003Cbr\u003E\nOkHttpの非同期処理ばっか使ったせいでAsyncTaskあんま使わなかったですね。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fimgur.com\u002F8YPfGeW.png\" alt=\"Imgur\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003E環境\u003C\u002Fh1\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003Eなまえ\u003C\u002Fth\u003E\n\u003Cth\u003Eあたい\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EAndroid\u003C\u002Ftd\u003E\n\u003Ctd\u003E11 Beta 1\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EtargetSdkVersion\u003C\u002Ftd\u003E\n\u003Ctd\u003E30（Android 11）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E言語\u003C\u002Ftd\u003E\n\u003Ctd\u003EKotlin\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Ch1\u003EOkHttp+CoroutineでWebAPI使う\u003C\u002Fh1\u003E\n\u003Cp\u003E今回はWebAPIに\u003Ca href=\"https:\u002F\u002Fdwango.github.io\u002Fniconico\u002Fgenre_ranking\u002Franking_rss\u002F\"\u003Eニコニコ動画のランキングRSS\u003C\u002Fa\u003Eを使おうと思います。\u003C\u002Fp\u003E\n\u003Ch1\u003Eライブラリ入れる\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003Eapp\u002Fbuild.gradle\u003C\u002Fcode\u003Eを開いて、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Edependencies\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F okhttp\u003C\u002Fspan\u003E\n    implementation(\u003Cspan class=\"hljs-string\"\u003E\"com.squareup.okhttp3:okhttp:4.7.2\"\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Coroutines\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\u003C\u002Fspan\u003E\n    implementation \u003Cspan class=\"hljs-string\"\u003E\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EOkHttpとCoroutineを入れます。\u003C\u002Fp\u003E\n\u003Ch1\u003Eレイアウト\u003C\u002Fh1\u003E\n\u003Cp\u003ETextView見切れた場合でもScrollView置いてるのでスクロールできます。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ELinearLayout\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Exmlns:android\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres\u002Fandroid\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Exmlns:app\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres-auto\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Exmlns:tools\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"http:\u002F\u002Fschemas.android.com\u002Ftools\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_width\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_height\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Etools:context\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\".MainActivity\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EScrollView\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_width\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_height\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ELinearLayout\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_width\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_height\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"wrap_content\"\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-attr\"\u003Eandroid:orientation\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"vertical\"\u003C\u002Fspan\u003E &gt;\u003C\u002Fspan\u003E\n\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ETextView\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-attr\"\u003Eandroid:id\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"@+id\u002Ftextview\"\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_width\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-attr\"\u003Eandroid:layout_height\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"match_parent\"\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-attr\"\u003Eandroid:text\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"Hello World!\"\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ELinearLayout\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003EScrollView\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ELinearLayout\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003EまずOkHttpだけだとどうなの？\u003C\u002Fh1\u003E\n\u003Cp\u003EAndroidはUIスレッドで通信できないのでOkHttpの非同期通信で\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E request = Request.Builder().apply {\n    url(RANKING_RSS_URL)\n    addHeader(\u003Cspan class=\"hljs-string\"\u003E\"User-Agent\"\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"@takusan_23\"\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E()\n}.build()\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E okHttpClient = OkHttpClient()\nokHttpClient.newCall(request).enqueue(\u003Cspan class=\"hljs-keyword\"\u003Eobject\u003C\u002Fspan\u003E : Callback {\n    \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EonFailure\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(call: \u003Cspan class=\"hljs-type\"\u003ECall\u003C\u002Fspan\u003E, e: \u003Cspan class=\"hljs-type\"\u003EIOException\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 失敗時\u003C\u002Fspan\u003E\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EonResponse\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(call: \u003Cspan class=\"hljs-type\"\u003ECall\u003C\u002Fspan\u003E, response: \u003Cspan class=\"hljs-type\"\u003EResponse\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (response.isSuccessful) {\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 成功時\u003C\u002Fspan\u003E\n            textview.text = response.body?.string()\n        } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 失敗時\u003C\u002Fspan\u003E\n        }\n    }\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E括弧が多いね。\u003C\u002Fp\u003E\n\u003Ch1\u003EGlobalScope#launch{ }\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003Ethread {  }\u003C\u002Fcode\u003Eみたいに現在のスレッドに関係なく動くやつ（だと思います）。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F こるーちん\u003C\u002Fspan\u003E\nGlobalScope.launch(Dispatchers.Main) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 取得前\u003C\u002Fspan\u003E\n    Toast.makeText(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-symbol\"\u003E@MainActivity\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"取得するね\"\u003C\u002Fspan\u003E, Toast.LENGTH_SHORT).show()\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 取得\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E rankingString = withContext(Dispatchers.IO) {\n        getRanking().await()\n    }\n    textview.text = rankingString\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003EgetRanking()\u003C\u002Fcode\u003E関数はこう\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ニコ動の例のアレランキングRSS\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E RANKING_RSS_URL = \u003Cspan class=\"hljs-string\"\u003E\"https:\u002F\u002Fwww.nicovideo.jp\u002Franking\u002Fgenre\u002Fother?video_ranking_menu&amp;rss=2.0&amp;lang=ja-jp\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EgetRanking\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E = GlobalScope.async {\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E request = Request.Builder().apply {\n        url(RANKING_RSS_URL)\n        addHeader(\u003Cspan class=\"hljs-string\"\u003E\"User-Agent\"\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"@takusan_23\"\u003C\u002Fspan\u003E)\n        \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E()\n    }.build()\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E okHttpClient = OkHttpClient()\n    \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E {\n        okHttpClient.newCall(request).execute().body?.string()\n    } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (e: IOException) {\n        \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Etry\u002Fcatch置いてる理由はタイムアウトすると落ちると思うからです。\u003C\u002Fp\u003E\n\u003Ch2\u003E（分かる範囲で）解説\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003EDispatchers.Main\u003C\u002Fcode\u003EはUI操作可能なコルーチンを作成しますよってことです。\u003Cbr\u003E\nでもUI操作できるスレッドでは通信ができないので、\u003Ccode\u003EwithContext(Dispatchers.IO)\u003C\u002Fcode\u003Eを利用して通信します。この中ではUI操作はできません。\u003Cbr\u003E\n通信が終わると\u003Ccode\u003EwithContext\u003C\u002Fcode\u003Eの後の処理が始まります。\u003Cbr\u003E\nまってこれ動いてるけどあってんの？\u003C\u002Fp\u003E\n\u003Ch1\u003EAsyncTaskを書き換えるならこんな感じ？\u003C\u002Fh1\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003EGlobalScope.launch {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F AsyncTaskのonPreExecute()でやる処理（読み込み中出すなど）はここに書く\u003C\u002Fspan\u003E\n    withContext(Dispatchers.IO){\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F AsyncTaskのdoInBackground()でやる処理（WebAPI叩くなど）はここに書く\u003C\u002Fspan\u003E\n    }\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F AsyncTaskのonPostExecute()でやる処理（WebAPIのレスポンス結果）はここに書く。\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003ErunBlocking { }\u003C\u002Fh1\u003E\n\u003Cp\u003Eこいつは\u003Ccode\u003EGlobalScope.launch { }\u003C\u002Fcode\u003Eとは違い、現在のスレッドを止めます。\u003Cstrong\u003EUIスレッドだろうと止めます。\u003C\u002Fstrong\u003E ぶっちゃけどこで使えば良いのかよくわからん。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 取得前\u003C\u002Fspan\u003E\nToast.makeText(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-symbol\"\u003E@MainActivity\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"取得するね\"\u003C\u002Fspan\u003E, Toast.LENGTH_SHORT).show()\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E rankingString = runBlocking(Dispatchers.IO) {\n    getRanking().await()\n}\ntextview.text = rankingString\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003EgetRanking()\u003C\u002Fcode\u003E関数はこう\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ニコ動の例のアレランキングRSS\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E RANKING_RSS_URL = \u003Cspan class=\"hljs-string\"\u003E\"https:\u002F\u002Fwww.nicovideo.jp\u002Franking\u002Fgenre\u002Fother?video_ranking_menu&amp;rss=2.0&amp;lang=ja-jp\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EgetRanking\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E = GlobalScope.async {\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E request = Request.Builder().apply {\n        url(RANKING_RSS_URL)\n        addHeader(\u003Cspan class=\"hljs-string\"\u003E\"User-Agent\"\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"@takusan_23\"\u003C\u002Fspan\u003E)\n        \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E()\n    }.build()\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E okHttpClient = OkHttpClient()\n    \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E {\n        okHttpClient.newCall(request).execute().body?.string()\n    } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (e: IOException) {\n        \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003E本当にUIスレッド止めてるの？\u003C\u002Fh2\u003E\n\u003Cp\u003E多分。Activity起動が遅くなってる気がする。\u003Cbr\u003E\n\u003Ccode\u003EGlobalScope.launch { }\u003C\u002Fcode\u003Eの方は\u003Cbr\u003E\n\u003Cstrong\u003EActivity表示→WebAPI叩く\u003C\u002Fstrong\u003E みたいな感じだけど、\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003ErunBlocking { }\u003C\u002Fcode\u003Eの方は\u003Cbr\u003E\n\u003Cstrong\u003EWebAPI叩く→Activity表示\u003C\u002Fstrong\u003E みたいな感じ。データ取得終わってからActivityを表示してますね。\u003C\u002Fp\u003E\n\u003Ch1\u003Eおまけ OkHttpの非同期通信をコルーチンに対応させる\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ccode\u003EOkHttpのコルーチン\u003C\u002Fcode\u003E以外にも高階関数などでも使い回せると思います。頑張って作った高階関数もコルーチンに対応できます。\u003C\u002Fp\u003E\n\u003Cp\u003E参考にしました：\u003Ca href=\"https:\u002F\u002Fmedium.com\u002F@star_zero\u002Fcallback%E5%BD%A2%E5%BC%8F%E3%81%AE%E3%82%82%E3%81%AE%E3%82%92coroutines%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B-9384dfa6ad77\"\u003Ehttps:\u002F\u002Fmedium.com\u002F@star_zero\u002Fcallback形式のものをcoroutinesに対応する-9384dfa6ad77\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F** ランキングRSS取得関数 *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Esuspend\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EgetRanking\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E = suspendCoroutine&lt;String?&gt; { suspendCoroutine -&gt;\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E request = Request.Builder().apply {\n        url(RANKING_RSS_URL)\n        addHeader(\u003Cspan class=\"hljs-string\"\u003E\"User-Agent\"\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"@takusan_23\"\u003C\u002Fspan\u003E)\n        \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E()\n    }.build()\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E okHttpClient = OkHttpClient()\n    okHttpClient.newCall(request).enqueue(\u003Cspan class=\"hljs-keyword\"\u003Eobject\u003C\u002Fspan\u003E : Callback {\n        \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EonFailure\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(call: \u003Cspan class=\"hljs-type\"\u003ECall\u003C\u002Fspan\u003E, e: \u003Cspan class=\"hljs-type\"\u003EIOException\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n            suspendCoroutine.resumeWithException(e)\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Eoverride\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EonResponse\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-params\"\u003E(call: \u003Cspan class=\"hljs-type\"\u003ECall\u003C\u002Fspan\u003E, response: \u003Cspan class=\"hljs-type\"\u003EResponse\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n            \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (response.isSuccessful) {\n                suspendCoroutine.resume(response.body?.string())\n            } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n                suspendCoroutine.resume(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E)\n            }\n        }\n    })\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003EsuspendCoroutine\u003C\u002Fcode\u003Eを使えばコールバックなコードでもコルーチンに対応できます。\u003C\u002Fp\u003E\n\u003Cp\u003E使い方はこう\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F こるーちん\u003C\u002Fspan\u003E\nGlobalScope.launch(Dispatchers.Main) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 取得前\u003C\u002Fspan\u003E\n    Toast.makeText(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-symbol\"\u003E@MainActivity\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E\"取得するね\"\u003C\u002Fspan\u003E, Toast.LENGTH_SHORT).show()\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 取得\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eval\u003C\u002Fspan\u003E rankingString = withContext(Dispatchers.IO) {\n        getRanking()\n    }\n    textview.text = rankingString\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Esuspend\u003C\u002Fcode\u003Eってのは中断って意味らしいですよ。\u003C\u002Fp\u003E\n\u003Ch1\u003Eおわりに\u003C\u002Fh1\u003E\n\u003Cp\u003EなんとなくでCoroutine触ってるけどやっぱりよくわからない。\u003C\u002Fp\u003E\n\u003Cp\u003EあとOkHttp作ってるSquareってあのクレカ決済とかキャッシュレスの決済やってる会社？すごくね？\u003C\u002Fp\u003E\n",dir:"contents\u002Fposts\u002Fjson",base:"android11_coroutine.json",ext:".json",sourceBase:"android11_coroutine.md",sourceExt:".md",params:{slug:"android11_coroutine"}}],fetch:[],mutations:void 0});