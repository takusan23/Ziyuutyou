{
  "title": "データプラン弱者集合。PWAでオフラインに対応させる",
  "created_at": "2020-06-27T00:00:00.000Z",
  "tags": [
    "JavaScript",
    "PWA"
  ],
  "bodyContent": "今月はあんまりモバイルデータ使ってないですね。\r\n\r\n# 本題\r\nPWAのキャッシュ機能でオフラインでも見れるサイトができたので書きたいと思います。  \r\n\r\n今回は**Akashic Engine**で作ったゲームをPWAに対応させてオフラインでも遊べるようにしたいと思います。  \r\n別にAkashic Engineじゃなくても良いですが\r\n\r\nちなみにこのサイトはnuxt.jsにPWA関係を任せているので特に何もせずに動いてます。\r\n\r\n\r\n*PWA+Cacheでモバイルデータを節約するぞ*\r\n\r\nPWAが何をするのかは各自で調べてください（え\r\n\r\n# 今回使うサイトは\r\n- ソースコード\r\n    - https://github.com/takusan23/AkashicEngine-FlappyBird\r\n- Netlifyに公開した完成品はこちら\r\n    - https://game-akashic-bird.negitoro.dev/\r\n    - PWAのインストールボタンが出てくるはず。\r\n\r\nこれ。前のブログのおまけで使ってたやつ[^1]\r\n\r\n# 用意するもの\r\n- PWA化したいサイトのソース\r\n    - htmlとか画像とかjsとかな\r\n- PWA化したときのアイコン\r\n    - 192x192の大きさと512x512の大きさが必要らしいです。\r\n- Webサーバー建てる拡張機能。別にこれ以外でも良い\r\n    - https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja\r\n- やる気。諦めないぞというお気持ち\r\n    - PWA厳しい\r\n- 今回はNetlifyで公開する\r\n    - GitHub Pagesだと話が変わってくると思う。\r\n\r\n# HTMLを用意する\r\nもうすでにhtmlを持ってる方は良いです。  \r\n今回私はAkashic EngineをHTML形式に書き出さないといけないので以下を実行\r\n\r\n```console\r\nakashic export html --bundle --magnify --minify --output export\r\n```\r\n\r\n`--minify`を指定して必要なファイルを極限まで減らします。\r\n\r\nこれでHTMLを用意できました。  \r\n![Imgur](https://imgur.com/f4QhGBO.png)\r\n\r\n**あとは生成されたHTMLファイルの`<title>`を書き換えて名前を変えましょう**\r\n\r\n# ServiceWorker\r\n~~Hello, Worker~~  \r\n\r\n## sw.jsを置く\r\nindex.htmlのあるところに`sw.js`を作成します。  \r\n中身はとりあえず空のままでいいです。\r\n\r\n## iconsフォルダを置く\r\n`sw.js`と同じ感じで同じ場所に`icons`フォルダを作成します。  \r\n中には、`192x192`の大きさのアイコン画像と`512x512`の大きさのアイコン画像を入れます。  \r\n名前はそれぞれ以下のようにします。\r\n- `icon_192.png`\r\n- `icon_512.png`\r\n\r\n## manifest.jsonを置く\r\n`sw.js`と同じ感じで同じ場所に`manifest.json`を作成します。  \r\nそして以下の内容を入れます\r\n\r\n```json\r\n{\r\n    \"name\": \"Akashic Engine Flappy Bird\",\r\n    \"short_name\": \"Akashic Bird\",\r\n    \"icons\": [\r\n        {\r\n            \"src\": \"/icons/icon_192.png\",\r\n            \"sizes\": \"192x192\",\r\n            \"type\": \"image/png\"\r\n        },\r\n        {\r\n            \"src\": \"/icons/icon_512.png\",\r\n            \"sizes\": \"512x512\",\r\n            \"type\": \"image/png\"\r\n        }\r\n    ],\r\n    \"start_url\": \"/index.html\",\r\n    \"display\": \"standalone\",\r\n    \"background_color\": \"#FFFFFF\",\r\n    \"theme_color\": \"#FFFFFF\"\r\n}\r\n```\r\n\r\n最低限、\r\n- `name`\r\n    - なまえ\r\n- `short_name`\r\n    - アプリ一覧で表示される名前\r\n\r\nを書き換えればいいと思います。\r\n\r\n## ServiceWorker登録\r\n`index.html`を開きます。  \r\n開いたら、head内に以下のように書きます。  \r\nよくわからない場合は`<title>`の下辺りに書いておけばいいと思います。\r\n\r\n```html\r\n<!-- ウェブアプリマニフェストの読み込み -->\r\n<link rel=\"manifest\" href=\"manifest.json\">\r\n<!-- さーびすわーかー -->\r\n<script>\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker\r\n            .register(\"sw.js\")\r\n            .then(() => console.log(\"registered service worker!\"));\r\n    }\r\n</script>\r\n```\r\n\r\n# ここまででできたファイル\r\n`image`フォルダ以外はみんなあるよね？  \r\n![Imgur](https://imgur.com/ffmuHM6.png)\r\n\r\n# sw.jsを書く\r\nsw.js白紙だとインストールのためのバナー（ホーム画面に {アプリ名} を追加）すら出ない模様。  \r\n\r\n## キャッシュしなければいけないファイルを並べる\r\nここでファイル名を間違えるとキャッシュ取得諦めるのでちゃんと書きましょう。先生が生徒の名前間違えないようにするみたいな感じで\r\n\r\n```js\r\n// キャッシュしないといけないファイルを列挙する。間違えないように\r\nconst CACHE_LIST = [\r\n    \"/icons/icon_192.png\",\r\n    \"/icons/icon_512.png\",\r\n    \"/image/play.png\",\r\n    \"/image/result.png\",\r\n    \"/image/title.png\",\r\n    \"/image/tori.png\",\r\n    \"index.html\",\r\n    \"manifest.json\",\r\n    \"/\"\r\n]\r\n```\r\n\r\n## キャッシュに付ける名前\r\n多分識別に使うと思います。同じ名前だったら取得しない、名前が変わっていたら再度取り直すみたいな感じだと思います。  \r\n\r\nキャッシュ取得し直したい場合はここの値を変えることで再度取り直してくれます。\r\n\r\n```js\r\n// バージョンの名前。識別に使う\r\nconst VERSION_NAME = 'bird_20200627' // ここの値が変わるとキャッシュを再登録するっぽい？\r\n```\r\n\r\n## `install` イベント\r\nコピペで行けると思います。\r\n```js\r\n// インストール時に\r\nself.addEventListener('install', event => {\r\n    console.log('インストールするぞ')\r\n    event.waitUntil(\r\n        caches.open(VERSION_NAME).then(cache => {\r\n            return cache.addAll(CACHE_LIST) // キャッシュ登録\r\n        }).catch(err => { console.log(err) }) // えらー\r\n    )\r\n})\r\n```\r\n\r\n## リクエスト横取り\r\nインターネットに画像リクエストしよー  \r\n↓  \r\nServiceWorkerが検知  \r\n↓  \r\nキャッシュがあればキャッシュを返す\r\n\r\nこれを書きます。\r\n\r\n```js\r\n// リクエストを横取りする\r\nself.addEventListener('fetch', event => {\r\n    // キャッシュの内容に置き換える\r\n    event.respondWith(\r\n        caches.match(event.request).then(function (response) {\r\n            return response || fetch(event.request);\r\n        })\r\n    );\r\n})\r\n```\r\n\r\n## 古いキャッシュを消す\r\n**キャッシュに付ける名前**の項目で、キャッシュを再度取り直してくれますなど言いましたが、これ勝手には消してくれないので消してくれるコードです。\r\n\r\n```js\r\n// 古いキャッシュを消す。\r\nself.addEventListener('activate', function (event) {\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.filter(function (cacheName) {\r\n                    return cacheName !== VERSION_NAME;\r\n                }).map(function (cacheName) {\r\n                    return caches.delete(cacheName);\r\n                })\r\n            );\r\n        })\r\n    );\r\n});\r\n```\r\n\r\n# ここまでのsw.js\r\n\r\n```js\r\n// キャッシュしないといけないファイルを列挙する。間違えないように\r\nconst CACHE_LIST = [\r\n    \"/icons/icon_192.png\",\r\n    \"/icons/icon_512.png\",\r\n    \"/image/play.png\",\r\n    \"/image/result.png\",\r\n    \"/image/title.png\",\r\n    \"/image/tori.png\",\r\n    \"index.html\",\r\n    \"manifest.json\",\r\n    \"/\"\r\n]\r\n\r\n// バージョンの名前。識別に使う\r\nconst VERSION_NAME = 'bird_20200627' // ここの値が変わるとキャッシュを再登録するっぽい？\r\n\r\n// インストール時に\r\nself.addEventListener('install', event => {\r\n    console.log('インストールするぞ')\r\n    event.waitUntil(\r\n        caches.open(VERSION_NAME).then(cache => {\r\n            return cache.addAll(CACHE_LIST) // キャッシュ登録\r\n        }).catch(err => { console.log(err) }) // えらー\r\n    )\r\n})\r\n\r\n// リクエストを横取りする\r\nself.addEventListener('fetch', event => {\r\n    // キャッシュの内容に置き換える\r\n    event.respondWith(\r\n        caches.match(event.request).then(function (response) {\r\n            return response || fetch(event.request);\r\n        })\r\n    );\r\n})\r\n\r\n// 古いキャッシュを消す。\r\nself.addEventListener('activate', function (event) {\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.filter(function (cacheName) {\r\n                    return cacheName !== VERSION_NAME;\r\n                }).map(function (cacheName) {\r\n                    return caches.delete(cacheName);\r\n                })\r\n            );\r\n        })\r\n    );\r\n});\r\n```\r\n\r\n# Web Server for Chrome を開いて\r\n`CHOOSE FOLDER`を押して、`index.html`のあるフォルダを指定します。  \r\nそしたら`Web Server`のスイッチを押して起動させます。 \r\n\r\n起動できたら、`http://127.0.0.1`から始まるURLが`Web Server URL(s)`の下に表示されるので押します。するとWebページが表示されるようになるんですね～\r\n\r\nそしたらWebページを開いた状態で`F12`おして`Application`タブを押します。\r\n\r\nその中から`Cache Storage`を探して、キャッシュが取得できてるか確認しましょう。\r\n\r\n![Imgur](https://i.imgur.com/PWEuyxl.png)\r\n\r\nこのように登録されていれば完成です。おめ！\r\n\r\nちなみに：本当なら`index.html`をブラウザで開くだけで見れるわけですが、Service Workerを動かすためにはURLが `https`で始まるか`localhost（127.0.0.1）`で始まる必要があるようです。  \r\nだから**Web Server for Chrome**を利用する必要があったのですね。\r\n\r\n# 本当にオフラインで動くの？\r\n\r\n`Service Worker`を押して、`Offline`にチャックを入れます。  \r\n入れた後に再読み込みしても表示されている場合は動いてます。\r\n\r\n![Imgur](https://i.imgur.com/Bjjxnvm.png)\r\n\r\n# Netlifyで公開\r\nもう一回タイトル見てください。データプラン弱者がなんとかとか書いてあります。そうスマホで見れないと意味がないんですよ。\r\n\r\nというわけでNetlifyで公開します。  \r\nアカウントは各自作成してください。この記事に辿り着くってことはそれなりの知識があるはずです。  \r\n\r\n## Netlify Drop\r\nなんか`index.html`なんかが入ったフォルダをブラウザに投げるだけで公開できるらしい。\r\n\r\nというわけで`index.html sw.js manifest.json`もろもろ入ってるフォルダをNetlifyのサイトに投げましょう。この方法ならGitHubを経由すること無く公開できます。\r\n\r\n![Imgur](https://i.imgur.com/wCFDJiW.png)\r\n\r\n## Site Settings > Change site name からURLを変更\r\n`https:// {自由に決められる} .netlify.app`の自由に決められるの部分なら、自由に変更可能です。\r\n\r\n![Imgur](https://i.imgur.com/911F4E7.png)\r\n\r\n自分の持ってるドメインを設定する場合は前に書きました→ [Google Domainsでドメイン買った](/posts/domain_katta)\r\n\r\n以上です。  \r\n今回できたサイトはこちら。→ https://game-akashic-bird.negitoro.dev/\r\n# おわりに\r\nところで今の所通信制限かかったことは無いと思われ\r\n\r\n![Imgur](https://i.imgur.com/q8X1FOT.png)\r\n\r\n# 参考にしました\r\nhttps://qiita.com/masanarih0ri/items/0845f312cff5c8d0ec60  \r\nhttps://www.simicart.com/blog/pwa-offline/  \r\n\r\n[^1]:Nuxt.jsでHTML貼るのってどうすりゃいいんだ？",
  "bodyHtml": "<p>今月はあんまりモバイルデータ使ってないですね。</p>\n<h1>本題</h1>\n<p>PWAのキャッシュ機能でオフラインでも見れるサイトができたので書きたいと思います。</p>\n<p>今回は<strong>Akashic Engine</strong>で作ったゲームをPWAに対応させてオフラインでも遊べるようにしたいと思います。<br>\n別にAkashic Engineじゃなくても良いですが</p>\n<p>ちなみにこのサイトはnuxt.jsにPWA関係を任せているので特に何もせずに動いてます。</p>\n<p><em>PWA+Cacheでモバイルデータを節約するぞ</em></p>\n<p>PWAが何をするのかは各自で調べてください（え</p>\n<h1>今回使うサイトは</h1>\n<ul>\n<li>ソースコード\n<ul>\n<li><a href=\"https://github.com/takusan23/AkashicEngine-FlappyBird\">https://github.com/takusan23/AkashicEngine-FlappyBird</a></li>\n</ul>\n</li>\n<li>Netlifyに公開した完成品はこちら\n<ul>\n<li><a href=\"https://game-akashic-bird.negitoro.dev/\">https://game-akashic-bird.negitoro.dev/</a></li>\n<li>PWAのインストールボタンが出てくるはず。</li>\n</ul>\n</li>\n</ul>\n<p>これ。前のブログのおまけで使ってたやつ<a href=\"Nuxt.js%E3%81%A7HTML%E8%B2%BC%E3%82%8B%E3%81%AE%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%81%99%E3%82%8A%E3%82%83%E3%81%84%E3%81%84%E3%82%93%E3%81%A0%EF%BC%9F\">^1</a></p>\n<h1>用意するもの</h1>\n<ul>\n<li>PWA化したいサイトのソース\n<ul>\n<li>htmlとか画像とかjsとかな</li>\n</ul>\n</li>\n<li>PWA化したときのアイコン\n<ul>\n<li>192x192の大きさと512x512の大きさが必要らしいです。</li>\n</ul>\n</li>\n<li>Webサーバー建てる拡張機能。別にこれ以外でも良い\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja\">https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=ja</a></li>\n</ul>\n</li>\n<li>やる気。諦めないぞというお気持ち\n<ul>\n<li>PWA厳しい</li>\n</ul>\n</li>\n<li>今回はNetlifyで公開する\n<ul>\n<li>GitHub Pagesだと話が変わってくると思う。</li>\n</ul>\n</li>\n</ul>\n<h1>HTMLを用意する</h1>\n<p>もうすでにhtmlを持ってる方は良いです。<br>\n今回私はAkashic EngineをHTML形式に書き出さないといけないので以下を実行</p>\n<pre><code class=\"hljs\">akashic export html --bundle --magnify --minify --output export</code></pre><p><code>--minify</code>を指定して必要なファイルを極限まで減らします。</p>\n<p>これでHTMLを用意できました。<br>\n<img src=\"https://imgur.com/f4QhGBO.png\" alt=\"Imgur\"></p>\n<p><strong>あとは生成されたHTMLファイルの<code>&lt;title&gt;</code>を書き換えて名前を変えましょう</strong></p>\n<h1>ServiceWorker</h1>\n<p><s>Hello, Worker</s></p>\n<h2>sw.jsを置く</h2>\n<p>index.htmlのあるところに<code>sw.js</code>を作成します。<br>\n中身はとりあえず空のままでいいです。</p>\n<h2>iconsフォルダを置く</h2>\n<p><code>sw.js</code>と同じ感じで同じ場所に<code>icons</code>フォルダを作成します。<br>\n中には、<code>192x192</code>の大きさのアイコン画像と<code>512x512</code>の大きさのアイコン画像を入れます。<br>\n名前はそれぞれ以下のようにします。</p>\n<ul>\n<li><code>icon_192.png</code></li>\n<li><code>icon_512.png</code></li>\n</ul>\n<h2>manifest.jsonを置く</h2>\n<p><code>sw.js</code>と同じ感じで同じ場所に<code>manifest.json</code>を作成します。<br>\nそして以下の内容を入れます</p>\n<pre><code class=\"hljs\">{\n    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Akashic Engine Flappy Bird\"</span>,\n    <span class=\"hljs-attr\">\"short_name\"</span>: <span class=\"hljs-string\">\"Akashic Bird\"</span>,\n    <span class=\"hljs-attr\">\"icons\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"src\"</span>: <span class=\"hljs-string\">\"/icons/icon_192.png\"</span>,\n            <span class=\"hljs-attr\">\"sizes\"</span>: <span class=\"hljs-string\">\"192x192\"</span>,\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"image/png\"</span>\n        },\n        {\n            <span class=\"hljs-attr\">\"src\"</span>: <span class=\"hljs-string\">\"/icons/icon_512.png\"</span>,\n            <span class=\"hljs-attr\">\"sizes\"</span>: <span class=\"hljs-string\">\"512x512\"</span>,\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"image/png\"</span>\n        }\n    ],\n    <span class=\"hljs-attr\">\"start_url\"</span>: <span class=\"hljs-string\">\"/index.html\"</span>,\n    <span class=\"hljs-attr\">\"display\"</span>: <span class=\"hljs-string\">\"standalone\"</span>,\n    <span class=\"hljs-attr\">\"background_color\"</span>: <span class=\"hljs-string\">\"#FFFFFF\"</span>,\n    <span class=\"hljs-attr\">\"theme_color\"</span>: <span class=\"hljs-string\">\"#FFFFFF\"</span>\n}</code></pre><p>最低限、</p>\n<ul>\n<li><code>name</code>\n<ul>\n<li>なまえ</li>\n</ul>\n</li>\n<li><code>short_name</code>\n<ul>\n<li>アプリ一覧で表示される名前</li>\n</ul>\n</li>\n</ul>\n<p>を書き換えればいいと思います。</p>\n<h2>ServiceWorker登録</h2>\n<p><code>index.html</code>を開きます。<br>\n開いたら、head内に以下のように書きます。<br>\nよくわからない場合は<code>&lt;title&gt;</code>の下辺りに書いておけばいいと思います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">&lt;!-- ウェブアプリマニフェストの読み込み --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"manifest\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"manifest.json\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- さーびすわーかー --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"serviceWorker\"</span> <span class=\"hljs-keyword\">in</span> navigator) {\n        navigator.serviceWorker\n            .register(<span class=\"hljs-string\">\"sw.js\"</span>)\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"registered service worker!\"</span>));\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h1>ここまででできたファイル</h1>\n<p><code>image</code>フォルダ以外はみんなあるよね？<br>\n<img src=\"https://imgur.com/ffmuHM6.png\" alt=\"Imgur\"></p>\n<h1>sw.jsを書く</h1>\n<p>sw.js白紙だとインストールのためのバナー（ホーム画面に {アプリ名} を追加）すら出ない模様。</p>\n<h2>キャッシュしなければいけないファイルを並べる</h2>\n<p>ここでファイル名を間違えるとキャッシュ取得諦めるのでちゃんと書きましょう。先生が生徒の名前間違えないようにするみたいな感じで</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// キャッシュしないといけないファイルを列挙する。間違えないように</span>\n<span class=\"hljs-keyword\">const</span> CACHE_LIST = [\n    <span class=\"hljs-string\">\"/icons/icon_192.png\"</span>,\n    <span class=\"hljs-string\">\"/icons/icon_512.png\"</span>,\n    <span class=\"hljs-string\">\"/image/play.png\"</span>,\n    <span class=\"hljs-string\">\"/image/result.png\"</span>,\n    <span class=\"hljs-string\">\"/image/title.png\"</span>,\n    <span class=\"hljs-string\">\"/image/tori.png\"</span>,\n    <span class=\"hljs-string\">\"index.html\"</span>,\n    <span class=\"hljs-string\">\"manifest.json\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>\n]</code></pre><h2>キャッシュに付ける名前</h2>\n<p>多分識別に使うと思います。同じ名前だったら取得しない、名前が変わっていたら再度取り直すみたいな感じだと思います。</p>\n<p>キャッシュ取得し直したい場合はここの値を変えることで再度取り直してくれます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// バージョンの名前。識別に使う</span>\n<span class=\"hljs-keyword\">const</span> VERSION_NAME = <span class=\"hljs-string\">'bird_20200627'</span> <span class=\"hljs-comment\">// ここの値が変わるとキャッシュを再登録するっぽい？</span></code></pre><h2><code>install</code> イベント</h2>\n<p>コピペで行けると思います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// インストール時に</span>\nself.addEventListener(<span class=\"hljs-string\">'install'</span>, event =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'インストールするぞ'</span>)\n    event.waitUntil(\n        caches.open(VERSION_NAME).then(<span class=\"hljs-function\"><span class=\"hljs-params\">cache</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">return</span> cache.addAll(CACHE_LIST) <span class=\"hljs-comment\">// キャッシュ登録</span>\n        }).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> { <span class=\"hljs-built_in\">console</span>.log(err) }) <span class=\"hljs-comment\">// えらー</span>\n    )\n})</code></pre><h2>リクエスト横取り</h2>\n<p>インターネットに画像リクエストしよー<br>\n↓<br>\nServiceWorkerが検知<br>\n↓<br>\nキャッシュがあればキャッシュを返す</p>\n<p>これを書きます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// リクエストを横取りする</span>\nself.addEventListener(<span class=\"hljs-string\">'fetch'</span>, event =&gt; {\n    <span class=\"hljs-comment\">// キャッシュの内容に置き換える</span>\n    event.respondWith(\n        caches.match(event.request).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> response || fetch(event.request);\n        })\n    );\n})</code></pre><h2>古いキャッシュを消す</h2>\n<p><strong>キャッシュに付ける名前</strong>の項目で、キャッシュを再度取り直してくれますなど言いましたが、これ勝手には消してくれないので消してくれるコードです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// 古いキャッシュを消す。</span>\nself.addEventListener(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n    event.waitUntil(\n        caches.keys().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheNames</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.all(\n                cacheNames.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheName</span>) </span>{\n                    <span class=\"hljs-keyword\">return</span> cacheName !== VERSION_NAME;\n                }).map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheName</span>) </span>{\n                    <span class=\"hljs-keyword\">return</span> caches.delete(cacheName);\n                })\n            );\n        })\n    );\n});</code></pre><h1>ここまでのsw.js</h1>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// キャッシュしないといけないファイルを列挙する。間違えないように</span>\n<span class=\"hljs-keyword\">const</span> CACHE_LIST = [\n    <span class=\"hljs-string\">\"/icons/icon_192.png\"</span>,\n    <span class=\"hljs-string\">\"/icons/icon_512.png\"</span>,\n    <span class=\"hljs-string\">\"/image/play.png\"</span>,\n    <span class=\"hljs-string\">\"/image/result.png\"</span>,\n    <span class=\"hljs-string\">\"/image/title.png\"</span>,\n    <span class=\"hljs-string\">\"/image/tori.png\"</span>,\n    <span class=\"hljs-string\">\"index.html\"</span>,\n    <span class=\"hljs-string\">\"manifest.json\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>\n]\n\n<span class=\"hljs-comment\">// バージョンの名前。識別に使う</span>\n<span class=\"hljs-keyword\">const</span> VERSION_NAME = <span class=\"hljs-string\">'bird_20200627'</span> <span class=\"hljs-comment\">// ここの値が変わるとキャッシュを再登録するっぽい？</span>\n\n<span class=\"hljs-comment\">// インストール時に</span>\nself.addEventListener(<span class=\"hljs-string\">'install'</span>, event =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'インストールするぞ'</span>)\n    event.waitUntil(\n        caches.open(VERSION_NAME).then(<span class=\"hljs-function\"><span class=\"hljs-params\">cache</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">return</span> cache.addAll(CACHE_LIST) <span class=\"hljs-comment\">// キャッシュ登録</span>\n        }).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> { <span class=\"hljs-built_in\">console</span>.log(err) }) <span class=\"hljs-comment\">// えらー</span>\n    )\n})\n\n<span class=\"hljs-comment\">// リクエストを横取りする</span>\nself.addEventListener(<span class=\"hljs-string\">'fetch'</span>, event =&gt; {\n    <span class=\"hljs-comment\">// キャッシュの内容に置き換える</span>\n    event.respondWith(\n        caches.match(event.request).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> response || fetch(event.request);\n        })\n    );\n})\n\n<span class=\"hljs-comment\">// 古いキャッシュを消す。</span>\nself.addEventListener(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n    event.waitUntil(\n        caches.keys().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheNames</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.all(\n                cacheNames.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheName</span>) </span>{\n                    <span class=\"hljs-keyword\">return</span> cacheName !== VERSION_NAME;\n                }).map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheName</span>) </span>{\n                    <span class=\"hljs-keyword\">return</span> caches.delete(cacheName);\n                })\n            );\n        })\n    );\n});</code></pre><h1>Web Server for Chrome を開いて</h1>\n<p><code>CHOOSE FOLDER</code>を押して、<code>index.html</code>のあるフォルダを指定します。<br>\nそしたら<code>Web Server</code>のスイッチを押して起動させます。</p>\n<p>起動できたら、<code>http://127.0.0.1</code>から始まるURLが<code>Web Server URL(s)</code>の下に表示されるので押します。するとWebページが表示されるようになるんですね～</p>\n<p>そしたらWebページを開いた状態で<code>F12</code>おして<code>Application</code>タブを押します。</p>\n<p>その中から<code>Cache Storage</code>を探して、キャッシュが取得できてるか確認しましょう。</p>\n<p><img src=\"https://i.imgur.com/PWEuyxl.png\" alt=\"Imgur\"></p>\n<p>このように登録されていれば完成です。おめ！</p>\n<p>ちなみに：本当なら<code>index.html</code>をブラウザで開くだけで見れるわけですが、Service Workerを動かすためにはURLが <code>https</code>で始まるか<code>localhost（127.0.0.1）</code>で始まる必要があるようです。<br>\nだから<strong>Web Server for Chrome</strong>を利用する必要があったのですね。</p>\n<h1>本当にオフラインで動くの？</h1>\n<p><code>Service Worker</code>を押して、<code>Offline</code>にチャックを入れます。<br>\n入れた後に再読み込みしても表示されている場合は動いてます。</p>\n<p><img src=\"https://i.imgur.com/Bjjxnvm.png\" alt=\"Imgur\"></p>\n<h1>Netlifyで公開</h1>\n<p>もう一回タイトル見てください。データプラン弱者がなんとかとか書いてあります。そうスマホで見れないと意味がないんですよ。</p>\n<p>というわけでNetlifyで公開します。<br>\nアカウントは各自作成してください。この記事に辿り着くってことはそれなりの知識があるはずです。</p>\n<h2>Netlify Drop</h2>\n<p>なんか<code>index.html</code>なんかが入ったフォルダをブラウザに投げるだけで公開できるらしい。</p>\n<p>というわけで<code>index.html sw.js manifest.json</code>もろもろ入ってるフォルダをNetlifyのサイトに投げましょう。この方法ならGitHubを経由すること無く公開できます。</p>\n<p><img src=\"https://i.imgur.com/wCFDJiW.png\" alt=\"Imgur\"></p>\n<h2>Site Settings &gt; Change site name からURLを変更</h2>\n<p><code>https:// {自由に決められる} .netlify.app</code>の自由に決められるの部分なら、自由に変更可能です。</p>\n<p><img src=\"https://i.imgur.com/911F4E7.png\" alt=\"Imgur\"></p>\n<p>自分の持ってるドメインを設定する場合は前に書きました→ <a href=\"/posts/domain_katta\">Google Domainsでドメイン買った</a></p>\n<p>以上です。<br>\n今回できたサイトはこちら。→ <a href=\"https://game-akashic-bird.negitoro.dev/\">https://game-akashic-bird.negitoro.dev/</a></p>\n<h1>おわりに</h1>\n<p>ところで今の所通信制限かかったことは無いと思われ</p>\n<p><img src=\"https://i.imgur.com/q8X1FOT.png\" alt=\"Imgur\"></p>\n<h1>参考にしました</h1>\n<p><a href=\"https://qiita.com/masanarih0ri/items/0845f312cff5c8d0ec60\">https://qiita.com/masanarih0ri/items/0845f312cff5c8d0ec60</a><br>\n<a href=\"https://www.simicart.com/blog/pwa-offline/\">https://www.simicart.com/blog/pwa-offline/</a></p>\n",
  "dir": "contents/posts/json",
  "base": "akashic_engine_pwa_cache.json",
  "ext": ".json",
  "sourceBase": "akashic_engine_pwa_cache.md",
  "sourceExt": ".md"
}