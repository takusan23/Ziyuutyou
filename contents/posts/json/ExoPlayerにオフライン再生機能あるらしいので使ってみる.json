{
  "title": "ExoPlayerにオフライン再生機能あるらしいので使ってみる",
  "created_at": "2020-05-09T20:21:48.000Z",
  "tags": [
    "Android",
    "ExoPlayer",
    "HLS",
    "Kotlin"
  ],
  "bodyContent": "どうもこんばんわ。  \n\n# 本題\nExoPlayerにオフライン再生用のメディアをダウンロードする機能があるらしい。  \n調べても全然出てこなかったのでサンプル置いておきますね。\n\n# オフライン再生用のファイルは\nよくわからんファイルだった。mp4とかではなかった。  \nファイルダウンローダーでは無いってことだね。\n\n# 参考にします\nhttps://exoplayer.dev/downloading-media.html\n\n# 環境\n| なまえ  | あたい  |\n|---------|---------|\n| Android | 11 DP 4 |\n| 言語    | Kotlin  |\n\n# つくる\n\n## 必要なもの\nmp4かhlsのアドレス。動画再生するので仕方ないね。\n\n## ExoPlayer導入\nappフォルダの方の`build.gradle`を開いて追加\n```gradle\ndependencies {\n    // ExoPlayer\n    implementation 'com.google.android.exoplayer:exoplayer-core:2.11.3'\n    implementation 'com.google.android.exoplayer:exoplayer-hls:2.11.3'\n    // 省略\n}\n```\n\n## AndroidManifest.xml\nサービス実行権限とインターネットアクセス権限が必要です。\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n```\n\n# サービス作成\n\n## AndroidManifest.xml\n```xml\n<service\n    android:name=\".DownloadServiceTest\"\n    android:exported=\"false\">\n    <!-- This is needed for Scheduler -->\n    <intent-filter>\n        <action android:name=\"com.google.android.exoplayer.downloadService.action.RESTART\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n    </intent-filter>\n</service>\n```\n\n## DownloadServiceTest.kt\n詳しくないのでなにも言えない。  \nついでに最低Androidバージョン間違えちゃったので、`@RequiresApi(Build.VERSION_CODES.O)`が入っちゃった。ごめんね。  \nあとAndroid 8以降で動くように勝手に`startForeground`呼んでるけどあってるのかな？\n\n```kotlin\nclass DownloadServiceTest : DownloadService(FOREGROUND_NOTIFICATION_ID_NONE) {\n\n    // 通知出すらしい\n    val NOTIFICATION_CHANNEL = \"cache_notification\"\n    val SERVICE_NOTIFICATION_CHANNEL = \"service_notification\"\n\n    // ?\n    val JOB_ID = 4545\n\n    /**\n     * Android 8からService使うには通知出さないといけなくなった。\n     * */\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreate() {\n        super.onCreate()\n        val notificationManager =\n            this.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        if (notificationManager.getNotificationChannel(SERVICE_NOTIFICATION_CHANNEL) == null) {\n            val notificationChannel =\n                NotificationChannel(SERVICE_NOTIFICATION_CHANNEL, \"ExoPlayerでダウンロードテスト通知\", NotificationManager.IMPORTANCE_LOW)\n            notificationManager.createNotificationChannel(notificationChannel)\n        }\n        val notification = Notification.Builder(this, SERVICE_NOTIFICATION_CHANNEL).apply {\n            setContentTitle(\"ExoPlayerでダウンロードテスト\")\n            setContentText(\"サービスが実行中です\")\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\n        }\n        startForeground(1, notification.build())\n    }\n\n    override fun getDownloadManager(): DownloadManager {\n        // Note: This should be a singleton in your app.\n        val databaseProvider = ExoDatabaseProvider(this)\n        // A download cache should not evict media, so should use a NoopCacheEvictor.\n        val downloadCache = SimpleCache(\n            File(\"${this.getExternalFilesDir(null)?.path}/cache\"),\n            NoOpCacheEvictor(),\n            databaseProvider\n        )\n        // Create a factory for reading the data from the network.\n        val dataSourceFactory =\n            DefaultHttpDataSourceFactory(\"@takusan_23\")\n        // Create the download manager.\n        val downloadManager = DownloadManager(\n            this,\n            databaseProvider,\n            downloadCache,\n            dataSourceFactory\n        )\n        downloadManager.addListener(object : DownloadManager.Listener {\n            override fun onIdle(downloadManager: DownloadManager) {\n                super.onIdle(downloadManager)\n                println(\"終了？\")\n            }\n        })\n        return downloadManager\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun getForegroundNotification(downloads: MutableList<Download>): Notification {\n        val notificationManager =\n            this.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        if (notificationManager.getNotificationChannel(NOTIFICATION_CHANNEL) == null) {\n            val notificationChannel =\n                NotificationChannel(NOTIFICATION_CHANNEL, \"オフライン再生準備\", NotificationManager.IMPORTANCE_LOW)\n            notificationManager.createNotificationChannel(notificationChannel)\n        }\n        val notification = Notification.Builder(this, NOTIFICATION_CHANNEL).apply {\n            setContentTitle(\"オフライン再生準備\")\n            setContentText(downloads.size.toString())\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\n        }\n        return notification.build()\n    }\n\n    override fun getScheduler(): Scheduler? {\n        return PlatformScheduler(this, JOB_ID)\n    }\n}\n```\n\nコピペで使えると思います。\n\n# Activity\n\n## レイアウト\n皆さんはちゃんとIDに名前つけてあげてね\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n    <SurfaceView\n        android:id=\"@+id/surfaceView\"\n        android:layout_width=\"160dp\"\n        android:layout_height=\"90dp\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"サービス起動\" />\n\n    <Button\n        android:id=\"@+id/button2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"取得\" />\n\n    <Button\n        android:id=\"@+id/button3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"再生\" />\n\n    <Button\n        android:id=\"@+id/button4\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"一時停止・再生\" />\n</LinearLayout>\n```\n\n## MainActivity.kt\n`CONTENT_URL`の中は各自インターネット上にあるDLしてもいい動画を指定しておいてください。\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    lateinit var exoPlayer: SimpleExoPlayer\n\n    // ネットにある動画URL指定しといて\n    val CONTENT_URL = \"\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        exoPlayer = SimpleExoPlayer.Builder(this).build()\n\n        button.setOnClickListener {\n            // サービス起動\n            val intent = Intent(this, DownloadServiceTest::class.java)\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                startForegroundService(intent)\n            } else {\n                startService(intent)\n            }\n        }\n\n        button2.setOnClickListener {\n            cache()\n        }\n\n        button3.setOnClickListener {\n            playCache()\n        }\n\n        button4.setOnClickListener {\n            if (::exoPlayer.isInitialized) {\n                exoPlayer.playWhenReady = !exoPlayer.playWhenReady\n            }\n        }\n\n    }\n\n    private fun cache() {\n        val downloadRequest = DownloadRequest(\n            \"cache\",\n            DownloadRequest.TYPE_PROGRESSIVE,\n            CONTENT_URL.toUri(),  /* streamKeys= */\n            Collections.emptyList(),  /* customCacheKey= */\n            null,\n            ByteArray(1024)\n        )\n        DownloadService.sendAddDownload(this, DownloadServiceTest::class.java, downloadRequest, false)\n    }\n\n    private fun playCache() {\n        val cache =\n            SimpleCache(File(\"${this.getExternalFilesDir(null)?.path}/cache\"), LeastRecentlyUsedCacheEvictor(1024), ExoDatabaseProvider(this))\n        val upstreamDataSourceFactory = DefaultDataSourceFactory(this, \"@takusan_23\")\n        val dataSourceFactory = CacheDataSourceFactory(\n            cache, upstreamDataSourceFactory\n        )\n        val mediaSource =\n            ProgressiveMediaSource.Factory(dataSourceFactory)\n                .createMediaSource(CONTENT_URL.toUri())\n        exoPlayer.prepare(mediaSource)\n        exoPlayer.setVideoSurfaceView(surfaceView)\n        exoPlayer.playWhenReady = true\n    }\n    \n    override fun onDestroy() {\n        super.onDestroy()\n        if (::exoPlayer.isInitialized) {\n            exoPlayer.release()\n        }\n    }\n\n}\n```\n\nこれで  \n**サービス起動**押して  \n**取得**を押すと取得を始めます。`cache()`関数  \n取得後**アプリを再起動**すると**再生**を押して再生ができます。`playCache()`関数  \n再起動する前に再生するとなんか落ちます。謎\n\n# HLSに対応する\nHLS版`cache()`、`playCache()`を作りました。  \n参考：https://exoplayer.dev/downloading-media.html\n\n```kotlin\nprivate fun cacheHLS() {\n    val sourceFactory = DefaultDataSourceFactory(\n        this,\n        \"@takusan_23\",\n        object : TransferListener {\n            override fun onTransferInitializing(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onTransferStart(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onTransferEnd(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onBytesTransferred(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean, bytesTransferred: Int) {\n            }\n        })\n    val downloadHelper = DownloadHelper.forHls(\n        this,\n        CONTENT_URL.toUri(),\n        sourceFactory,\n        DefaultRenderersFactory(this)\n    )\n    downloadHelper.prepare(object : DownloadHelper.Callback {\n        override fun onPrepared(helper: DownloadHelper) {\n            DownloadService.sendAddDownload(this@MainActivity, DownloadServiceTest::class.java, downloadHelper.getDownloadRequest(ByteArray(1024)), false)\n            downloadHelper.release()\n        }\n        override fun onPrepareError(helper: DownloadHelper, e: IOException) {\n        }\n    })\n}\nprivate fun playHLSCache() {\n    val cache =\n        SimpleCache(File(\"${this.getExternalFilesDir(null)?.path}/cache\"), LeastRecentlyUsedCacheEvictor(1024), ExoDatabaseProvider(this))\n    val upstreamDataSourceFactory = DefaultDataSourceFactory(this, \"@takusan_23\")\n    val dataSourceFactory = CacheDataSourceFactory(\n        cache, upstreamDataSourceFactory\n    )\n    val sourceFactory = DefaultDataSourceFactory(\n        this,\n        \"@takusan_23\",\n        object : TransferListener {\n            override fun onTransferInitializing(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onTransferStart(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onTransferEnd(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean) {\n            }\n            override fun onBytesTransferred(source: DataSource?, dataSpec: DataSpec?, isNetwork: Boolean, bytesTransferred: Int) {\n            }\n        })\n    val downloadHelper = DownloadHelper.forHls(\n        this,\n        CONTENT_URL.toUri(),\n        sourceFactory,\n        DefaultRenderersFactory(this)\n    )\n    downloadHelper.prepare(object : DownloadHelper.Callback {\n        override fun onPrepared(helper: DownloadHelper) {\n            val mediaSource =\n                DownloadHelper.createMediaSource(helper.getDownloadRequest(ByteArray(1024)), dataSourceFactory)\n            exoPlayer.prepare(mediaSource)\n            exoPlayer.setVideoSurfaceView(surfaceView)\n            exoPlayer.playWhenReady = true\n        }\n        override fun onPrepareError(helper: DownloadHelper, e: IOException) {\n        }\n    })\n}\n```\n\nよくわからんな。  \n\n# 終わりに\nもう良くわかんないからソースだけ置いておくわ。詳しい人たのんだ\nhttps://github.com/takusan23/ExoPlayerMediaDownloadSample",
  "bodyHtml": "<p>どうもこんばんわ。</p>\n<h1>本題</h1>\n<p>ExoPlayerにオフライン再生用のメディアをダウンロードする機能があるらしい。<br>\n調べても全然出てこなかったのでサンプル置いておきますね。</p>\n<h1>オフライン再生用のファイルは</h1>\n<p>よくわからんファイルだった。mp4とかではなかった。<br>\nファイルダウンローダーでは無いってことだね。</p>\n<h1>参考にします</h1>\n<p>https://exoplayer.dev/downloading-media.html</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android</td>\n<td>11 DP 4</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody>\n</table>\n<h1>つくる</h1>\n<h2>必要なもの</h2>\n<p>mp4かhlsのアドレス。動画再生するので仕方ないね。</p>\n<h2>ExoPlayer導入</h2>\n<p>appフォルダの方の<code>build.gradle</code>を開いて追加</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">dependencies</span> {\n    <span class=\"hljs-comment\">// ExoPlayer</span>\n    implementation <span class=\"hljs-string\">'com.google.android.exoplayer:exoplayer-core:2.11.3'</span>\n    implementation <span class=\"hljs-string\">'com.google.android.exoplayer:exoplayer-hls:2.11.3'</span>\n    <span class=\"hljs-comment\">// 省略</span>\n}</code></pre><h2>AndroidManifest.xml</h2>\n<p>サービス実行権限とインターネットアクセス権限が必要です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.INTERNET\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.FOREGROUND_SERVICE\"</span> /&gt;</span></code></pre><h1>サービス作成</h1>\n<h2>AndroidManifest.xml</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">service</span>\n    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".DownloadServiceTest\"</span>\n    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"false\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- This is needed for Scheduler --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.google.android.exoplayer.downloadService.action.RESTART\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">service</span>&gt;</span></code></pre><h2>DownloadServiceTest.kt</h2>\n<p>詳しくないのでなにも言えない。<br>\nついでに最低Androidバージョン間違えちゃったので、<code>@RequiresApi(Build.VERSION_CODES.O)</code>が入っちゃった。ごめんね。<br>\nあとAndroid 8以降で動くように勝手に<code>startForeground</code>呼んでるけどあってるのかな？</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DownloadServiceTest</span> : <span class=\"hljs-type\">DownloadService</span></span>(FOREGROUND_NOTIFICATION_ID_NONE) {\n\n    <span class=\"hljs-comment\">// 通知出すらしい</span>\n    <span class=\"hljs-keyword\">val</span> NOTIFICATION_CHANNEL = <span class=\"hljs-string\">\"cache_notification\"</span>\n    <span class=\"hljs-keyword\">val</span> SERVICE_NOTIFICATION_CHANNEL = <span class=\"hljs-string\">\"service_notification\"</span>\n\n    <span class=\"hljs-comment\">// ?</span>\n    <span class=\"hljs-keyword\">val</span> JOB_ID = <span class=\"hljs-number\">4545</span>\n\n    <span class=\"hljs-comment\">/**\n     * Android 8からService使うには通知出さないといけなくなった。\n     * */</span>\n    <span class=\"hljs-meta\">@RequiresApi(Build.VERSION_CODES.O)</span>\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate()\n        <span class=\"hljs-keyword\">val</span> notificationManager =\n            <span class=\"hljs-keyword\">this</span>.getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"hljs-keyword\">as</span> NotificationManager\n        <span class=\"hljs-keyword\">if</span> (notificationManager.getNotificationChannel(SERVICE_NOTIFICATION_CHANNEL) == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">val</span> notificationChannel =\n                NotificationChannel(SERVICE_NOTIFICATION_CHANNEL, <span class=\"hljs-string\">\"ExoPlayerでダウンロードテスト通知\"</span>, NotificationManager.IMPORTANCE_LOW)\n            notificationManager.createNotificationChannel(notificationChannel)\n        }\n        <span class=\"hljs-keyword\">val</span> notification = Notification.Builder(<span class=\"hljs-keyword\">this</span>, SERVICE_NOTIFICATION_CHANNEL).apply {\n            setContentTitle(<span class=\"hljs-string\">\"ExoPlayerでダウンロードテスト\"</span>)\n            setContentText(<span class=\"hljs-string\">\"サービスが実行中です\"</span>)\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\n        }\n        startForeground(<span class=\"hljs-number\">1</span>, notification.build())\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getDownloadManager</span><span class=\"hljs-params\">()</span></span>: DownloadManager {\n        <span class=\"hljs-comment\">// Note: This should be a singleton in your app.</span>\n        <span class=\"hljs-keyword\">val</span> databaseProvider = ExoDatabaseProvider(<span class=\"hljs-keyword\">this</span>)\n        <span class=\"hljs-comment\">// A download cache should not evict media, so should use a NoopCacheEvictor.</span>\n        <span class=\"hljs-keyword\">val</span> downloadCache = SimpleCache(\n            File(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${this.getExternalFilesDir(null)?.path}</span>/cache\"</span>),\n            NoOpCacheEvictor(),\n            databaseProvider\n        )\n        <span class=\"hljs-comment\">// Create a factory for reading the data from the network.</span>\n        <span class=\"hljs-keyword\">val</span> dataSourceFactory =\n            DefaultHttpDataSourceFactory(<span class=\"hljs-string\">\"@takusan_23\"</span>)\n        <span class=\"hljs-comment\">// Create the download manager.</span>\n        <span class=\"hljs-keyword\">val</span> downloadManager = DownloadManager(\n            <span class=\"hljs-keyword\">this</span>,\n            databaseProvider,\n            downloadCache,\n            dataSourceFactory\n        )\n        downloadManager.addListener(<span class=\"hljs-keyword\">object</span> : DownloadManager.Listener {\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onIdle</span><span class=\"hljs-params\">(downloadManager: <span class=\"hljs-type\">DownloadManager</span>)</span></span> {\n                <span class=\"hljs-keyword\">super</span>.onIdle(downloadManager)\n                println(<span class=\"hljs-string\">\"終了？\"</span>)\n            }\n        })\n        <span class=\"hljs-keyword\">return</span> downloadManager\n    }\n\n    <span class=\"hljs-meta\">@RequiresApi(Build.VERSION_CODES.O)</span>\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getForegroundNotification</span><span class=\"hljs-params\">(downloads: <span class=\"hljs-type\">MutableList</span>&lt;<span class=\"hljs-type\">Download</span>&gt;)</span></span>: Notification {\n        <span class=\"hljs-keyword\">val</span> notificationManager =\n            <span class=\"hljs-keyword\">this</span>.getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"hljs-keyword\">as</span> NotificationManager\n        <span class=\"hljs-keyword\">if</span> (notificationManager.getNotificationChannel(NOTIFICATION_CHANNEL) == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">val</span> notificationChannel =\n                NotificationChannel(NOTIFICATION_CHANNEL, <span class=\"hljs-string\">\"オフライン再生準備\"</span>, NotificationManager.IMPORTANCE_LOW)\n            notificationManager.createNotificationChannel(notificationChannel)\n        }\n        <span class=\"hljs-keyword\">val</span> notification = Notification.Builder(<span class=\"hljs-keyword\">this</span>, NOTIFICATION_CHANNEL).apply {\n            setContentTitle(<span class=\"hljs-string\">\"オフライン再生準備\"</span>)\n            setContentText(downloads.size.toString())\n            setSmallIcon(R.drawable.ic_file_download_black_24dp)\n        }\n        <span class=\"hljs-keyword\">return</span> notification.build()\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getScheduler</span><span class=\"hljs-params\">()</span></span>: Scheduler? {\n        <span class=\"hljs-keyword\">return</span> PlatformScheduler(<span class=\"hljs-keyword\">this</span>, JOB_ID)\n    }\n}</code></pre><p>コピペで使えると思います。</p>\n<h1>Activity</h1>\n<h2>レイアウト</h2>\n<p>皆さんはちゃんとIDに名前つけてあげてね</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:gravity</span>=<span class=\"hljs-string\">\"center\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n    <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SurfaceView</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/surfaceView\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"160dp\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"90dp\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"サービス起動\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button2\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"取得\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button3\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"再生\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button4\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"一時停止・再生\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><h2>MainActivity.kt</h2>\n<p><code>CONTENT_URL</code>の中は各自インターネット上にあるDLしてもいい動画を指定しておいてください。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span></span>() {\n\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> exoPlayer: SimpleExoPlayer\n\n    <span class=\"hljs-comment\">// ネットにある動画URL指定しといて</span>\n    <span class=\"hljs-keyword\">val</span> CONTENT_URL = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        exoPlayer = SimpleExoPlayer.Builder(<span class=\"hljs-keyword\">this</span>).build()\n\n        button.setOnClickListener {\n            <span class=\"hljs-comment\">// サービス起動</span>\n            <span class=\"hljs-keyword\">val</span> intent = Intent(<span class=\"hljs-keyword\">this</span>, DownloadServiceTest::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>)</span>\n            <span class=\"hljs-keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n                startForegroundService(intent)\n            } <span class=\"hljs-keyword\">else</span> {\n                startService(intent)\n            }\n        }\n\n        button2.setOnClickListener {\n            cache()\n        }\n\n        button3.setOnClickListener {\n            playCache()\n        }\n\n        button4.setOnClickListener {\n            <span class=\"hljs-keyword\">if</span> (::exoPlayer.isInitialized) {\n                exoPlayer.playWhenReady = !exoPlayer.playWhenReady\n            }\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> downloadRequest = DownloadRequest(\n            <span class=\"hljs-string\">\"cache\"</span>,\n            DownloadRequest.TYPE_PROGRESSIVE,\n            CONTENT_URL.toUri(),  <span class=\"hljs-comment\">/* streamKeys= */</span>\n            Collections.emptyList(),  <span class=\"hljs-comment\">/* customCacheKey= */</span>\n            <span class=\"hljs-literal\">null</span>,\n            ByteArray(<span class=\"hljs-number\">1024</span>)\n        )\n        DownloadService.sendAddDownload(<span class=\"hljs-keyword\">this</span>, DownloadServiceTest::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">downloadRequest</span>, <span class=\"hljs-type\">false)</span></span>\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">playCache</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> cache =\n            SimpleCache(File(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${this.getExternalFilesDir(null)?.path}</span>/cache\"</span>), LeastRecentlyUsedCacheEvictor(<span class=\"hljs-number\">1024</span>), ExoDatabaseProvider(<span class=\"hljs-keyword\">this</span>))\n        <span class=\"hljs-keyword\">val</span> upstreamDataSourceFactory = DefaultDataSourceFactory(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"@takusan_23\"</span>)\n        <span class=\"hljs-keyword\">val</span> dataSourceFactory = CacheDataSourceFactory(\n            cache, upstreamDataSourceFactory\n        )\n        <span class=\"hljs-keyword\">val</span> mediaSource =\n            ProgressiveMediaSource.Factory(dataSourceFactory)\n                .createMediaSource(CONTENT_URL.toUri())\n        exoPlayer.prepare(mediaSource)\n        exoPlayer.setVideoSurfaceView(surfaceView)\n        exoPlayer.playWhenReady = <span class=\"hljs-literal\">true</span>\n    }\n    \n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onDestroy</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onDestroy()\n        <span class=\"hljs-keyword\">if</span> (::exoPlayer.isInitialized) {\n            exoPlayer.release()\n        }\n    }\n\n}</code></pre><p>これで<br>\n<strong>サービス起動</strong>押して<br>\n<strong>取得</strong>を押すと取得を始めます。<code>cache()</code>関数<br>\n取得後<strong>アプリを再起動</strong>すると<strong>再生</strong>を押して再生ができます。<code>playCache()</code>関数<br>\n再起動する前に再生するとなんか落ちます。謎</p>\n<h1>HLSに対応する</h1>\n<p>HLS版<code>cache()</code>、<code>playCache()</code>を作りました。<br>\n参考：https://exoplayer.dev/downloading-media.html</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">cacheHLS</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> sourceFactory = DefaultDataSourceFactory(\n        <span class=\"hljs-keyword\">this</span>,\n        <span class=\"hljs-string\">\"@takusan_23\"</span>,\n        <span class=\"hljs-keyword\">object</span> : TransferListener {\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferInitializing</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferStart</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferEnd</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onBytesTransferred</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>, bytesTransferred: <span class=\"hljs-type\">Int</span>)</span></span> {\n            }\n        })\n    <span class=\"hljs-keyword\">val</span> downloadHelper = DownloadHelper.forHls(\n        <span class=\"hljs-keyword\">this</span>,\n        CONTENT_URL.toUri(),\n        sourceFactory,\n        DefaultRenderersFactory(<span class=\"hljs-keyword\">this</span>)\n    )\n    downloadHelper.prepare(<span class=\"hljs-keyword\">object</span> : DownloadHelper.Callback {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onPrepared</span><span class=\"hljs-params\">(helper: <span class=\"hljs-type\">DownloadHelper</span>)</span></span> {\n            DownloadService.sendAddDownload(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, DownloadServiceTest::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">downloadHelper.getDownloadRequest</span></span>(ByteArray(<span class=\"hljs-number\">1024</span>)), <span class=\"hljs-literal\">false</span>)\n            downloadHelper.release()\n        }\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onPrepareError</span><span class=\"hljs-params\">(helper: <span class=\"hljs-type\">DownloadHelper</span>, e: <span class=\"hljs-type\">IOException</span>)</span></span> {\n        }\n    })\n}\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">playHLSCache</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> cache =\n        SimpleCache(File(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${this.getExternalFilesDir(null)?.path}</span>/cache\"</span>), LeastRecentlyUsedCacheEvictor(<span class=\"hljs-number\">1024</span>), ExoDatabaseProvider(<span class=\"hljs-keyword\">this</span>))\n    <span class=\"hljs-keyword\">val</span> upstreamDataSourceFactory = DefaultDataSourceFactory(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"@takusan_23\"</span>)\n    <span class=\"hljs-keyword\">val</span> dataSourceFactory = CacheDataSourceFactory(\n        cache, upstreamDataSourceFactory\n    )\n    <span class=\"hljs-keyword\">val</span> sourceFactory = DefaultDataSourceFactory(\n        <span class=\"hljs-keyword\">this</span>,\n        <span class=\"hljs-string\">\"@takusan_23\"</span>,\n        <span class=\"hljs-keyword\">object</span> : TransferListener {\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferInitializing</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferStart</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onTransferEnd</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>)</span></span> {\n            }\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onBytesTransferred</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">DataSource</span>?, dataSpec: <span class=\"hljs-type\">DataSpec</span>?, isNetwork: <span class=\"hljs-type\">Boolean</span>, bytesTransferred: <span class=\"hljs-type\">Int</span>)</span></span> {\n            }\n        })\n    <span class=\"hljs-keyword\">val</span> downloadHelper = DownloadHelper.forHls(\n        <span class=\"hljs-keyword\">this</span>,\n        CONTENT_URL.toUri(),\n        sourceFactory,\n        DefaultRenderersFactory(<span class=\"hljs-keyword\">this</span>)\n    )\n    downloadHelper.prepare(<span class=\"hljs-keyword\">object</span> : DownloadHelper.Callback {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onPrepared</span><span class=\"hljs-params\">(helper: <span class=\"hljs-type\">DownloadHelper</span>)</span></span> {\n            <span class=\"hljs-keyword\">val</span> mediaSource =\n                DownloadHelper.createMediaSource(helper.getDownloadRequest(ByteArray(<span class=\"hljs-number\">1024</span>)), dataSourceFactory)\n            exoPlayer.prepare(mediaSource)\n            exoPlayer.setVideoSurfaceView(surfaceView)\n            exoPlayer.playWhenReady = <span class=\"hljs-literal\">true</span>\n        }\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onPrepareError</span><span class=\"hljs-params\">(helper: <span class=\"hljs-type\">DownloadHelper</span>, e: <span class=\"hljs-type\">IOException</span>)</span></span> {\n        }\n    })\n}</code></pre><p>よくわからんな。</p>\n<h1>終わりに</h1>\n<p>もう良くわかんないからソースだけ置いておくわ。詳しい人たのんだ\nhttps://github.com/takusan23/ExoPlayerMediaDownloadSample</p>\n",
  "dir": "contents/posts/json",
  "base": "ExoPlayerにオフライン再生機能あるらしいので使ってみる.json",
  "ext": ".json",
  "sourceBase": "ExoPlayerにオフライン再生機能あるらしいので使ってみる.md",
  "sourceExt": ".md"
}