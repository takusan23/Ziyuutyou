{
  "title": ".NET CoreでWPFアプリ作るぞ",
  "created_at": "2020/06/09",
  "tags": [
    "C#",
    "WPF",
    ".NETCore"
  ],
  "bodyContent": ".NET Coreってなに\r\n\r\n# ほんだい\r\nWPFなんてめったに触らんから未来の私がWPFやる時に見に来る記事。  \r\n[WPFアプリ作ったので](https://takusan23.github.io/Ziyuutyou/posts/mousecursor_wpf/)その時に躓いたことも一緒にかく\r\n\r\n# 環境\r\n|なまえ|あたい|\r\n|---|---|\r\n|OS|Windows 10 Pro 2004|\r\n|Visual Studio|Community 2019|\r\n\r\n# .NET Coreってなに\r\nしらない。なんかよくわからんけど使う。  \r\n.NET Coreはクロスプラットフォームって言われてるけど、WPFに関してはWindowsに依存してるから関係ないよ\r\n\r\n[ソース](https://docs.microsoft.com/ja-jp/windows/apps/desktop/modernize/modernize-wpf-tutorial)\r\n\r\n# Visual Studio 2019 入れる\r\n最新版入れましょう。最新版じゃないと`WPF App (.NET Core)`が選べないと思います。  \r\nちなみに私は最新版にアップデートする際、ダウンロードするファイルが3GBを超えてました。クソ長かったわ。\r\n\r\n# プロジェクト作成\r\n検索ボックスに`wpf`って入れれば出ます。  \r\n`.NET Framework`じゃないほうを選びましょうね。\r\n![Imgur](https://imgur.com/BHxIloY.png)\r\nその後の`プロジェクト名`とかは各自決めてね。\r\n\r\n# ぷよぐらみんぐ\r\n久々のC#くんです。  \r\n（多分）Androidと同じ感じで、xamlでレイアウト決めて、C#でプログラムを書いていく感じですが、ちょっと違うのね。\r\n\r\n- Androidの`findViewById`\r\n    - C#ではレイアウトに`Name`付けとけばC#から扱える。\r\n    - KotlinでfindViewByIdが省略できるみたいな感じで書ける。\r\n\r\n## レイアウト\r\n**MainWindow.xaml**\r\n\r\n```xml\r\n<Window x:Class=\"DotNetCoreWPF.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:DotNetCoreWPF\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <TextBox FontSize=\"20\" HorizontalAlignment=\"Center\" Name=\"TimeTextBox\" Text=\"\" TextWrapping=\"Wrap\" TextAlignment=\"Center\" VerticalAlignment=\"Center\" Height=\"30\" Width=\"228\"/>\r\n\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\n真ん中にテキストを表示する`TextBox`を置いただけです。  \r\n\r\n## C#\r\n**MainWindow.cs**\r\n上の`using`は省略してるので気をつけて\r\n```cs\r\nnamespace DotNetCoreWPF\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n\r\n            // タイマー初期化\r\n            var dispatcherTimer = new DispatcherTimer();\r\n            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);\r\n            dispatcherTimer.Interval = new TimeSpan(0, 0, 1);\r\n            dispatcherTimer.Start();\r\n\r\n        }\r\n\r\n        // タイマーで毎秒ここ呼ばれる。\r\n        private void dispatcherTimer_Tick(object sender, EventArgs e)\r\n        {\r\n            // 時間を表示\r\n            TimeTextBox.Text = DateTime.Now.ToString();\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\nこれでデジタル時計の完成です。はっっや\r\n\r\n![Imgur](https://imgur.com/ZmZzxBb.png)\r\n\r\n# exeにする\r\n`.NET Framework`時代ではどうやってexeを配布してたのかよくわかりませんが、  \r\n`.NET Core`では**自己完結型**が使えるそうです。（.NET Frameworkじゃできない？）  \r\n## 自己完結型 #とは\r\n必要なもの全部を一つの`exeファイル`にできる機能。  \r\nちょっと前だとWindowsのフリーソフトを入れる際に、**.NET Framework のバージョンなんとか以上が必要**みたいなやつがよくありましたが、  \r\n`.NET Core（正確には3.0から）`では.NET Core（.NET Frameworkの後継）が入っていないPCでも実行できるように、.NET Coreのランタイムやらなんやらを一つのexeにいれて環境に関係なく動くようになるらしい。  \r\n変わりにファイルサイズが大きくなるけど。  \r\n\r\n今回は`.NET Core ランタイム入り（.NET Core入ってないPCでも動くやつ）`と`.NET Coreのランタイム無し`の両方をやろうと思います。\r\n\r\n## ソリューションエクスプローラー開いて\r\n名前のところを押して**発行**を押します。\r\n![Imgur](https://imgur.com/xjXxEdu.png)\r\n\r\n**フォルダー**を選んで次へ\r\n![Imgur](https://imgur.com/WBZdhUB.png)\r\n\r\nそのまま**完了**押して良いと思います。\r\n![Imgur](https://imgur.com/gZPdL5D.png)\r\n\r\nそしたら後ろのVS 2019の内容が画像のように変わるので、**構成**のところの鉛筆マークを押します。\r\n![Imgur](https://imgur.com/dGv9U3Z.png)\r\n\r\nそしてこの先は作りたいexeファイルによって操作が変わります。\r\n\r\n# .NET Core ランタイム入りのexeファイルを作成する\r\n\r\nプロファイル設定で、**配置モード**を**自己完結**にします。  \r\nそれから、下の**ファイルの公開オプション**を押して、**単一ファイルの作成**にチェックを入れます。\r\n\r\n![Imgur](https://imgur.com/ARUKDNH.png)\r\n\r\nそしたら保存して、**発行**ボタンを押せば作成されます。\r\n作成された`exeファイル`は`bin/Release/netcoreapp3.1/publish`の中にあると思います。\r\n\r\n実際に起動してみたの図。これだけなのにファイルサイズでけえ。\r\n![Imgur](https://imgur.com/hN2DDg4.png)\r\n\r\n# .NET Core ランタイム無しのexeファイルを作成する\r\n\r\nプロファイル設定で、**配置モード**を**フレームワーク依存**にします。  \r\nそれから、下の**ファイルの公開オプション**を押して、**単一ファイルの作成**にチェックを入れます。\r\n\r\n![Imgur](https://imgur.com/sRKKtZN.png)\r\n\r\nそしたら保存して、**発行**ボタンを押せば作成されます。\r\n作成された`exeファイル`は`bin/Release/netcoreapp3.1/publish`の中にあると思います。\r\n\r\n\r\n実際に起動してみたの図。ファイルサイズは小さい。\r\n\r\n![Imgur](https://imgur.com/byF4X4v.png)\r\n\r\n\r\n# おわりに\r\nこれで正解なのかはよく分かっていない。 \r\n\r\nというかなんで`TextBox`使ったの？`TextBlock`で良かったじゃん。\r\n\r\n一応ソースコード置いときますね→https://github.com/takusan23/DotNetCoreWPF\r\n\r\nあと少しずれるんだけど、画像を入れても何故かコケる問題。画像を右クリックしてプロパティ選んで、ビルドアクションをリソースにすればいいのね。時間奪われた。\r\n\r\n# 参考にしました\r\nありがとうございます\r\n\r\n\r\nhttps://www.telerik.com/blogs/creating-a-single-exe-application-with-net-core\r\n\r\nhttps://techinfoofmicrosofttech.osscons.jp/index.php?.NET%20Core%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\r\n\r\nhttps://rksoftware.hatenablog.com/entry/2019/02/17/194701",
  "bodyHtml": "<p>.NET Coreってなに</p>\n<h1>ほんだい</h1>\n<p>WPFなんてめったに触らんから未来の私がWPFやる時に見に来る記事。<br>\n<a href=\"https://takusan23.github.io/Ziyuutyou/posts/mousecursor_wpf/\">WPFアプリ作ったので</a>その時に躓いたことも一緒にかく</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OS</td>\n<td>Windows 10 Pro 2004</td>\n</tr>\n<tr>\n<td>Visual Studio</td>\n<td>Community 2019</td>\n</tr>\n</tbody>\n</table>\n<h1>.NET Coreってなに</h1>\n<p>しらない。なんかよくわからんけど使う。<br>\n.NET Coreはクロスプラットフォームって言われてるけど、WPFに関してはWindowsに依存してるから関係ないよ</p>\n<p><a href=\"https://docs.microsoft.com/ja-jp/windows/apps/desktop/modernize/modernize-wpf-tutorial\">ソース</a></p>\n<h1>Visual Studio 2019 入れる</h1>\n<p>最新版入れましょう。最新版じゃないと<code>WPF App (.NET Core)</code>が選べないと思います。<br>\nちなみに私は最新版にアップデートする際、ダウンロードするファイルが3GBを超えてました。クソ長かったわ。</p>\n<h1>プロジェクト作成</h1>\n<p>検索ボックスに<code>wpf</code>って入れれば出ます。<br>\n<code>.NET Framework</code>じゃないほうを選びましょうね。\n<img src=\"https://imgur.com/BHxIloY.png\" alt=\"Imgur\">\nその後の<code>プロジェクト名</code>とかは各自決めてね。</p>\n<h1>ぷよぐらみんぐ</h1>\n<p>久々のC#くんです。<br>\n（多分）Androidと同じ感じで、xamlでレイアウト決めて、C#でプログラムを書いていく感じですが、ちょっと違うのね。</p>\n<ul>\n<li>Androidの<code>findViewById</code>\n<ul>\n<li>C#ではレイアウトに<code>Name</code>付けとけばC#から扱える。</li>\n<li>KotlinでfindViewByIdが省略できるみたいな感じで書ける。</li>\n</ul>\n</li>\n</ul>\n<h2>レイアウト</h2>\n<p><strong>MainWindow.xaml</strong></p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Window</span> <span class=\"hljs-attr\">x:Class</span>=<span class=\"hljs-string\">\"DotNetCoreWPF.MainWindow\"</span>\n        <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span>\n        <span class=\"hljs-attr\">xmlns:x</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span>\n        <span class=\"hljs-attr\">xmlns:d</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/expression/blend/2008\"</span>\n        <span class=\"hljs-attr\">xmlns:mc</span>=<span class=\"hljs-string\">\"http://schemas.openxmlformats.org/markup-compatibility/2006\"</span>\n        <span class=\"hljs-attr\">xmlns:local</span>=<span class=\"hljs-string\">\"clr-namespace:DotNetCoreWPF\"</span>\n        <span class=\"hljs-attr\">mc:Ignorable</span>=<span class=\"hljs-string\">\"d\"</span>\n        <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">\"MainWindow\"</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"450\"</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"800\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBox</span> <span class=\"hljs-attr\">FontSize</span>=<span class=\"hljs-string\">\"20\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"TimeTextBox\"</span> <span class=\"hljs-attr\">Text</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">TextWrapping</span>=<span class=\"hljs-string\">\"Wrap\"</span> <span class=\"hljs-attr\">TextAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"30\"</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"228\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Window</span>&gt;</span></code></pre><p>真ん中にテキストを表示する<code>TextBox</code>を置いただけです。</p>\n<h2>C#</h2>\n<p><strong>MainWindow.cs</strong>\n上の<code>using</code>は省略してるので気をつけて</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DotNetCoreWPF</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Interaction logic for MainWindow.xaml</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">partial</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainWindow</span> : <span class=\"hljs-title\">Window</span>\n    {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MainWindow</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            InitializeComponent();\n\n            <span class=\"hljs-comment\">// タイマー初期化</span>\n            <span class=\"hljs-keyword\">var</span> dispatcherTimer = <span class=\"hljs-keyword\">new</span> DispatcherTimer();\n            dispatcherTimer.Tick += <span class=\"hljs-keyword\">new</span> EventHandler(dispatcherTimer_Tick);\n            dispatcherTimer.Interval = <span class=\"hljs-keyword\">new</span> TimeSpan(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n            dispatcherTimer.Start();\n\n        }\n\n        <span class=\"hljs-comment\">// タイマーで毎秒ここ呼ばれる。</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dispatcherTimer_Tick</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, EventArgs e</span>)</span>\n        {\n            <span class=\"hljs-comment\">// 時間を表示</span>\n            TimeTextBox.Text = DateTime.Now.ToString();\n        }\n\n    }\n}</code></pre><p>これでデジタル時計の完成です。はっっや</p>\n<p><img src=\"https://imgur.com/ZmZzxBb.png\" alt=\"Imgur\"></p>\n<h1>exeにする</h1>\n<p><code>.NET Framework</code>時代ではどうやってexeを配布してたのかよくわかりませんが、<br>\n<code>.NET Core</code>では<strong>自己完結型</strong>が使えるそうです。（.NET Frameworkじゃできない？）</p>\n<h2>自己完結型 #とは</h2>\n<p>必要なもの全部を一つの<code>exeファイル</code>にできる機能。<br>\nちょっと前だとWindowsのフリーソフトを入れる際に、<strong>.NET Framework のバージョンなんとか以上が必要</strong>みたいなやつがよくありましたが、<br>\n<code>.NET Core（正確には3.0から）</code>では.NET Core（.NET Frameworkの後継）が入っていないPCでも実行できるように、.NET Coreのランタイムやらなんやらを一つのexeにいれて環境に関係なく動くようになるらしい。<br>\n変わりにファイルサイズが大きくなるけど。</p>\n<p>今回は<code>.NET Core ランタイム入り（.NET Core入ってないPCでも動くやつ）</code>と<code>.NET Coreのランタイム無し</code>の両方をやろうと思います。</p>\n<h2>ソリューションエクスプローラー開いて</h2>\n<p>名前のところを押して<strong>発行</strong>を押します。\n<img src=\"https://imgur.com/xjXxEdu.png\" alt=\"Imgur\"></p>\n<p><strong>フォルダー</strong>を選んで次へ\n<img src=\"https://imgur.com/WBZdhUB.png\" alt=\"Imgur\"></p>\n<p>そのまま<strong>完了</strong>押して良いと思います。\n<img src=\"https://imgur.com/gZPdL5D.png\" alt=\"Imgur\"></p>\n<p>そしたら後ろのVS 2019の内容が画像のように変わるので、<strong>構成</strong>のところの鉛筆マークを押します。\n<img src=\"https://imgur.com/dGv9U3Z.png\" alt=\"Imgur\"></p>\n<p>そしてこの先は作りたいexeファイルによって操作が変わります。</p>\n<h1>.NET Core ランタイム入りのexeファイルを作成する</h1>\n<p>プロファイル設定で、<strong>配置モード</strong>を<strong>自己完結</strong>にします。<br>\nそれから、下の<strong>ファイルの公開オプション</strong>を押して、<strong>単一ファイルの作成</strong>にチェックを入れます。</p>\n<p><img src=\"https://imgur.com/ARUKDNH.png\" alt=\"Imgur\"></p>\n<p>そしたら保存して、<strong>発行</strong>ボタンを押せば作成されます。\n作成された<code>exeファイル</code>は<code>bin/Release/netcoreapp3.1/publish</code>の中にあると思います。</p>\n<p>実際に起動してみたの図。これだけなのにファイルサイズでけえ。\n<img src=\"https://imgur.com/hN2DDg4.png\" alt=\"Imgur\"></p>\n<h1>.NET Core ランタイム無しのexeファイルを作成する</h1>\n<p>プロファイル設定で、<strong>配置モード</strong>を<strong>フレームワーク依存</strong>にします。<br>\nそれから、下の<strong>ファイルの公開オプション</strong>を押して、<strong>単一ファイルの作成</strong>にチェックを入れます。</p>\n<p><img src=\"https://imgur.com/sRKKtZN.png\" alt=\"Imgur\"></p>\n<p>そしたら保存して、<strong>発行</strong>ボタンを押せば作成されます。\n作成された<code>exeファイル</code>は<code>bin/Release/netcoreapp3.1/publish</code>の中にあると思います。</p>\n<p>実際に起動してみたの図。ファイルサイズは小さい。</p>\n<p><img src=\"https://imgur.com/byF4X4v.png\" alt=\"Imgur\"></p>\n<h1>おわりに</h1>\n<p>これで正解なのかはよく分かっていない。</p>\n<p>というかなんで<code>TextBox</code>使ったの？<code>TextBlock</code>で良かったじゃん。</p>\n<p>一応ソースコード置いときますね→https://github.com/takusan23/DotNetCoreWPF</p>\n<p>あと少しずれるんだけど、画像を入れても何故かコケる問題。画像を右クリックしてプロパティ選んで、ビルドアクションをリソースにすればいいのね。時間奪われた。</p>\n<h1>参考にしました</h1>\n<p>ありがとうございます</p>\n<p>https://www.telerik.com/blogs/creating-a-single-exe-application-with-net-core</p>\n<p>https://techinfoofmicrosofttech.osscons.jp/index.php?.NET%20Core%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4</p>\n<p>https://rksoftware.hatenablog.com/entry/2019/02/17/194701</p>\n",
  "dir": "contents/posts/json",
  "base": "dotnet_wpf.json",
  "ext": ".json",
  "sourceBase": "dotnet_wpf.md",
  "sourceExt": ".md"
}