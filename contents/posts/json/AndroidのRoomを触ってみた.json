{
  "title": "AndroidのRoomを触ってみた",
  "created_at": "2020-05-27T00:17:21.000Z",
  "tags": [
    "Android",
    "Room",
    "Kotlin",
    "データベース"
  ],
  "bodyContent": "どうもこんばんわ。眠いです。  \n冬休みの宿題では保健の課題が出ましたが、休校期間の宿題ではお昼ごはんを作る宿題が出ました。  \n\n# ほんだい\nAndroidのRoomってのを触ってみたい。SQLiteよりRoomを使うことを**Googleが強く推奨**してるのでそのうちやるんだしやるかって感じで。  \n\n# Room #とは\nデータベース。多分SQLiteを使いやすくした物だと思う。  \nそれで`抽象化レイヤ`ってなに？\n\n# SQLite vs Room\n| できること         | SQLite                     | Room                                                |\n|--------------------|----------------------------|-----------------------------------------------------|\n| クエリ             | アプリ実行時まで分からない | コンパイル時（それ以前にIDEが）間違いを教えてくれる |\n| UIスレッドでの実行 | できる                     | できない                                            |\n\nあとは各自調べてみて。既存のデータベースをRoomにも移行できるらしい？（要検証）\n\n# 環境\n| なまえ  | あたい                    |\n|---------|---------------------------|\n| 端末    | Pixel 3 XL / Nexus 7 2013 |\n| Android | 11 DP 4 / 10 Root権限あり |\n| 言語    | Kotlin                    |\n\n今回は生成後にデータベースのファイルを見てみたいのでRootedな端末を用意しました（んなことよりNexus 7の後継出せよ）\n\n# ライブラリ入れます\n#SQLite vs Room の項目で**RoomはUIスレッドでは使えない**仕様なため、Roomと一緒にコルーチンも入れます。\n```gradle\napply plugin: 'kotlin-kapt' // 一番上に\n// 省略\ndependencies {\n// Room\ndef room_version = \"2.2.5\"\nimplementation \"androidx.room:room-runtime:$room_version\"\nimplementation \"androidx.room:room-ktx:$room_version\"\nkapt \"androidx.room:room-compiler:$room_version\"\n// Coroutines\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\n// 省略\n}\n```\n\n# データベースつくる\n習うより慣れろで記事を書いてるので用語がわかりません。  \nRoomなデータベースを作るには3つのコンポーネントで構成されてるそうです。\n\n- RoomDatabase\n    - データベースにアクセスする時に使う\n- Entity\n    - データベースのテーブルです？\n    - 主キーとか名前とか保存したい値はここで定義します。\n    - SQLite時代では`create table ~`の部分。\n    - **データクラスです**\n- Dao\n    - データベースから値を取り出す時に使う。\n    - クエリとかはここに書く\n    - 追加とか削除とかは特にクエリ書かなくても（私もわからん）できる\n    - クエリは実行前に間違いを教えてくれる\n\n## Entity\n保存する値を定義します。Excelだと一番上の横の行ですね。  \n特に思いつかなかったのでメモでも保存してみますか\n\n```kotlin\n@Entity\ndata class TestDBEntity(\n    @PrimaryKey(autoGenerate = true) val id: Int = 0, // 主キー\n    @ColumnInfo(name = \"memo\") val memo: String\n)\n```\n\n### @PrimaryKeyと@ColumnInfoについて\n@Entityはおまじないです（テーブルですよって目印）  \n`@PrimaryKey`は主キーの設定の時に指定します。主キーが何なのかあんまよく分かってませんが多分消す時に便利です（他とは被らない）。\n後ろの`autoGenerate = true`は主キーを自動で生成しますよってことだと思います。\n`@ColumnInfo(name = \"memo\")`ってのはデータベースの中ではnameに指定した値（今回は`memo`ですが、多分スネークケースで書く）を使うけど、  \nプログラムから扱う時はデータクラスの変数名で書けるよってことだと思います。\n\n## Dao\nここではデータベースにアクセスする時に使う関数たちを書いていきます。  \nSQLite時代の`query()`みたいな役割です（それにしてもquery()の引数の後半null何個書くんだよって毎回思いますね）。\n\n```kotlin\n@Dao\ninterface TestDBDao {\n    /** 全データ取得 */\n    @Query(\"SELECT * FROM TestDBEntity\")\n    fun getAll(): List<TestDBEntity>\n    \n    /** データ更新 */\n    @Update\n    fun update(testDBEntity: TestDBEntity)\n\n    /** データ追加 */\n    @Insert\n    fun insert(testDBEntity: TestDBEntity)\n\n    /** データ削除 */\n    @Delete\n    fun delete(testDBEntity: TestDBEntity)\n}\n```\n\n`getAll()`のクエリ、ちゃんとFROMの`TestDBEntity`、ちゃんと補充されたのすごい  \n基本的なもの（@Insertとか）は最初からあるようです。  \n複雑なものはクエリを書けばできます。\n\n## データベース\n説明が難しいからなしで\n\n```kotlin\n@Database(entities = [TestDBEntity::class], version = 1)\nabstract class TestDB : RoomDatabase() {\n    abstract fun testDao(): TestDBDao\n}\n```\n\nこれで用意ができました。\n\n# Activityからデータベースにアクセスする\n\n## activity_main.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n    <EditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:ems=\"10\"\n        android:inputType=\"textPersonName\"\n        android:hint=\"メモ入れてね\"\n        android:text=\"\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <Button\n            android:id=\"@+id/add_button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"追加\" />\n\n        <Button\n            android:id=\"@+id/load_button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"読み込み\" />\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/memo_textview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</LinearLayout>\n```\n\n## MainActivity.kt\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // 読み込み\n        loadDB()\n\n        // 読み込みボタン押したら読み込む\n        load_button.setOnClickListener {\n            loadDB()\n        }\n\n        // 書き込む\n        add_button.setOnClickListener {\n            writeDB()\n        }\n\n    }\n\n    /** データクラスに追加する */\n    private fun writeDB() {\n        val text = editText.text.toString()\n        GlobalScope.launch {\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\n            val database =\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \"TestDB\").build()\n            val dao = database.testDao()\n            // 書き込むデータクラス作る\n            val data = TestDBEntity(memo = text)\n            // 書き込む\n            dao.insert(data)\n        }\n    }\n\n    /** データベースから読み込む */\n    private fun loadDB() {\n        GlobalScope.launch(Dispatchers.Main) {\n            // まっさらに\n            memo_textview.text = \"\"\n            // UIスレッドでは実行できないためコルーチン\n            val list = withContext(Dispatchers.IO) {\n                // データベース用意\n                val database =\n                    Room.databaseBuilder(this@MainActivity, TestDB::class.java, \"TestDB\").build()\n                val dao = database.testDao()\n                dao.getAll()\n            }\n            // TextViewに表示\n            list.forEach {\n                memo_textview.append(\"${it.memo}\\n\")\n            }\n        }\n    }\n}\n```\n\n起動して→メモを入力して→追加を押す→読み込み押す  \nと下に入力した内容が表示されているはずです。やったね８８８８８８\n\n{%asset_img add.png add%}\n\nSQLite時代の追加と比べて分かりやすくなってることがわかりますね～\n```kotlin\nval contentValues = ContentValues()\ncontentValues.put(\"memo\", \"めもだよー\")\nsqLiteDatabase.insert(\"table_name\", null, contentValues)\n```\n\n# 少し凝ったことをやる\n削除に関する関数を書き足してみる。  \nというわけで`TestDBDao.kt`に書き足します。\n\n```kotlin\n/** 指定したidのデータを消す */\n@Query(\"DELETE FROM TestDBEntity WHERE id = :id\")\nfun deleteById(id: Int)\n\n/** 指定したメモのデータを消す */\n@Query(\"DELETE FROM TestDBEntity WHERE memo = :memo\")\nfun deleteByMemo(memo:String)\n```\n\nSQLite時代ではこんな感じに書いてましたね\n\n```kotlin\ndelete(\"table_name\", \"memo=?\", arrayOf(memo))\n```\n\nこれはidが引数と同じ時に消すというクエリです（多分）  \n\nあとは消すボタンをActivityに置いて\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n    <EditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:ems=\"10\"\n        android:hint=\"メモ入れてね\"\n        android:inputType=\"textPersonName\"\n        android:text=\"\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <Button\n            android:id=\"@+id/add_button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"追加\" />\n\n        <Button\n            android:id=\"@+id/load_button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"読み込み\" />\n\n        <Button\n            android:id=\"@+id/delete_button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"削除\" />\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/memo_textview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</LinearLayout>\n```\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // 読み込み\n        loadDB()\n\n        // 読み込みボタン押したら読み込む\n        load_button.setOnClickListener {\n            loadDB()\n        }\n\n        // 書き込む\n        add_button.setOnClickListener {\n            writeDB()\n        }\n\n        // 削除する\n        delete_button.setOnClickListener {\n            deleteDB()\n        }\n\n    }\n\n    private fun deleteDB() {\n        val text = editText.text.toString()\n        GlobalScope.launch {\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\n            val database =\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \"TestDB\").build()\n            val dao = database.testDao()\n            // 削除する\n            dao.deleteByMemo(text)\n        }\n    }\n\n    /** データクラスに追加する */\n    private fun writeDB() {\n        val text = editText.text.toString()\n        GlobalScope.launch {\n            // データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前\n            val database =\n                Room.databaseBuilder(this@MainActivity, TestDB::class.java, \"TestDB\").build()\n            val dao = database.testDao()\n            // 書き込むデータクラス作る\n            val data = TestDBEntity(memo = text)\n            // 書き込む\n            dao.insert(data)\n        }\n    }\n\n    /** データベースから読み込む */\n    private fun loadDB() {\n        GlobalScope.launch(Dispatchers.Main) {\n            // まっさらに\n            memo_textview.text = \"\"\n            // UIスレッドでは実行できないためコルーチン\n            val list = withContext(Dispatchers.IO) {\n                // データベース用意\n                val database =\n                    Room.databaseBuilder(this@MainActivity, TestDB::class.java, \"TestDB\").build()\n                val dao = database.testDao()\n                dao.getAll()\n            }\n            // TextViewに表示\n            list.forEach {\n                memo_textview.append(\"id=${it.id} | memo=${it.memo}\\n\")\n            }\n        }\n    }\n}\n```\n\nこれですでにあるメモの内容を入れたら削除できる機能が追加されました。\n\n{%asset_img delete.png delete%}\n\n# Root取得済み環境でデータベースを覗く\n最近はAndroidのRoot化の話題あんま聞かないですね（XperiaはZ4から国内版はまじで取れなくなったし。）  \nそれどころか最近のdocomo版XperiaはFlashTool使ってもdocomo版のROMしか焼けないようになったそうです。  \n\nそれはそうとして、データベースのファイルはRoot権限が必要な領域（`/data/data/${packageName}/databases/TestDB`）に有るのでRoot権限あるかAndroid StudioのDevice Explolerで見る（開発中アプリなら見れる）しか無いと思います多分。  \n\n今回はデータベースが見れるアプリ（Root権限必須）を利用して作成したデータベースを覗いてみます。  \n\nhttps://play.google.com/store/apps/details?id=com.tomminosoftware.sqliteeditor&hl=ja\n\n{%asset_img root.png root%}\n\n# おわりに\nもっと早くからRoom使ってればよかった感。便利。  \nソースコード→ https://github.com/takusan23/AndroidRoomSample\n\nAndroid Beamが４んだせいでNexus7から写真送るの大変だった（）",
  "bodyHtml": "<p>どうもこんばんわ。眠いです。<br>\n冬休みの宿題では保健の課題が出ましたが、休校期間の宿題ではお昼ごはんを作る宿題が出ました。</p>\n<h1>ほんだい</h1>\n<p>AndroidのRoomってのを触ってみたい。SQLiteよりRoomを使うことを<strong>Googleが強く推奨</strong>してるのでそのうちやるんだしやるかって感じで。</p>\n<h1>Room #とは</h1>\n<p>データベース。多分SQLiteを使いやすくした物だと思う。<br>\nそれで<code>抽象化レイヤ</code>ってなに？</p>\n<h1>SQLite vs Room</h1>\n<table>\n<thead>\n<tr>\n<th>できること</th>\n<th>SQLite</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>クエリ</td>\n<td>アプリ実行時まで分からない</td>\n<td>コンパイル時（それ以前にIDEが）間違いを教えてくれる</td>\n</tr>\n<tr>\n<td>UIスレッドでの実行</td>\n<td>できる</td>\n<td>できない</td>\n</tr>\n</tbody>\n</table>\n<p>あとは各自調べてみて。既存のデータベースをRoomにも移行できるらしい？（要検証）</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>端末</td>\n<td>Pixel 3 XL / Nexus 7 2013</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>11 DP 4 / 10 Root権限あり</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody>\n</table>\n<p>今回は生成後にデータベースのファイルを見てみたいのでRootedな端末を用意しました（んなことよりNexus 7の後継出せよ）</p>\n<h1>ライブラリ入れます</h1>\n<p>#SQLite vs Room の項目で<strong>RoomはUIスレッドでは使えない</strong>仕様なため、Roomと一緒にコルーチンも入れます。</p>\n<pre><code class=\"hljs\">apply plugin: <span class=\"hljs-string\">'kotlin-kapt'</span> <span class=\"hljs-comment\">// 一番上に</span>\n<span class=\"hljs-comment\">// 省略</span>\n<span class=\"hljs-keyword\">dependencies</span> {\n<span class=\"hljs-comment\">// Room</span>\n<span class=\"hljs-keyword\">def</span> room_version = <span class=\"hljs-string\">\"2.2.5\"</span>\nimplementation <span class=\"hljs-string\">\"androidx.room:room-runtime:$room_version\"</span>\nimplementation <span class=\"hljs-string\">\"androidx.room:room-ktx:$room_version\"</span>\nkapt <span class=\"hljs-string\">\"androidx.room:room-compiler:$room_version\"</span>\n<span class=\"hljs-comment\">// Coroutines</span>\nimplementation <span class=\"hljs-string\">\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"</span>\nimplementation <span class=\"hljs-string\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"</span>\n<span class=\"hljs-comment\">// 省略</span>\n}</code></pre><h1>データベースつくる</h1>\n<p>習うより慣れろで記事を書いてるので用語がわかりません。<br>\nRoomなデータベースを作るには3つのコンポーネントで構成されてるそうです。</p>\n<ul>\n<li>RoomDatabase\n<ul>\n<li>データベースにアクセスする時に使う</li>\n</ul>\n</li>\n<li>Entity\n<ul>\n<li>データベースのテーブルです？</li>\n<li>主キーとか名前とか保存したい値はここで定義します。</li>\n<li>SQLite時代では<code>create table ~</code>の部分。</li>\n<li><strong>データクラスです</strong></li>\n</ul>\n</li>\n<li>Dao\n<ul>\n<li>データベースから値を取り出す時に使う。</li>\n<li>クエリとかはここに書く</li>\n<li>追加とか削除とかは特にクエリ書かなくても（私もわからん）できる</li>\n<li>クエリは実行前に間違いを教えてくれる</li>\n</ul>\n</li>\n</ul>\n<h2>Entity</h2>\n<p>保存する値を定義します。Excelだと一番上の横の行ですね。<br>\n特に思いつかなかったのでメモでも保存してみますか</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">@Entity</span>\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestDBEntity</span></span>(\n    <span class=\"hljs-meta\">@PrimaryKey(autoGenerate = true)</span> <span class=\"hljs-keyword\">val</span> id: <span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 主キー</span>\n    <span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"memo\"</span>)</span> <span class=\"hljs-keyword\">val</span> memo: String\n)</code></pre><h3>@PrimaryKeyと@ColumnInfoについて</h3>\n<p>@Entityはおまじないです（テーブルですよって目印）<br>\n<code>@PrimaryKey</code>は主キーの設定の時に指定します。主キーが何なのかあんまよく分かってませんが多分消す時に便利です（他とは被らない）。\n後ろの<code>autoGenerate = true</code>は主キーを自動で生成しますよってことだと思います。\n<code>@ColumnInfo(name = &quot;memo&quot;)</code>ってのはデータベースの中ではnameに指定した値（今回は<code>memo</code>ですが、多分スネークケースで書く）を使うけど、<br>\nプログラムから扱う時はデータクラスの変数名で書けるよってことだと思います。</p>\n<h2>Dao</h2>\n<p>ここではデータベースにアクセスする時に使う関数たちを書いていきます。<br>\nSQLite時代の<code>query()</code>みたいな役割です（それにしてもquery()の引数の後半null何個書くんだよって毎回思いますね）。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">@Dao</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TestDBDao</span> </span>{\n    <span class=\"hljs-comment\">/** 全データ取得 */</span>\n    <span class=\"hljs-meta\">@Query(<span class=\"hljs-meta-string\">\"SELECT * FROM TestDBEntity\"</span>)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span></span>: List&lt;TestDBEntity&gt;\n    \n    <span class=\"hljs-comment\">/** データ更新 */</span>\n    <span class=\"hljs-meta\">@Update</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(testDBEntity: <span class=\"hljs-type\">TestDBEntity</span>)</span></span>\n\n    <span class=\"hljs-comment\">/** データ追加 */</span>\n    <span class=\"hljs-meta\">@Insert</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(testDBEntity: <span class=\"hljs-type\">TestDBEntity</span>)</span></span>\n\n    <span class=\"hljs-comment\">/** データ削除 */</span>\n    <span class=\"hljs-meta\">@Delete</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(testDBEntity: <span class=\"hljs-type\">TestDBEntity</span>)</span></span>\n}</code></pre><p><code>getAll()</code>のクエリ、ちゃんとFROMの<code>TestDBEntity</code>、ちゃんと補充されたのすごい<br>\n基本的なもの（@Insertとか）は最初からあるようです。<br>\n複雑なものはクエリを書けばできます。</p>\n<h2>データベース</h2>\n<p>説明が難しいからなしで</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">@Database(entities = [TestDBEntity::class], version = 1)</span>\n<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestDB</span> : <span class=\"hljs-type\">RoomDatabase</span></span>() {\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">testDao</span><span class=\"hljs-params\">()</span></span>: TestDBDao\n}</code></pre><p>これで用意ができました。</p>\n<h1>Activityからデータベースにアクセスする</h1>\n<h2>activity_main.xml</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n    <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EditText</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/editText\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:ems</span>=<span class=\"hljs-string\">\"10\"</span>\n        <span class=\"hljs-attr\">android:inputType</span>=<span class=\"hljs-string\">\"textPersonName\"</span>\n        <span class=\"hljs-attr\">android:hint</span>=<span class=\"hljs-string\">\"メモ入れてね\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/add_button\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span>\n            <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"追加\"</span> /&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/load_button\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span>\n            <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"読み込み\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextView</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/memo_textview\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"hljs-string\">\"parent\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><h2>MainActivity.kt</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        <span class=\"hljs-comment\">// 読み込み</span>\n        loadDB()\n\n        <span class=\"hljs-comment\">// 読み込みボタン押したら読み込む</span>\n        load_button.setOnClickListener {\n            loadDB()\n        }\n\n        <span class=\"hljs-comment\">// 書き込む</span>\n        add_button.setOnClickListener {\n            writeDB()\n        }\n\n    }\n\n    <span class=\"hljs-comment\">/** データクラスに追加する */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">writeDB</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> text = editText.text.toString()\n        GlobalScope.launch {\n            <span class=\"hljs-comment\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\n            <span class=\"hljs-keyword\">val</span> database =\n                Room.databaseBuilder(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, TestDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"TestDB\").build</span></span>()\n            <span class=\"hljs-keyword\">val</span> dao = database.testDao()\n            <span class=\"hljs-comment\">// 書き込むデータクラス作る</span>\n            <span class=\"hljs-keyword\">val</span> <span class=\"hljs-keyword\">data</span> = TestDBEntity(memo = text)\n            <span class=\"hljs-comment\">// 書き込む</span>\n            dao.insert(<span class=\"hljs-keyword\">data</span>)\n        }\n    }\n\n    <span class=\"hljs-comment\">/** データベースから読み込む */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">loadDB</span><span class=\"hljs-params\">()</span></span> {\n        GlobalScope.launch(Dispatchers.Main) {\n            <span class=\"hljs-comment\">// まっさらに</span>\n            memo_textview.text = <span class=\"hljs-string\">\"\"</span>\n            <span class=\"hljs-comment\">// UIスレッドでは実行できないためコルーチン</span>\n            <span class=\"hljs-keyword\">val</span> list = withContext(Dispatchers.IO) {\n                <span class=\"hljs-comment\">// データベース用意</span>\n                <span class=\"hljs-keyword\">val</span> database =\n                    Room.databaseBuilder(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, TestDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"TestDB\").build</span></span>()\n                <span class=\"hljs-keyword\">val</span> dao = database.testDao()\n                dao.getAll()\n            }\n            <span class=\"hljs-comment\">// TextViewに表示</span>\n            list.forEach {\n                memo_textview.append(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${it.memo}</span>\\n\"</span>)\n            }\n        }\n    }\n}</code></pre><p>起動して→メモを入力して→追加を押す→読み込み押す<br>\nと下に入力した内容が表示されているはずです。やったね８８８８８８</p>\n<p>{%asset_img add.png add%}</p>\n<p>SQLite時代の追加と比べて分かりやすくなってることがわかりますね～</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">val</span> contentValues = ContentValues()\ncontentValues.put(<span class=\"hljs-string\">\"memo\"</span>, <span class=\"hljs-string\">\"めもだよー\"</span>)\nsqLiteDatabase.insert(<span class=\"hljs-string\">\"table_name\"</span>, <span class=\"hljs-literal\">null</span>, contentValues)</code></pre><h1>少し凝ったことをやる</h1>\n<p>削除に関する関数を書き足してみる。<br>\nというわけで<code>TestDBDao.kt</code>に書き足します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/** 指定したidのデータを消す */</span>\n<span class=\"hljs-meta\">@Query(<span class=\"hljs-meta-string\">\"DELETE FROM TestDBEntity WHERE id = :id\"</span>)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">deleteById</span><span class=\"hljs-params\">(id: <span class=\"hljs-type\">Int</span>)</span></span>\n\n<span class=\"hljs-comment\">/** 指定したメモのデータを消す */</span>\n<span class=\"hljs-meta\">@Query(<span class=\"hljs-meta-string\">\"DELETE FROM TestDBEntity WHERE memo = :memo\"</span>)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">deleteByMemo</span><span class=\"hljs-params\">(memo:<span class=\"hljs-type\">String</span>)</span></span></code></pre><p>SQLite時代ではこんな感じに書いてましたね</p>\n<pre><code class=\"hljs\">delete(<span class=\"hljs-string\">\"table_name\"</span>, <span class=\"hljs-string\">\"memo=?\"</span>, arrayOf(memo))</code></pre><p>これはidが引数と同じ時に消すというクエリです（多分）</p>\n<p>あとは消すボタンをActivityに置いて</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n    <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EditText</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/editText\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:ems</span>=<span class=\"hljs-string\">\"10\"</span>\n        <span class=\"hljs-attr\">android:hint</span>=<span class=\"hljs-string\">\"メモ入れてね\"</span>\n        <span class=\"hljs-attr\">android:inputType</span>=<span class=\"hljs-string\">\"textPersonName\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/add_button\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span>\n            <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"追加\"</span> /&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/load_button\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span>\n            <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"読み込み\"</span> /&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/delete_button\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span>\n            <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"削除\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextView</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/memo_textview\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"hljs-string\">\"parent\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        <span class=\"hljs-comment\">// 読み込み</span>\n        loadDB()\n\n        <span class=\"hljs-comment\">// 読み込みボタン押したら読み込む</span>\n        load_button.setOnClickListener {\n            loadDB()\n        }\n\n        <span class=\"hljs-comment\">// 書き込む</span>\n        add_button.setOnClickListener {\n            writeDB()\n        }\n\n        <span class=\"hljs-comment\">// 削除する</span>\n        delete_button.setOnClickListener {\n            deleteDB()\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">deleteDB</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> text = editText.text.toString()\n        GlobalScope.launch {\n            <span class=\"hljs-comment\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\n            <span class=\"hljs-keyword\">val</span> database =\n                Room.databaseBuilder(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, TestDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"TestDB\").build</span></span>()\n            <span class=\"hljs-keyword\">val</span> dao = database.testDao()\n            <span class=\"hljs-comment\">// 削除する</span>\n            dao.deleteByMemo(text)\n        }\n    }\n\n    <span class=\"hljs-comment\">/** データクラスに追加する */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">writeDB</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> text = editText.text.toString()\n        GlobalScope.launch {\n            <span class=\"hljs-comment\">// データベース用意。「TestDB」は実際に作られるデータベースのファイルの名前</span>\n            <span class=\"hljs-keyword\">val</span> database =\n                Room.databaseBuilder(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, TestDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"TestDB\").build</span></span>()\n            <span class=\"hljs-keyword\">val</span> dao = database.testDao()\n            <span class=\"hljs-comment\">// 書き込むデータクラス作る</span>\n            <span class=\"hljs-keyword\">val</span> <span class=\"hljs-keyword\">data</span> = TestDBEntity(memo = text)\n            <span class=\"hljs-comment\">// 書き込む</span>\n            dao.insert(<span class=\"hljs-keyword\">data</span>)\n        }\n    }\n\n    <span class=\"hljs-comment\">/** データベースから読み込む */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">loadDB</span><span class=\"hljs-params\">()</span></span> {\n        GlobalScope.launch(Dispatchers.Main) {\n            <span class=\"hljs-comment\">// まっさらに</span>\n            memo_textview.text = <span class=\"hljs-string\">\"\"</span>\n            <span class=\"hljs-comment\">// UIスレッドでは実行できないためコルーチン</span>\n            <span class=\"hljs-keyword\">val</span> list = withContext(Dispatchers.IO) {\n                <span class=\"hljs-comment\">// データベース用意</span>\n                <span class=\"hljs-keyword\">val</span> database =\n                    Room.databaseBuilder(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>, TestDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"TestDB\").build</span></span>()\n                <span class=\"hljs-keyword\">val</span> dao = database.testDao()\n                dao.getAll()\n            }\n            <span class=\"hljs-comment\">// TextViewに表示</span>\n            list.forEach {\n                memo_textview.append(<span class=\"hljs-string\">\"id=<span class=\"hljs-subst\">${it.id}</span> | memo=<span class=\"hljs-subst\">${it.memo}</span>\\n\"</span>)\n            }\n        }\n    }\n}</code></pre><p>これですでにあるメモの内容を入れたら削除できる機能が追加されました。</p>\n<p>{%asset_img delete.png delete%}</p>\n<h1>Root取得済み環境でデータベースを覗く</h1>\n<p>最近はAndroidのRoot化の話題あんま聞かないですね（XperiaはZ4から国内版はまじで取れなくなったし。）<br>\nそれどころか最近のdocomo版XperiaはFlashTool使ってもdocomo版のROMしか焼けないようになったそうです。</p>\n<p>それはそうとして、データベースのファイルはRoot権限が必要な領域（<code>/data/data/${packageName}/databases/TestDB</code>）に有るのでRoot権限あるかAndroid StudioのDevice Explolerで見る（開発中アプリなら見れる）しか無いと思います多分。</p>\n<p>今回はデータベースが見れるアプリ（Root権限必須）を利用して作成したデータベースを覗いてみます。</p>\n<p>https://play.google.com/store/apps/details?id=com.tomminosoftware.sqliteeditor&amp;hl=ja</p>\n<p>{%asset_img root.png root%}</p>\n<h1>おわりに</h1>\n<p>もっと早くからRoom使ってればよかった感。便利。<br>\nソースコード→ https://github.com/takusan23/AndroidRoomSample</p>\n<p>Android Beamが４んだせいでNexus7から写真送るの大変だった（）</p>\n",
  "dir": "contents/posts/json",
  "base": "AndroidのRoomを触ってみた.json",
  "ext": ".json",
  "sourceBase": "AndroidのRoomを触ってみた.md",
  "sourceExt": ".md"
}