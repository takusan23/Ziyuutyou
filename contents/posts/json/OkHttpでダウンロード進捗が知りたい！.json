{
  "title": "OkHttpでダウンロード進捗が知りたい！",
  "created_at": "2020-05-09T00:35:36.000Z",
  "tags": [
    "Android",
    "OkHttp",
    "Kotlin"
  ],
  "bodyContent": "どうもこんばんわ。  \nAndroid 11 Betaが6/3に来るそうですよ。  \nそれとは関係ないんだけどインターネットが遅い。今はそこそこ出てるけど。\n# 本題\nAndroidアプリでファイルダウンロードする時に使える**DownloadManager**ってのがあるんですけど、使えない理由が発生したのでOkHttp代替しようって話です。\n\n## DownloadManagerとは\nファイルダウンロード時に使える。特に難しいこと(`inputStream`とか)しなくても保存してくれる。  \n一行コード書けば通知領域に進捗をだせる。\n\n## なんで使えないの\nAndroid 10から7日過ぎたファイルを勝手に消すようになった。というか7日前に消えてる気がする。  \nちなみにファイル名を変えれば削除を回避できるけどなんかなあ。\n\n# 環境\n| なまえ  | あたい  |\n|---------|---------|\n| Android | 11 DP 4 |\n| 言語    | Kotlin  |\n\n# 代替案：OkHttp\n(API叩く時に使う)OkHttpで保存できればいいのでは！\n\n## ただダウンロードするだけなら\n- urlの中にDLしたいファイルのURL貼り付けてね。  \n- 保存場所は`Android/data/{PackageName}/files/test.mp4`です。\n```kotlin\nfun get() {\n    val request = Request.Builder().apply {\n        url(\"\")\n        get()\n    }.build()\n    val okHttpClient = OkHttpClient()\n    okHttpClient.newCall(request).enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n        }\n        override fun onResponse(call: Call, response: Response) {\n            val file = File(\"${getExternalFilesDir(null)}/test.mp4\")\n            val byteArray = response.body?.bytes()\n            if (byteArray != null) {\n                file.writeBytes(byteArray)\n            }\n        }\n    })\n}\n```\n\n## ダウンロードの進捗の計算\n計算とか言ったけど大した計算はしない（パーセントを求める式を使う）、  \n`File#writeBytes()`で保存部分省略してるので進捗もなにもない。\n\n# OkHttpにダウンロード進捗（パーセント）付ける！！\n\n## gradle.build\ndependenciesに一行足す\n```gradle\ndependencies {\n    implementation(\"com.squareup.okhttp3:okhttp:4.6.0\")\n}\n```\n\n## activity_main.xml(レイアウト)\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n\n    <ProgressBar\n        android:id=\"@+id/progressBar\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\" />\n\n\n    <TextView\n        android:id=\"@+id/progressTextView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:text=\"0%\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"データ取得\" />\n\n</LinearLayout>\n```\n\n## AndroidManifest.xml\nインターネット接続パーミッション付けといて。\n\n## MainActivity.kt\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        button.setOnClickListener {\n            getData()\n        }\n\n    }\n\n    fun getData() {\n        val request = Request.Builder().apply {\n            url(\"\")\n            get()\n        }.build()\n        val okHttpClient = OkHttpClient()\n        okHttpClient.newCall(request).enqueue(object : Callback {\n            override fun onFailure(call: Call, e: IOException) {\n\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                val file = File(\"${getExternalFilesDir(null)}/test.mp4\")\n                val inputStream = response.body?.byteStream()\n                val outputStream = file.outputStream()\n                val buff = ByteArray(1024 * 4)\n                val target = response.body?.contentLength() // 合計サイズ\n                var progress = 0L\n                // プログレスバーの最大値設定\n                runOnUiThread {\n                    progressBar.max = target?.toInt()!!\n                }\n                while (true) {\n                    val read = inputStream?.read(buff)\n                    if (read == -1 || read == null || target == null) {\n                        break\n                    }\n                    progress += read\n                    outputStream.write(buff, 0, read)\n                    // UI更新\n                    runOnUiThread {\n                        // プログレスバー進める\n                        progressBar.progress = progress.toInt()\n                        // パーセントの式。\n                        progressTextView.text =\n                            \"${((progress.toFloat() / target.toFloat()) * 100).toInt()} %\"\n                    }\n                }\n                inputStream?.close()\n                outputStream.close()\n            }\n        })\n    }\n}\n```\n\nパーセントはこの部分で計算してます。~~(プログラミング要素っていうか数学かな？)~~\n```kotlin\n// パーセントの式。\nprogressTextView.text =\n    \"${((progress.toFloat() / target.toFloat()) * 100).toInt()} %\"\n```\n\nこれでOkHttpで進捗付きでダウンロードができるようになりました。わーい\n\t\n{% asset_img download.png download %}\n\n# おわりに\n**DownloadManagerをAndroid 10以降でも使いたい人はダウンロード後にファイル名変更しないと消されます。**  \nあと成功してるかどうか`response.isSuccessful`で成功時のみ保存するようにしたほうがいいと思った。(だったら書き直せ)  \nあとJava読めるマンはこれ読んだほうがいいと思う→ https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java\n# ソースコード\nhttps://github.com/takusan23/OkHttpProgress\n# 参考にしました\nhttps://stackoverflow.com/questions/26114299/squares-okhttp-download-progress  \nhttps://medium.com/@mkaflowski/disappearing-files-downloaded-by-downloadmanager-7c9ee5c6a66a",
  "bodyHtml": "<p>どうもこんばんわ。<br>\nAndroid 11 Betaが6/3に来るそうですよ。<br>\nそれとは関係ないんだけどインターネットが遅い。今はそこそこ出てるけど。</p>\n<h1>本題</h1>\n<p>Androidアプリでファイルダウンロードする時に使える<strong>DownloadManager</strong>ってのがあるんですけど、使えない理由が発生したのでOkHttp代替しようって話です。</p>\n<h2>DownloadManagerとは</h2>\n<p>ファイルダウンロード時に使える。特に難しいこと(<code>inputStream</code>とか)しなくても保存してくれる。<br>\n一行コード書けば通知領域に進捗をだせる。</p>\n<h2>なんで使えないの</h2>\n<p>Android 10から7日過ぎたファイルを勝手に消すようになった。というか7日前に消えてる気がする。<br>\nちなみにファイル名を変えれば削除を回避できるけどなんかなあ。</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android</td>\n<td>11 DP 4</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody>\n</table>\n<h1>代替案：OkHttp</h1>\n<p>(API叩く時に使う)OkHttpで保存できればいいのでは！</p>\n<h2>ただダウンロードするだけなら</h2>\n<ul>\n<li>urlの中にDLしたいファイルのURL貼り付けてね。</li>\n<li>保存場所は<code>Android/data/{PackageName}/files/test.mp4</code>です。</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> request = Request.Builder().apply {\n        url(<span class=\"hljs-string\">\"\"</span>)\n        <span class=\"hljs-keyword\">get</span>()\n    }.build()\n    <span class=\"hljs-keyword\">val</span> okHttpClient = OkHttpClient()\n    okHttpClient.newCall(request).enqueue(<span class=\"hljs-keyword\">object</span> : Callback {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onFailure</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>, e: <span class=\"hljs-type\">IOException</span>)</span></span> {\n        }\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>, response: <span class=\"hljs-type\">Response</span>)</span></span> {\n            <span class=\"hljs-keyword\">val</span> file = File(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${getExternalFilesDir(null)}</span>/test.mp4\"</span>)\n            <span class=\"hljs-keyword\">val</span> byteArray = response.body?.bytes()\n            <span class=\"hljs-keyword\">if</span> (byteArray != <span class=\"hljs-literal\">null</span>) {\n                file.writeBytes(byteArray)\n            }\n        }\n    })\n}</code></pre><h2>ダウンロードの進捗の計算</h2>\n<p>計算とか言ったけど大した計算はしない（パーセントを求める式を使う）、<br>\n<code>File#writeBytes()</code>で保存部分省略してるので進捗もなにもない。</p>\n<h1>OkHttpにダウンロード進捗（パーセント）付ける！！</h1>\n<h2>gradle.build</h2>\n<p>dependenciesに一行足す</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">dependencies</span> {\n    implementation(<span class=\"hljs-string\">\"com.squareup.okhttp3:okhttp:4.6.0\"</span>)\n}</code></pre><h2>activity_main.xml(レイアウト)</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:gravity</span>=<span class=\"hljs-string\">\"center\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n    <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span>\n\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ProgressBar</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/progressBar\"</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"?android:attr/progressBarStyleHorizontal\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_margin</span>=<span class=\"hljs-string\">\"10dp\"</span> /&gt;</span>\n\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextView</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/progressTextView\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_margin</span>=<span class=\"hljs-string\">\"10dp\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"0%\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"データ取得\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><h2>AndroidManifest.xml</h2>\n<p>インターネット接続パーミッション付けといて。</p>\n<h2>MainActivity.kt</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        button.setOnClickListener {\n            getData()\n        }\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getData</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">val</span> request = Request.Builder().apply {\n            url(<span class=\"hljs-string\">\"\"</span>)\n            <span class=\"hljs-keyword\">get</span>()\n        }.build()\n        <span class=\"hljs-keyword\">val</span> okHttpClient = OkHttpClient()\n        okHttpClient.newCall(request).enqueue(<span class=\"hljs-keyword\">object</span> : Callback {\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onFailure</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>, e: <span class=\"hljs-type\">IOException</span>)</span></span> {\n\n            }\n\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>, response: <span class=\"hljs-type\">Response</span>)</span></span> {\n                <span class=\"hljs-keyword\">val</span> file = File(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${getExternalFilesDir(null)}</span>/test.mp4\"</span>)\n                <span class=\"hljs-keyword\">val</span> inputStream = response.body?.byteStream()\n                <span class=\"hljs-keyword\">val</span> outputStream = file.outputStream()\n                <span class=\"hljs-keyword\">val</span> buff = ByteArray(<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">4</span>)\n                <span class=\"hljs-keyword\">val</span> target = response.body?.contentLength() <span class=\"hljs-comment\">// 合計サイズ</span>\n                <span class=\"hljs-keyword\">var</span> progress = <span class=\"hljs-number\">0L</span>\n                <span class=\"hljs-comment\">// プログレスバーの最大値設定</span>\n                runOnUiThread {\n                    progressBar.max = target?.toInt()!!\n                }\n                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                    <span class=\"hljs-keyword\">val</span> read = inputStream?.read(buff)\n                    <span class=\"hljs-keyword\">if</span> (read == -<span class=\"hljs-number\">1</span> || read == <span class=\"hljs-literal\">null</span> || target == <span class=\"hljs-literal\">null</span>) {\n                        <span class=\"hljs-keyword\">break</span>\n                    }\n                    progress += read\n                    outputStream.write(buff, <span class=\"hljs-number\">0</span>, read)\n                    <span class=\"hljs-comment\">// UI更新</span>\n                    runOnUiThread {\n                        <span class=\"hljs-comment\">// プログレスバー進める</span>\n                        progressBar.progress = progress.toInt()\n                        <span class=\"hljs-comment\">// パーセントの式。</span>\n                        progressTextView.text =\n                            <span class=\"hljs-string\">\"<span class=\"hljs-subst\">${((progress.toFloat() / target.toFloat()) * <span class=\"hljs-number\">100</span>).toInt()}</span> %\"</span>\n                    }\n                }\n                inputStream?.close()\n                outputStream.close()\n            }\n        })\n    }\n}</code></pre><p>パーセントはこの部分で計算してます。<s>(プログラミング要素っていうか数学かな？)</s></p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// パーセントの式。</span>\nprogressTextView.text =\n    <span class=\"hljs-string\">\"<span class=\"hljs-subst\">${((progress.toFloat() / target.toFloat()) * <span class=\"hljs-number\">100</span>).toInt()}</span> %\"</span></code></pre><p>これでOkHttpで進捗付きでダウンロードができるようになりました。わーい</p>\n<p>{% asset_img download.png download %}</p>\n<h1>おわりに</h1>\n<p><strong>DownloadManagerをAndroid 10以降でも使いたい人はダウンロード後にファイル名変更しないと消されます。</strong><br>\nあと成功してるかどうか<code>response.isSuccessful</code>で成功時のみ保存するようにしたほうがいいと思った。(だったら書き直せ)<br>\nあとJava読めるマンはこれ読んだほうがいいと思う→ https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java</p>\n<h1>ソースコード</h1>\n<p>https://github.com/takusan23/OkHttpProgress</p>\n<h1>参考にしました</h1>\n<p>https://stackoverflow.com/questions/26114299/squares-okhttp-download-progress<br>\nhttps://medium.com/@mkaflowski/disappearing-files-downloaded-by-downloadmanager-7c9ee5c6a66a</p>\n",
  "dir": "contents/posts/json",
  "base": "OkHttpでダウンロード進捗が知りたい！.json",
  "ext": ".json",
  "sourceBase": "OkHttpでダウンロード進捗が知りたい！.md",
  "sourceExt": ".md"
}