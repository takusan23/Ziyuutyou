{
  "title": "Nuxt.jsとprocessmdでブログ作りたい。",
  "created_at": "2020-05-30 21:10:00",
  "tags": [
    "NuxtJS",
    "Markdown",
    "JavaScript"
  ],
  "bodyContent": "**Nuxt.js+processmd**でブログ作るよ\r\n\r\n# 環境\r\n| なまえ | あたい         |\r\n|--------|----------------|\r\n| OS     | Windows 10 Pro |\r\n| Node   | 12.14.1        |\r\n\r\n# Nuxt.jsプロジェクト作成\r\n\r\n```console\r\nnpx create-nuxt-app nuxtblog\r\n```\r\n\r\nあとは好きな方を選んでいきます\r\n- programming language\r\n    - TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）\r\n- UI framework\r\n    - Vuetifyがマテリアルデザイン（今回はElement使ってみる）\r\n- あとは適当に（PWA入れといた）\r\n\r\n```console\r\n✨  Generating Nuxt.js project in nuxtblog\r\n? Project name nuxtblog\r\n? Project description My cool Nuxt.js project\r\n? Author name takusan23\r\n? Choose programming language TypeScript     \r\n? Choose the package manager Npm      \r\n? Choose UI framework Element\r\n? Choose custom server framework None (Recommended) \r\n? Choose the runtime for TypeScript Default\r\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\r\n? Choose linting tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\r\n? Choose test framework None\r\n? Choose rendering mode Single Page App\r\n? Choose development tools (Press <space> to select, <a> to toggle all, <i> to invert selection)\r\n```\r\n\r\nそしたら移動して、サーバー起動させます\r\n\r\n```console\r\ncd nuxt blog\r\nnpm run dev\r\n```\r\n\r\n![Imgur](https://i.imgur.com/fsdnyw3.png)\r\n\r\n# Markdownファイルの保存場所を作る\r\n\r\nnuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に  \r\n**contentsフォルダ**を作り、その中に  \r\n**postsフォルダ**を作り、その中に  \r\n**markdownフォルダ**を作成します。\r\n\r\nこんな感じに\r\n\r\n![Imgur](https://i.imgur.com/9MkedEP.png)\r\n\r\n後は**Markdownフォルダ**にMarkdownファイルを置いていきます。  \r\n\r\n今回は適当にこんなMarkdownファイル（名前：first.md）を入れます。\r\n\r\n```markdown\r\n---\r\ntitle: Nuxt.jsの練習\r\ncreated_at: 2020-05-31\r\ntags:\r\n- JavaScript\r\n---\r\n# Hello World\r\n\r\n```\r\n\r\n# Markdownファイルの情報をJSONに変換するprocessmd\r\n\r\n## processmd入れます\r\n\r\n\r\n```console\r\nnpm install --save-dev processmd\r\n```\r\n\r\n## コマンド長いのでpackage.jsonに書き足します\r\n\r\n```json\r\n{\r\n  \"name\": \"nuxtblog\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"My cool Nuxt.js project\",\r\n  \"author\": \"takusan23\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"nuxt\",\r\n    \"build\": \"nuxt build\",\r\n    \"start\": \"nuxt start\",\r\n    \"generate\": \"nuxt generate\",\r\n    \"md\": \"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\"\r\n  },\r\n  \"dependencies\": {\r\n    \"nuxt\": \"^2.0.0\",\r\n    \"element-ui\": \"^2.4.11\",\r\n    \"@nuxtjs/pwa\": \"^3.0.0-0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@nuxt/typescript-build\": \"^0.6.0\",\r\n    \"processmd\": \"^4.5.0\"\r\n  }\r\n}\r\n```\r\n\r\nscriptsの中にmdの一行書き足せばおｋ\r\n```json\r\n\"md\": \"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json > contents/posts/summary.json\"\r\n```\r\n\r\nあとはターミナルで以下叩きます。  \r\nこの作業は記事を追加したら毎回叩く必要があります。\r\n```console\r\nnpm run md\r\n```\r\n\r\n叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも\r\n\r\n# Nuxt.jsで記事一覧用意する\r\n\r\nこっからはコピペです。いくぞおおおおお  \r\n**pages/index.vue**を開いて以下のJSをどーん\r\n```vue\r\n<template>\r\n  <div class=\"container\">\r\n    <div>\r\n      <el-card class=\"box-card\" v-for=\"item in blogItems\" :key=\"item\">\r\n        <nuxt-link class=\"text item\" :to=\"`posts/${item.fileName}`\">{{ item.title }}</nuxt-link>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"js\">\r\nimport Vue from 'vue'\r\nimport { fileMap } from \"../contents/posts/summary.json\";\r\n\r\nexport default {\r\n  data: () => {\r\n    return {\r\n      blogItems: []\r\n    };\r\n  },\r\n  created() {\r\n    // キーを取り出す\r\n    Object.keys(fileMap).forEach(title => {\r\n      // 記事一個ずつ取る\r\n      const blog = fileMap[title];\r\n      // 名前\r\n      const name = blog.sourceBase.replace(\".md\", \"\");\r\n      blog.fileName = name;\r\n      this.blogItems.push(blog);\r\n    });\r\n  }\r\n};\r\n</script>\r\n```\r\n\r\nここではタイトルしか出てませんが、日付とかタグとかも出せると思います。\r\n\r\n![Imgur](https://i.imgur.com/LJF3l5H.png)\r\n\r\n> localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）\r\n\r\n# 記事一覧ページを作る\r\n\r\n## 動的ルーティング # とは\r\nよくわからんけど静的サイトジェネレートに必要。  \r\nというわけで**nuxt.config.js**開いてね\r\n\r\n参考：https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\r\n参考：https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/\r\n\r\n開いたらJS書き足していきます。\r\n\r\n```js\r\nconst { sourceFileArray } = require('./contents/posts/summary.json');\r\n\r\n/** パス生成 */\r\nconst sourceFileNameToUrl = filepath => {\r\n  const name = filepath.replace('contents/posts/markdown/', '').replace('.md', '')\r\n  return `/posts/${name}`\r\n}\r\n\r\nconst generateDynamicRoutes = callback => {\r\n  const routes = sourceFileArray.map(sourceFileName => {\r\n    return sourceFileNameToUrl(sourceFileName);\r\n  });\r\n  callback(null, routes);\r\n};\r\n\r\nexport default {\r\n// 省略\r\n  generate: {\r\n    routes: generateDynamicRoutes\r\n  },\r\n}\r\n```\r\n\r\nsourceFileNameToUrl()関数は`posts/${ファイル名}`の文字列を返す関数です。\r\n\r\nこうすることでURLが`posts/{タイトル}`になるはずです。  \r\nですがこれだけではまだ生成できません。\r\n\r\n生成するには、  \r\n**pagesフォルダ**に**posts**フォルダを作成して、  \r\nその中に **_slug.vue** ファイルを作成します。\r\n\r\n![Imgur](https://imgur.com/DSJ9WSc.png)\r\n\r\n## _slug.vueの中身\r\n**_slug.vue**は記事の表示に使います。  \r\n\r\n```vue\r\n<template>\r\n  <div class=\"container\">\r\n    <div>\r\n      <el-card class=\"box-card\">\r\n        <div>{{(new Date(created_at).toLocaleDateString())}} 投稿</div>\r\n        <div v-html=\"bodyHtml\"></div>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { sourceFileArray } from \"../../contents/posts/summary.json\";\r\n\r\nexport default {\r\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\r\n  validate({ params }) {\r\n    return sourceFileArray.includes(\r\n      `contents/posts/markdown/${params.slug}.md`\r\n    );\r\n  },\r\n  // 各記事のJSONファイルを読み込んでる。\r\n  asyncData({ params }) {\r\n    return Object.assign(\r\n      {},\r\n      require(`~/contents/posts/json/${params.slug}.json`),\r\n      { params }\r\n    );\r\n  },\r\n  mounted() {\r\n    // DOM生成後\r\n  },\r\n  // さあ？\r\n  head() {\r\n    const title = `${this.title}`;\r\n    const url = `posts/${this.params.slug}/`;\r\n    return {\r\n      title: title,\r\n      meta: [\r\n        { hid: \"og:url\", property: \"og:url\", content: url },\r\n        { hid: \"og:title\", property: \"og:title\", content: title }\r\n      ],\r\n      link: [{ rel: \"canonical\", href: url }]\r\n    };\r\n  }\r\n};\r\n</script>\r\n```\r\n\r\n記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。\r\n\r\n![Imgur](https://i.imgur.com/qbUf0P4.png)\r\n\r\n# おまけ 静的サイトジェネレートしてみる\r\n\r\n以下の一行をターミナルに入れます\r\n\r\n```console\r\nnpm run generate\r\n```\r\n\r\nこれで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。  \r\n今回は**Web Server for Chrome**が入ってたのでそれ使って見てみます。  \r\n\r\n`npm run generate`の出力先は**dist**になってるのでそれを指定してWeb鯖立てます。\r\n\r\n![Imgur](https://i.imgur.com/O6uBFod.png)\r\n\r\n以上です。  \r\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。\r\n\r\n![Imgur](https://i.imgur.com/74quEU3.png)\r\n\r\nPWAも入れてあるので試せる。\r\n\r\n# おまけ\r\nGitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。\r\n\r\n```js\r\nexport default {\r\n// 省略\r\n  router: {\r\n    base: '/リポジトリ名/'\r\n  },\r\n  generate: {\r\n    routes: generateDynamicRoutes,\r\n    dir: 'docs',\r\n  },\r\n}\r\n```\r\n\r\n# おわりに\r\n**nuxt.config.js**の`mode: 'spa'`ってSPAであってるの？\r\n静的サイトジェネレートの時は書いてなかったんだけど？\r\n\r\nソースコード：https://github.com/takusan23/NuxtBlog",
  "bodyHtml": "<p><strong>Nuxt.js+processmd</strong>でブログ作るよ</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OS</td>\n<td>Windows 10 Pro</td>\n</tr>\n<tr>\n<td>Node</td>\n<td>12.14.1</td>\n</tr>\n</tbody>\n</table>\n<h1>Nuxt.jsプロジェクト作成</h1>\n<pre><code class=\"hljs\">npx create-nuxt-app nuxtblog</code></pre><p>あとは好きな方を選んでいきます</p>\n<ul>\n<li>programming language\n<ul>\n<li>TypeScriptにしといた（けどTS書き方分かんなくて途中からJSになってる。クソ参考にならねえじゃん）</li>\n</ul>\n</li>\n<li>UI framework\n<ul>\n<li>Vuetifyがマテリアルデザイン（今回はElement使ってみる）</li>\n</ul>\n</li>\n<li>あとは適当に（PWA入れといた）</li>\n</ul>\n<pre><code class=\"hljs\">✨  Generating Nuxt.js project in nuxtblog\n? Project name nuxtblog\n? Project description My cool Nuxt.js project\n? Author name takusan23\n? Choose programming language TypeScript     \n? Choose the package manager Npm      \n? Choose UI framework Element\n? Choose custom server framework None (Recommended) \n? Choose the runtime for TypeScript Default\n? Choose Nuxt.js modules Progressive Web App (PWA) Support\n? Choose linting tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n? Choose test framework None\n? Choose rendering mode Single Page App\n? Choose development tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</code></pre><p>そしたら移動して、サーバー起動させます</p>\n<pre><code class=\"hljs\">cd nuxt blog\nnpm run dev</code></pre><p><img src=\"https://i.imgur.com/fsdnyw3.png\" alt=\"Imgur\"></p>\n<h1>Markdownファイルの保存場所を作る</h1>\n<p>nuxtblogフォルダ(componentsとかassetsとかnode_moduleがあるフォルダ)に<br>\n<strong>contentsフォルダ</strong>を作り、その中に<br>\n<strong>postsフォルダ</strong>を作り、その中に<br>\n<strong>markdownフォルダ</strong>を作成します。</p>\n<p>こんな感じに</p>\n<p><img src=\"https://i.imgur.com/9MkedEP.png\" alt=\"Imgur\"></p>\n<p>後は<strong>Markdownフォルダ</strong>にMarkdownファイルを置いていきます。</p>\n<p>今回は適当にこんなMarkdownファイル（名前：<a href=\"http://first.md\">first.md</a>）を入れます。</p>\n<pre><code class=\"hljs\">---\ntitle: Nuxt.jsの練習\ncreated_at: 2020-05-31\ntags:\n<span class=\"hljs-section\">- JavaScript\n---</span>\n<span class=\"hljs-section\"># Hello World</span></code></pre><h1>Markdownファイルの情報をJSONに変換するprocessmd</h1>\n<h2>processmd入れます</h2>\n<pre><code class=\"hljs\">npm install --save-dev processmd</code></pre><h2>コマンド長いのでpackage.jsonに書き足します</h2>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"nuxtblog\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"My cool Nuxt.js project\"</span>,\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"takusan23\"</span>,\n  <span class=\"hljs-attr\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"nuxt\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"nuxt build\"</span>,\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"nuxt start\"</span>,\n    <span class=\"hljs-attr\">\"generate\"</span>: <span class=\"hljs-string\">\"nuxt generate\"</span>,\n    <span class=\"hljs-attr\">\"md\"</span>: <span class=\"hljs-string\">\"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\"</span>\n  },\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"nuxt\"</span>: <span class=\"hljs-string\">\"^2.0.0\"</span>,\n    <span class=\"hljs-attr\">\"element-ui\"</span>: <span class=\"hljs-string\">\"^2.4.11\"</span>,\n    <span class=\"hljs-attr\">\"@nuxtjs/pwa\"</span>: <span class=\"hljs-string\">\"^3.0.0-0\"</span>\n  },\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n    <span class=\"hljs-attr\">\"@nuxt/typescript-build\"</span>: <span class=\"hljs-string\">\"^0.6.0\"</span>,\n    <span class=\"hljs-attr\">\"processmd\"</span>: <span class=\"hljs-string\">\"^4.5.0\"</span>\n  }\n}</code></pre><p>scriptsの中にmdの一行書き足せばおｋ</p>\n<pre><code class=\"hljs\">\"md\": \"processmd contents/posts/**/*.md --stdout --outputDir contents/posts/json &gt; contents/posts/summary.json\"</code></pre><p>あとはターミナルで以下叩きます。<br>\nこの作業は記事を追加したら毎回叩く必要があります。</p>\n<pre><code class=\"hljs\">npm run md</code></pre><p>叩くとcontents/postsにjsonってフォルダが出来てると思います。あとsummary.jsonも</p>\n<h1>Nuxt.jsで記事一覧用意する</h1>\n<p>こっからはコピペです。いくぞおおおおお<br>\n<strong>pages/index.vue</strong>を開いて以下のJSをどーん</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div&gt;\n      &lt;el-card class=\"box-card\" v-for=\"item in blogItems\" :key=\"item\"&gt;\n        &lt;nuxt-link class=\"text item\" :to=\"`posts/${item.fileName}`\"&gt;{{ item.title }}&lt;/nuxt-link&gt;\n      &lt;/el-card&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"js\"&gt;\nimport Vue from 'vue'\nimport { fileMap } from \"../contents/posts/summary.json\";\n\nexport default {\n  data: () =&gt; {\n    return {\n      blogItems: []\n    };\n  },\n  created() {\n    // キーを取り出す\n    Object.keys(fileMap).forEach(title =&gt; {\n      // 記事一個ずつ取る\n      const blog = fileMap[title];\n      // 名前\n      const name = blog.sourceBase.replace(\".md\", \"\");\n      blog.fileName = name;\n      this.blogItems.push(blog);\n    });\n  }\n};\n&lt;/script&gt;</code></pre><p>ここではタイトルしか出てませんが、日付とかタグとかも出せると思います。</p>\n<p><img src=\"https://i.imgur.com/LJF3l5H.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>localhost:4545は別に気にしないでいいです。だた調子が悪かったのでポート番号を変えただけです。（nuxt --port 4545で変えられる）</p>\n</blockquote>\n<h1>記事一覧ページを作る</h1>\n<h2>動的ルーティング # とは</h2>\n<p>よくわからんけど静的サイトジェネレートに必要。<br>\nというわけで<strong>nuxt.config.js</strong>開いてね</p>\n<p>参考：<a href=\"https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/\">https://jmblog.jp/posts/2018-01-18/build-a-blog-with-nuxtjs-and-markdown-2/</a>\n参考：<a href=\"https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/\">https://isoppp.com/note/2018-05-16/3-nuxt-firebase-blog-markdown/</a></p>\n<p>開いたらJS書き足していきます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> { sourceFileArray } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./contents/posts/summary.json'</span>);\n\n<span class=\"hljs-comment\">/** パス生成 */</span>\n<span class=\"hljs-keyword\">const</span> sourceFileNameToUrl = <span class=\"hljs-function\"><span class=\"hljs-params\">filepath</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> name = filepath.replace(<span class=\"hljs-string\">'contents/posts/markdown/'</span>, <span class=\"hljs-string\">''</span>).replace(<span class=\"hljs-string\">'.md'</span>, <span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`/posts/<span class=\"hljs-subst\">${name}</span>`</span>\n}\n\n<span class=\"hljs-keyword\">const</span> generateDynamicRoutes = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> routes = sourceFileArray.map(<span class=\"hljs-function\"><span class=\"hljs-params\">sourceFileName</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> sourceFileNameToUrl(sourceFileName);\n  });\n  callback(<span class=\"hljs-literal\">null</span>, routes);\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n<span class=\"hljs-comment\">// 省略</span>\n  <span class=\"hljs-attr\">generate</span>: {\n    <span class=\"hljs-attr\">routes</span>: generateDynamicRoutes\n  },\n}</code></pre><p>sourceFileNameToUrl()関数は<code>posts/${ファイル名}</code>の文字列を返す関数です。</p>\n<p>こうすることでURLが<code>posts/{タイトル}</code>になるはずです。<br>\nですがこれだけではまだ生成できません。</p>\n<p>生成するには、<br>\n<strong>pagesフォルダ</strong>に<strong>posts</strong>フォルダを作成して、<br>\nその中に <strong>_slug.vue</strong> ファイルを作成します。</p>\n<p><img src=\"https://imgur.com/DSJ9WSc.png\" alt=\"Imgur\"></p>\n<h2>_slug.vueの中身</h2>\n<p><strong>_slug.vue</strong>は記事の表示に使います。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div&gt;\n      &lt;el-card class=\"box-card\"&gt;\n        &lt;div&gt;{{(new Date(created_at).toLocaleDateString())}} 投稿&lt;/div&gt;\n        &lt;div v-html=\"bodyHtml\"&gt;&lt;/div&gt;\n      &lt;/el-card&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { sourceFileArray } from \"../../contents/posts/summary.json\";\n\nexport default {\n  // 記事があるかどうか。JSONのsourceFileArrayの配列に含まれているか確認している。\n  validate({ params }) {\n    return sourceFileArray.includes(\n      `contents/posts/markdown/${params.slug}.md`\n    );\n  },\n  // 各記事のJSONファイルを読み込んでる。\n  asyncData({ params }) {\n    return Object.assign(\n      {},\n      require(`~/contents/posts/json/${params.slug}.json`),\n      { params }\n    );\n  },\n  mounted() {\n    // DOM生成後\n  },\n  // さあ？\n  head() {\n    const title = `${this.title}`;\n    const url = `posts/${this.params.slug}/`;\n    return {\n      title: title,\n      meta: [\n        { hid: \"og:url\", property: \"og:url\", content: url },\n        { hid: \"og:title\", property: \"og:title\", content: title }\n      ],\n      link: [{ rel: \"canonical\", href: url }]\n    };\n  }\n};\n&lt;/script&gt;</code></pre><p>記事一覧から選んだ時にちゃんとMarkdownの中身が表示されていれば動いてます。</p>\n<p><img src=\"https://i.imgur.com/qbUf0P4.png\" alt=\"Imgur\"></p>\n<h1>おまけ 静的サイトジェネレートしてみる</h1>\n<p>以下の一行をターミナルに入れます</p>\n<pre><code class=\"hljs\">npm run generate</code></pre><p>これで静的サイトが生成されました。後はこれをGitHubPagesに上げるなりすればいいと思います。<br>\n今回は<strong>Web Server for Chrome</strong>が入ってたのでそれ使って見てみます。</p>\n<p><code>npm run generate</code>の出力先は<strong>dist</strong>になってるのでそれを指定してWeb鯖立てます。</p>\n<p><img src=\"https://i.imgur.com/O6uBFod.png\" alt=\"Imgur\"></p>\n<p>以上です。<br>\n一応/posts/first/にアクセスした後にF5（再読み込み）をかけても404にならないことを確認できたところで終わろうと思います。</p>\n<p><img src=\"https://i.imgur.com/74quEU3.png\" alt=\"Imgur\"></p>\n<p>PWAも入れてあるので試せる。</p>\n<h1>おまけ</h1>\n<p>GitHub Pages使う場合は、nuxt.config.jsをこんな感じにすればいいと思います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n<span class=\"hljs-comment\">// 省略</span>\n  <span class=\"hljs-attr\">router</span>: {\n    <span class=\"hljs-attr\">base</span>: <span class=\"hljs-string\">'/リポジトリ名/'</span>\n  },\n  <span class=\"hljs-attr\">generate</span>: {\n    <span class=\"hljs-attr\">routes</span>: generateDynamicRoutes,\n    <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">'docs'</span>,\n  },\n}</code></pre><h1>おわりに</h1>\n<p><strong>nuxt.config.js</strong>の<code>mode: 'spa'</code>ってSPAであってるの？\n静的サイトジェネレートの時は書いてなかったんだけど？</p>\n<p>ソースコード：<a href=\"https://github.com/takusan23/NuxtBlog\">https://github.com/takusan23/NuxtBlog</a></p>\n",
  "dir": "contents/posts/json",
  "base": "first.json",
  "ext": ".json",
  "sourceBase": "first.md",
  "sourceExt": ".md"
}