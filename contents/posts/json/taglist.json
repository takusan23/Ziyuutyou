{
  "title": "タグのページ作った",
  "created_at": "2020-06-03T00:00:00.000Z",
  "tags": [
    "その他",
    "Nuxt.js",
    "自作ブログ",
    "JavaScript"
  ],
  "bodyContent": "タグのページ作りました。  \r\n**まだタグ一覧は作ってませんが**、タグが含まれている記事の一覧表示ならできるようになりました\r\n\r\n試しにChipを押してみてね。  \r\n\r\n**あとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる**\r\n\r\n## 技術的な話\r\n\r\n`posts/tag/自作ブログ/index.html` みたいなファイルが生成されるようになりました。  \r\n\r\n```js\r\n/** タグが含まれている記事一覧のパス配列生成関数。 */\r\nconst generateTagPageRoutesList = () => {\r\n  // 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す\r\n  const blogItems = Object.keys(postsJSON.fileMap).map(key => postsJSON.fileMap[key])\r\n  // タグだけの配列を作る\r\n  const allTagItems = blogItems.map(blog => blog.tags).flat()\r\n  // 被りを消す。new Set()でいいらしい\r\n  const tagList = [...new Set(allTagItems)]\r\n  // パス生成。こんな感じの→ /posts/tag/自作ブログ みたいな感じに\r\n  const pathList = tagList.map(tagName => `/posts/tag/${tagName}`)\r\n  return pathList\r\n}\r\n// 省略\r\n/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */\r\nconst generateRoutes = callback => {\r\n  callback(null, [generateTagPageRoutesList()].flat())\r\n}\r\n```\r\n\r\nJavaScriptの配列、被りを消す方法にこんな方法があったんですね。  \r\n```js\r\nconsole.log([...new Set([1,2,1])]) // [1,2]\r\n```\r\n\r\nちなみにKotlinだと`array()#distinct()`があります。超便利\r\n\r\n以上です（？）  \r\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。  \r\n\r\nあと2m確保とが無理じゃね？",
  "bodyHtml": "<p>タグのページ作りました。<br>\n<strong>まだタグ一覧は作ってませんが</strong>、タグが含まれている記事の一覧表示ならできるようになりました</p>\n<p>試しにChipを押してみてね。</p>\n<p><strong>あとページネーション(二ページ目みたいなやつ)付けてないから多分大変なことになる</strong></p>\n<h2>技術的な話</h2>\n<p><code>posts/tag/自作ブログ/index.html</code> みたいなファイルが生成されるようになりました。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/** タグが含まれている記事一覧のパス配列生成関数。 */</span>\n<span class=\"hljs-keyword\">const</span> generateTagPageRoutesList = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// 記事オブジェクト一覧配列を生成する。キーだけの配列にしてmapで取り出す</span>\n  <span class=\"hljs-keyword\">const</span> blogItems = <span class=\"hljs-built_in\">Object</span>.keys(postsJSON.fileMap).map(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> postsJSON.fileMap[key])\n  <span class=\"hljs-comment\">// タグだけの配列を作る</span>\n  <span class=\"hljs-keyword\">const</span> allTagItems = blogItems.map(<span class=\"hljs-function\"><span class=\"hljs-params\">blog</span> =&gt;</span> blog.tags).flat()\n  <span class=\"hljs-comment\">// 被りを消す。new Set()でいいらしい</span>\n  <span class=\"hljs-keyword\">const</span> tagList = [...new <span class=\"hljs-built_in\">Set</span>(allTagItems)]\n  <span class=\"hljs-comment\">// パス生成。こんな感じの→ /posts/tag/自作ブログ みたいな感じに</span>\n  <span class=\"hljs-keyword\">const</span> pathList = tagList.map(<span class=\"hljs-function\"><span class=\"hljs-params\">tagName</span> =&gt;</span> <span class=\"hljs-string\">`/posts/tag/<span class=\"hljs-subst\">${tagName}</span>`</span>)\n  <span class=\"hljs-keyword\">return</span> pathList\n}\n<span class=\"hljs-comment\">// 省略</span>\n<span class=\"hljs-comment\">/** 静的サイトジェネレート関数。配列(pages/とposts/)くっつける */</span>\n<span class=\"hljs-keyword\">const</span> generateRoutes = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =&gt;</span> {\n  callback(<span class=\"hljs-literal\">null</span>, [generateTagPageRoutesList()].flat())\n}</code></pre><p>JavaScriptの配列、被りを消す方法にこんな方法があったんですね。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">console</span>.log([...new <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>])]) <span class=\"hljs-comment\">// [1,2]</span></code></pre><p>ちなみにKotlinだと<code>array()#distinct()</code>があります。超便利</p>\n<p>以上です（？）<br>\n久々の学校はまあまあ楽しかったです。帰り陽キャが絡んできたのが減点ポイントですね。</p>\n<p>あと2m確保とが無理じゃね？</p>\n",
  "dir": "contents/posts/json",
  "base": "taglist.json",
  "ext": ".json",
  "sourceBase": "taglist.md",
  "sourceExt": ".md"
}