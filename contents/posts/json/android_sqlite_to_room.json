{
  "title": "SQLiteの思い出をRoomへお引越しする",
  "created_at": "2020-07-11T00:00:00.000Z",
  "tags": [
    "Android",
    "Kotlin",
    "Room"
  ],
  "bodyContent": "進路どーすっかな\r\n\r\n# 本題\r\n既存のAndroidアプリにデータベースを追加したいわけですが、これから作るならRoomをやっぱ使いたいわけですよ。  \r\nでもRoomとSQLite（旧式）が共存してるのなんか気持ち悪いので**めっちゃ面倒くさそうだけど**Roomへ移行しようというわけです。\r\n\r\n# 環境\r\n| なまえ  | あたい    |\r\n|---------|-----------|\r\n| Android | 11 Beta 2 |\r\n| 言語    | Kotlin    |\r\n\r\n# やること\r\nSQLite -> Room\r\n\r\n# ライブラリを入れる\r\n## build.gradleを開いて\r\n以下のコードを足します。  \r\nファイルの一番上に`apply plugin: 'kotlin-kapt'`を書かないとエラー出ます。  \r\nあとついでにコルーチンも入れましょう。無くても`thread {}`使って別スレッドで扱えば使えますがコールバック地獄になるのでやめとこう\r\n\r\n```gradle\r\napply plugin: 'kotlin-kapt' // 一番上に\r\n\r\ndependencies {\r\n\r\n    // Room\r\n    def room_version = \"2.2.5\"\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    implementation \"androidx.room:room-ktx:$room_version\"\r\n    kapt \"androidx.room:room-compiler:$room_version\"\r\n    \r\n    // Coroutines\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"\r\n   \r\n    // 省略...\r\n\r\n}\r\n```\r\n\r\n# なんでコルーチン\r\n\r\n**RoomはUIスレッドでは使えません。**  \r\nだからコルーチンが必要だったのですね。\r\n\r\n# Roomの構成\r\nRoomさんは3つのコンポーネントで成り立ってます。\r\n\r\n- RoomDatabase\r\n    - データベースの中心的な役割\r\n    - 説明がめんどいし何するのかよくわかっていない。\r\n    - DAOにはこいつが必要\r\n- Entity\r\n    - テーブル。Excelだと一番上の行。\r\n    - データベースの中身を定義する（主キーとか）\r\n- DAO\r\n    - データベースへアクセスする際に使う関数を定義する\r\n    - クエリも入力補助が付いたので間違いが減った（＋実行前に間違いが分かるようになってる）\r\n\r\n# 移行する\r\n流石にちょっと怖くね？\r\n\r\n## Entityを作成する\r\n今回はファイル名を`CommentCollectionEntity.kt`とします。  \r\n\r\n### 例\r\n\r\nSQLiteHelperがこうなっているとして\r\n\r\n```kotlin\r\n// データーベース名\r\nprivate val DATABASE_NAME = \"CommentCollection.db\"\r\nprivate val TABLE_NAME = \"comment_collection_db\"\r\nprivate val DESCRIPTION = \"description\"\r\nprivate val YOMI = \"yomi\"\r\nprivate val COMMENT = \"comment\"\r\nprivate val _ID = \"_id\"\r\n// , を付け忘れるとエラー\r\nprivate val SQL_CREATE_ENTRIES = \"CREATE TABLE \" + TABLE_NAME + \" (\" +\r\n        _ID + \" INTEGER PRIMARY KEY,\" +\r\n        COMMENT + \" TEXT ,\" +\r\n        YOMI + \" TEXT ,\" +\r\n        DESCRIPTION + \" TEXT\" +\r\n        \")\"\r\n```\r\n\r\nEntityはこうなります（例がクソわかりにくい。**まるで教科書の例題の解き方が参考にならない問題みたい**）\r\n\r\n```kotlin\r\n@Entity(tableName = \"comment_collection_db\")\r\ndata class CommentCollectionEntity(\r\n    @ColumnInfo(name = \"_id\") @PrimaryKey(autoGenerate = true) val id: Int = 0,\r\n    @ColumnInfo(name = \"comment\") val comment: String,\r\n    @ColumnInfo(name = \"yomi\") val yomi: String,\r\n    @ColumnInfo(name = \"description\") val description: String\r\n)\r\n```\r\n\r\n#### Entity書くときに注意しないといけないこと\r\n- `@Entity(tableName = \"\")`を書かないとだめ。\r\n    - `CREATE TABLE {ここ} `の値ですね。忘れそう\r\n- カラムと変数名が同じじゃない場合は`@ColumnInfo`を使う\r\n- **実はnullを許容するように書くと移行のときだけ楽になる**\r\n    - `Migrationを書く`の工程がほぼなくなり楽になりますが、使うときに毎回nullの可能性がある値を使う羽目になるので今回は**null絶対許さん**方針で行きます。\r\n    - nullを許容する場合は`String?`や`Int?`のように最後に`?`をつければいいですが**今回はつけません**。\r\n\r\n### DAOを書く\r\nデータベースへアクセスするする際に使う関数を定義します。  \r\nクエリもここに書きます。  \r\nここでは一般的に使いそうな動作を例として置いとくので、各自Entityクラス名等を書き換えてください。\r\n\r\n```kotlin\r\n/**\r\n * データベースへアクセスするときに使う関数を定義する\r\n * */\r\n@Dao\r\ninterface CommentCollectionDAO {\r\n    /** 全データ取得 */\r\n    @Query(\"SELECT * FROM comment_collection_db\")\r\n    fun getAll(): List<CommentCollectionEntity>\r\n\r\n    /** データ更新 */\r\n    @Update\r\n    fun update(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    /** データ追加 */\r\n    @Insert\r\n    fun insert(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    /** データ削除 */\r\n    @Delete\r\n    fun delete(commentCollectionEntity: CommentCollectionEntity)\r\n\r\n    /** データをIDを使って検索 */\r\n    @Query(\"SELECT * FROM comment_collection_db WHERE _id = :id\")\r\n    fun findById(id: Int): CommentCollectionEntity\r\n}\r\n```\r\n\r\nこれを書く際も入力補助が聞くので間違いが減ります（この記事二回目の発言）\r\n\r\n#### 注意点\r\nなくない？\r\n\r\n### Database\r\n中心的な役割を持ちます。\r\n\r\n```kotlin\r\n/**\r\n * コメントコレクションのデータベース。\r\n * SQLiteから移行する場合はバージョンを上げる必要がある\r\n * */\r\n@Database(entities = [CommentCollectionEntity::class], version = 2)\r\nabstract class CommentCollectionDB : RoomDatabase() {\r\n    abstract fun commentCollectionDAO(): CommentCollectionDAO\r\n}\r\n```\r\n\r\n#### 注意点\r\n- バージョンを上げないといけないそうです。\r\n\r\n## データベースへアクセス\r\nデータベースを使うときにバージョンを上げる処理を書きます。  \r\n\r\n```kotlin\r\n// データベース初期化\r\nval commentCollectionDB = Room.databaseBuilder(this, CommentCollectionDB::class.java, \"CommentCollection.db\")\r\n    .addMigrations(object : Migration(1, 2) {\r\n        override fun migrate(database: SupportSQLiteDatabase) {\r\n        }\r\n    })\r\n    .build()\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    // コルーチン\r\n    withContext(Dispatchers.IO) {\r\n        // データベースから値を取る\r\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { data ->\r\n            println(data.comment)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nまあこれじゃ動かないんですけどね。  \r\nそのための **addMigrations** があるので使っていきます。\r\n\r\n### なんで？動かないの？\r\n実はEntityでnullを許容すればこの問題は消えます。  \r\n```kotlin\r\n@ColumnInfo(name = \"comment\") val comment: String? // null ok!\r\n```\r\nしかしnullを許容すると使うときに面倒くさくなります（この例だと`comment?.length`みたいに?付けないといけなくなる）\r\n\r\nこの問題はSQLiteとRoomとでnullを許すかどうかで問題が発生しています。\r\n- **SQLiteくん**\r\n    - null？良いんじゃね？\r\n- **Roomくん**\r\n    - `Entity`がnullを許してくれない；；\r\n    - よし落とすか←いまここ\r\n\r\nちなみに出力されたエラーはこちら。\r\n```js\r\nExpected:\r\n    TableInfo{name='comment_collection_db', columns={description=Column{name='description', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, comment=Column{name='comment', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, yomi=Column{name='yomi', type='TEXT', affinity='2', notNull=true, primaryKeyPosition=0, defaultValue='null'}, _id=Column{name='_id', type='INTEGER', affinity='3', notNull=true, primaryKeyPosition=1, defaultValue='null'}}, foreignKeys=[], indices=[]}\r\nFound:\r\n    TableInfo{name='comment_collection_db', columns={description=Column{name='description', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, comment=Column{name='comment', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, yomi=Column{name='yomi', type='TEXT', affinity='2', notNull=false, primaryKeyPosition=0, defaultValue='null'}, _id=Column{name='_id', type='INTEGER', affinity='3', notNull=false, primaryKeyPosition=1, defaultValue='null'}}, foreignKeys=[], indices=[]}\r\n```\r\n\r\nよく見ると上の`Expected`の方の`notNull`は`true(null良いよ)`ですが、  \r\n`Found(今回作ったEntity)`は`notNull`が`false(nullだめだよ)`ってことで中身が噛み合わず例外が発生しています。\r\n\r\n## Migration\r\nnullを許容 から nullを許さん に変更したいのですが、残念ながら変更するにはデータベースを作り直す必要があるそうです。  \r\n\r\nまあまあ面倒くさい。やることは以下の4つ\r\n- 新しくデータベースを作成する\r\n    - 今までのデータベースにあったカラムを全部書く\r\n- 新しく作ったデータベースへデータを移す\r\n- 古いデータベースを消す\r\n- 新しく作ったデータベースの名前を古いデータベースの名前に変更する\r\n\r\nこれをKotlinで書くとこうなります。\r\n\r\n```kotlin\r\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n    // SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\r\n    database.execSQL(\r\n        \"\"\"\r\n        CREATE TABLE comment_collection_db_tmp (\r\n          _id INTEGER NOT NULL PRIMARY KEY, \r\n          comment TEXT NOT NULL,\r\n          yomi TEXT NOT NULL,\r\n          description TEXT NOT NULL\r\n        )\r\n        \"\"\"\r\n    )\r\n    // 移行後のデータベースへデータを移す\r\n    database.execSQL(\r\n        \"\"\"\r\n        INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\r\n        SELECT _id, comment, yomi, description FROM comment_collection_db\r\n        \"\"\"\r\n    )\r\n    // 前あったデータベースを消す\r\n    database.execSQL(\"DROP TABLE comment_collection_db\")\r\n    // 移行後のデータベースの名前を移行前と同じにして移行完了\r\n    database.execSQL(\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\")\r\n}\r\n```\r\n\r\n全部くっつけるとこう\r\n\r\n```kotlin\r\n// データベース初期化\r\nval commentCollectionDB = Room.databaseBuilder(this, CommentCollectionDB::class.java, \"CommentCollection.db\")\r\n    .addMigrations(object : Migration(1, 2) {\r\n        override fun migrate(database: SupportSQLiteDatabase) {\r\n            // SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ\r\n            database.execSQL(\r\n                \"\"\"\r\n                CREATE TABLE comment_collection_db_tmp (\r\n                  _id INTEGER NOT NULL PRIMARY KEY, \r\n                  comment TEXT NOT NULL,\r\n                  yomi TEXT NOT NULL,\r\n                  description TEXT NOT NULL\r\n                )\r\n                \"\"\"\r\n            )\r\n            // 移行後のデータベースへデータを移す\r\n            database.execSQL(\r\n                \"\"\"\r\n                INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\r\n                SELECT _id, comment, yomi, description FROM comment_collection_db\r\n                \"\"\"\r\n            )\r\n            // 前あったデータベースを消す\r\n            database.execSQL(\"DROP TABLE comment_collection_db\")\r\n            // 移行後のデータベースの名前を移行前と同じにして移行完了\r\n            database.execSQL(\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\")\r\n        }\r\n    })\r\n    .build()\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    // コルーチン\r\n    withContext(Dispatchers.IO) {\r\n        // データベースから値を取る\r\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { data ->\r\n            println(data.comment)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n以上です。  \r\n\r\n# 追加する方法\r\nSQLite時代の`ContentValues`よりずっとわかりやすい。\r\n```kotlin\r\nGlobalScope.launch(Dispatchers.Main) { \r\n    withContext(Dispatchers.IO){\r\n        val commentCollectionEntity = CommentCollectionEntity(comment = \"comment\", yomi = \"yomi\", description = \"\")\r\n        commentCollectionDB.commentCollectionDAO().insert(commentCollectionEntity)\r\n    }\r\n}\r\n```\r\n\r\n# これ今まで通りSQLiteOpenHelper経由でアクセスするとどうなるの？\r\n\r\n```terminal\r\nandroid.database.sqlite.SQLiteException: Can't downgrade database from version 2 to 1\r\n```\r\n\r\nバージョン下げんなって怒られた。\r\n\r\n# おわりに\r\nカラムが縦か横かわからん時がよくあるのでその時は**TweetDeckがマルチカラム**だってことを思い出してあ～横並びのことか～って思い出すようにしています。\r\n\r\n作らないと行けないファイルが多くて初見さんは大変そうだと思った（こなみ）\r\n\r\n# 参考にしました\r\nhttps://developer.android.com/training/data-storage/room/migrating-db-versions  \r\nhttps://medium.com/@manuelvicnt/android-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9  \r\nhttps://stackoverflow.com/questions/47562157/android-room-migration-null-error  \r\nhttps://qiita.com/arara_tepi/items/7267418ca4b6bd65d744#notnull%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B",
  "bodyHtml": "<p>進路どーすっかな</p>\n<h1>本題</h1>\n<p>既存のAndroidアプリにデータベースを追加したいわけですが、これから作るならRoomをやっぱ使いたいわけですよ。<br>\nでもRoomとSQLite（旧式）が共存してるのなんか気持ち悪いので<strong>めっちゃ面倒くさそうだけど</strong>Roomへ移行しようというわけです。</p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android</td>\n<td>11 Beta 2</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody>\n</table>\n<h1>やること</h1>\n<p>SQLite -&gt; Room</p>\n<h1>ライブラリを入れる</h1>\n<h2>build.gradleを開いて</h2>\n<p>以下のコードを足します。<br>\nファイルの一番上に<code>apply plugin: 'kotlin-kapt'</code>を書かないとエラー出ます。<br>\nあとついでにコルーチンも入れましょう。無くても<code>thread {}</code>使って別スレッドで扱えば使えますがコールバック地獄になるのでやめとこう</p>\n<pre><code class=\"hljs\">apply plugin: <span class=\"hljs-string\">'kotlin-kapt'</span> <span class=\"hljs-comment\">// 一番上に</span>\n\n<span class=\"hljs-keyword\">dependencies</span> {\n\n    <span class=\"hljs-comment\">// Room</span>\n    <span class=\"hljs-keyword\">def</span> room_version = <span class=\"hljs-string\">\"2.2.5\"</span>\n    implementation <span class=\"hljs-string\">\"androidx.room:room-runtime:$room_version\"</span>\n    implementation <span class=\"hljs-string\">\"androidx.room:room-ktx:$room_version\"</span>\n    kapt <span class=\"hljs-string\">\"androidx.room:room-compiler:$room_version\"</span>\n    \n    <span class=\"hljs-comment\">// Coroutines</span>\n    implementation <span class=\"hljs-string\">\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4\"</span>\n    implementation <span class=\"hljs-string\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4\"</span>\n   \n    <span class=\"hljs-comment\">// 省略...</span>\n\n}</code></pre><h1>なんでコルーチン</h1>\n<p><strong>RoomはUIスレッドでは使えません。</strong><br>\nだからコルーチンが必要だったのですね。</p>\n<h1>Roomの構成</h1>\n<p>Roomさんは3つのコンポーネントで成り立ってます。</p>\n<ul>\n<li>RoomDatabase\n<ul>\n<li>データベースの中心的な役割</li>\n<li>説明がめんどいし何するのかよくわかっていない。</li>\n<li>DAOにはこいつが必要</li>\n</ul>\n</li>\n<li>Entity\n<ul>\n<li>テーブル。Excelだと一番上の行。</li>\n<li>データベースの中身を定義する（主キーとか）</li>\n</ul>\n</li>\n<li>DAO\n<ul>\n<li>データベースへアクセスする際に使う関数を定義する</li>\n<li>クエリも入力補助が付いたので間違いが減った（＋実行前に間違いが分かるようになってる）</li>\n</ul>\n</li>\n</ul>\n<h1>移行する</h1>\n<p>流石にちょっと怖くね？</p>\n<h2>Entityを作成する</h2>\n<p>今回はファイル名を<code>CommentCollectionEntity.kt</code>とします。</p>\n<h3>例</h3>\n<p>SQLiteHelperがこうなっているとして</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// データーベース名</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> DATABASE_NAME = <span class=\"hljs-string\">\"CommentCollection.db\"</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> TABLE_NAME = <span class=\"hljs-string\">\"comment_collection_db\"</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> DESCRIPTION = <span class=\"hljs-string\">\"description\"</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> YOMI = <span class=\"hljs-string\">\"yomi\"</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> COMMENT = <span class=\"hljs-string\">\"comment\"</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> _ID = <span class=\"hljs-string\">\"_id\"</span>\n<span class=\"hljs-comment\">// , を付け忘れるとエラー</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> SQL_CREATE_ENTRIES = <span class=\"hljs-string\">\"CREATE TABLE \"</span> + TABLE_NAME + <span class=\"hljs-string\">\" (\"</span> +\n        _ID + <span class=\"hljs-string\">\" INTEGER PRIMARY KEY,\"</span> +\n        COMMENT + <span class=\"hljs-string\">\" TEXT ,\"</span> +\n        YOMI + <span class=\"hljs-string\">\" TEXT ,\"</span> +\n        DESCRIPTION + <span class=\"hljs-string\">\" TEXT\"</span> +\n        <span class=\"hljs-string\">\")\"</span></code></pre><p>Entityはこうなります（例がクソわかりにくい。<strong>まるで教科書の例題の解き方が参考にならない問題みたい</strong>）</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">@Entity(tableName = <span class=\"hljs-meta-string\">\"comment_collection_db\"</span>)</span>\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommentCollectionEntity</span></span>(\n    <span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"_id\"</span>)</span> <span class=\"hljs-meta\">@PrimaryKey(autoGenerate = true)</span> <span class=\"hljs-keyword\">val</span> id: <span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"comment\"</span>)</span> <span class=\"hljs-keyword\">val</span> comment: String,\n    <span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"yomi\"</span>)</span> <span class=\"hljs-keyword\">val</span> yomi: String,\n    <span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"description\"</span>)</span> <span class=\"hljs-keyword\">val</span> description: String\n)</code></pre><h4>Entity書くときに注意しないといけないこと</h4>\n<ul>\n<li><code>@Entity(tableName = &quot;&quot;)</code>を書かないとだめ。\n<ul>\n<li><code>CREATE TABLE {ここ} </code>の値ですね。忘れそう</li>\n</ul>\n</li>\n<li>カラムと変数名が同じじゃない場合は<code>@ColumnInfo</code>を使う</li>\n<li><strong>実はnullを許容するように書くと移行のときだけ楽になる</strong>\n<ul>\n<li><code>Migrationを書く</code>の工程がほぼなくなり楽になりますが、使うときに毎回nullの可能性がある値を使う羽目になるので今回は<strong>null絶対許さん</strong>方針で行きます。</li>\n<li>nullを許容する場合は<code>String?</code>や<code>Int?</code>のように最後に<code>?</code>をつければいいですが<strong>今回はつけません</strong>。</li>\n</ul>\n</li>\n</ul>\n<h3>DAOを書く</h3>\n<p>データベースへアクセスするする際に使う関数を定義します。<br>\nクエリもここに書きます。<br>\nここでは一般的に使いそうな動作を例として置いとくので、各自Entityクラス名等を書き換えてください。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/**\n * データベースへアクセスするときに使う関数を定義する\n * */</span>\n<span class=\"hljs-meta\">@Dao</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CommentCollectionDAO</span> </span>{\n    <span class=\"hljs-comment\">/** 全データ取得 */</span>\n    <span class=\"hljs-meta\">@Query(<span class=\"hljs-meta-string\">\"SELECT * FROM comment_collection_db\"</span>)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span></span>: List&lt;CommentCollectionEntity&gt;\n\n    <span class=\"hljs-comment\">/** データ更新 */</span>\n    <span class=\"hljs-meta\">@Update</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(commentCollectionEntity: <span class=\"hljs-type\">CommentCollectionEntity</span>)</span></span>\n\n    <span class=\"hljs-comment\">/** データ追加 */</span>\n    <span class=\"hljs-meta\">@Insert</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(commentCollectionEntity: <span class=\"hljs-type\">CommentCollectionEntity</span>)</span></span>\n\n    <span class=\"hljs-comment\">/** データ削除 */</span>\n    <span class=\"hljs-meta\">@Delete</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(commentCollectionEntity: <span class=\"hljs-type\">CommentCollectionEntity</span>)</span></span>\n\n    <span class=\"hljs-comment\">/** データをIDを使って検索 */</span>\n    <span class=\"hljs-meta\">@Query(<span class=\"hljs-meta-string\">\"SELECT * FROM comment_collection_db WHERE _id = :id\"</span>)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">findById</span><span class=\"hljs-params\">(id: <span class=\"hljs-type\">Int</span>)</span></span>: CommentCollectionEntity\n}</code></pre><p>これを書く際も入力補助が聞くので間違いが減ります（この記事二回目の発言）</p>\n<h4>注意点</h4>\n<p>なくない？</p>\n<h3>Database</h3>\n<p>中心的な役割を持ちます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/**\n * コメントコレクションのデータベース。\n * SQLiteから移行する場合はバージョンを上げる必要がある\n * */</span>\n<span class=\"hljs-meta\">@Database(entities = [CommentCollectionEntity::class], version = 2)</span>\n<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommentCollectionDB</span> : <span class=\"hljs-type\">RoomDatabase</span></span>() {\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">commentCollectionDAO</span><span class=\"hljs-params\">()</span></span>: CommentCollectionDAO\n}</code></pre><h4>注意点</h4>\n<ul>\n<li>バージョンを上げないといけないそうです。</li>\n</ul>\n<h2>データベースへアクセス</h2>\n<p>データベースを使うときにバージョンを上げる処理を書きます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// データベース初期化</span>\n<span class=\"hljs-keyword\">val</span> commentCollectionDB = Room.databaseBuilder(<span class=\"hljs-keyword\">this</span>, CommentCollectionDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"CommentCollection.db\")</span></span>\n    .addMigrations(<span class=\"hljs-keyword\">object</span> : Migration(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">migrate</span><span class=\"hljs-params\">(database: <span class=\"hljs-type\">SupportSQLiteDatabase</span>)</span></span> {\n        }\n    })\n    .build()\nGlobalScope.launch(Dispatchers.Main) {\n    <span class=\"hljs-comment\">// コルーチン</span>\n    withContext(Dispatchers.IO) {\n        <span class=\"hljs-comment\">// データベースから値を取る</span>\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { <span class=\"hljs-keyword\">data</span> -&gt;\n            println(<span class=\"hljs-keyword\">data</span>.comment)\n        }\n    }\n}</code></pre><p>まあこれじゃ動かないんですけどね。<br>\nそのための <strong>addMigrations</strong> があるので使っていきます。</p>\n<h3>なんで？動かないの？</h3>\n<p>実はEntityでnullを許容すればこの問題は消えます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">@ColumnInfo(name = <span class=\"hljs-meta-string\">\"comment\"</span>)</span> <span class=\"hljs-keyword\">val</span> comment: String? <span class=\"hljs-comment\">// null ok!</span></code></pre><p>しかしnullを許容すると使うときに面倒くさくなります（この例だと<code>comment?.length</code>みたいに?付けないといけなくなる）</p>\n<p>この問題はSQLiteとRoomとでnullを許すかどうかで問題が発生しています。</p>\n<ul>\n<li><strong>SQLiteくん</strong>\n<ul>\n<li>null？良いんじゃね？</li>\n</ul>\n</li>\n<li><strong>Roomくん</strong>\n<ul>\n<li><code>Entity</code>がnullを許してくれない；；</li>\n<li>よし落とすか←いまここ</li>\n</ul>\n</li>\n</ul>\n<p>ちなみに出力されたエラーはこちら。</p>\n<pre><code class=\"hljs\">Expected:\n    TableInfo{name=<span class=\"hljs-string\">'comment_collection_db'</span>, columns={description=Column{name=<span class=\"hljs-string\">'description'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">true</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, comment=Column{name=<span class=\"hljs-string\">'comment'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">true</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, yomi=Column{name=<span class=\"hljs-string\">'yomi'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">true</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, _id=Column{name=<span class=\"hljs-string\">'_id'</span>, type=<span class=\"hljs-string\">'INTEGER'</span>, affinity=<span class=\"hljs-string\">'3'</span>, notNull=<span class=\"hljs-literal\">true</span>, primaryKeyPosition=<span class=\"hljs-number\">1</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}}, foreignKeys=[], indices=[]}\n<span class=\"hljs-attr\">Found</span>:\n    TableInfo{name=<span class=\"hljs-string\">'comment_collection_db'</span>, columns={description=Column{name=<span class=\"hljs-string\">'description'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">false</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, comment=Column{name=<span class=\"hljs-string\">'comment'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">false</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, yomi=Column{name=<span class=\"hljs-string\">'yomi'</span>, type=<span class=\"hljs-string\">'TEXT'</span>, affinity=<span class=\"hljs-string\">'2'</span>, notNull=<span class=\"hljs-literal\">false</span>, primaryKeyPosition=<span class=\"hljs-number\">0</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}, _id=Column{name=<span class=\"hljs-string\">'_id'</span>, type=<span class=\"hljs-string\">'INTEGER'</span>, affinity=<span class=\"hljs-string\">'3'</span>, notNull=<span class=\"hljs-literal\">false</span>, primaryKeyPosition=<span class=\"hljs-number\">1</span>, defaultValue=<span class=\"hljs-string\">'null'</span>}}, foreignKeys=[], indices=[]}</code></pre><p>よく見ると上の<code>Expected</code>の方の<code>notNull</code>は<code>true(null良いよ)</code>ですが、<br>\n<code>Found(今回作ったEntity)</code>は<code>notNull</code>が<code>false(nullだめだよ)</code>ってことで中身が噛み合わず例外が発生しています。</p>\n<h2>Migration</h2>\n<p>nullを許容 から nullを許さん に変更したいのですが、残念ながら変更するにはデータベースを作り直す必要があるそうです。</p>\n<p>まあまあ面倒くさい。やることは以下の4つ</p>\n<ul>\n<li>新しくデータベースを作成する\n<ul>\n<li>今までのデータベースにあったカラムを全部書く</li>\n</ul>\n</li>\n<li>新しく作ったデータベースへデータを移す</li>\n<li>古いデータベースを消す</li>\n<li>新しく作ったデータベースの名前を古いデータベースの名前に変更する</li>\n</ul>\n<p>これをKotlinで書くとこうなります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">migrate</span><span class=\"hljs-params\">(database: <span class=\"hljs-type\">SupportSQLiteDatabase</span>)</span></span> {\n    <span class=\"hljs-comment\">// SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ</span>\n    database.execSQL(\n        <span class=\"hljs-string\">\"\"\"\n        CREATE TABLE comment_collection_db_tmp (\n          _id INTEGER NOT NULL PRIMARY KEY, \n          comment TEXT NOT NULL,\n          yomi TEXT NOT NULL,\n          description TEXT NOT NULL\n        )\n        \"\"\"</span>\n    )\n    <span class=\"hljs-comment\">// 移行後のデータベースへデータを移す</span>\n    database.execSQL(\n        <span class=\"hljs-string\">\"\"\"\n        INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\n        SELECT _id, comment, yomi, description FROM comment_collection_db\n        \"\"\"</span>\n    )\n    <span class=\"hljs-comment\">// 前あったデータベースを消す</span>\n    database.execSQL(<span class=\"hljs-string\">\"DROP TABLE comment_collection_db\"</span>)\n    <span class=\"hljs-comment\">// 移行後のデータベースの名前を移行前と同じにして移行完了</span>\n    database.execSQL(<span class=\"hljs-string\">\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\"</span>)\n}</code></pre><p>全部くっつけるとこう</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// データベース初期化</span>\n<span class=\"hljs-keyword\">val</span> commentCollectionDB = Room.databaseBuilder(<span class=\"hljs-keyword\">this</span>, CommentCollectionDB::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>, <span class=\"hljs-type\">\"CommentCollection.db\")</span></span>\n    .addMigrations(<span class=\"hljs-keyword\">object</span> : Migration(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">migrate</span><span class=\"hljs-params\">(database: <span class=\"hljs-type\">SupportSQLiteDatabase</span>)</span></span> {\n            <span class=\"hljs-comment\">// SQLite移行。移行後のデータベースを作成する。カラムは移行前と同じ</span>\n            database.execSQL(\n                <span class=\"hljs-string\">\"\"\"\n                CREATE TABLE comment_collection_db_tmp (\n                  _id INTEGER NOT NULL PRIMARY KEY, \n                  comment TEXT NOT NULL,\n                  yomi TEXT NOT NULL,\n                  description TEXT NOT NULL\n                )\n                \"\"\"</span>\n            )\n            <span class=\"hljs-comment\">// 移行後のデータベースへデータを移す</span>\n            database.execSQL(\n                <span class=\"hljs-string\">\"\"\"\n                INSERT INTO comment_collection_db_tmp (_id, comment, yomi, description)\n                SELECT _id, comment, yomi, description FROM comment_collection_db\n                \"\"\"</span>\n            )\n            <span class=\"hljs-comment\">// 前あったデータベースを消す</span>\n            database.execSQL(<span class=\"hljs-string\">\"DROP TABLE comment_collection_db\"</span>)\n            <span class=\"hljs-comment\">// 移行後のデータベースの名前を移行前と同じにして移行完了</span>\n            database.execSQL(<span class=\"hljs-string\">\"ALTER TABLE comment_collection_db_tmp RENAME TO comment_collection_db\"</span>)\n        }\n    })\n    .build()\nGlobalScope.launch(Dispatchers.Main) {\n    <span class=\"hljs-comment\">// コルーチン</span>\n    withContext(Dispatchers.IO) {\n        <span class=\"hljs-comment\">// データベースから値を取る</span>\n        commentCollectionDB.commentCollectionDAO().getAll().forEach { <span class=\"hljs-keyword\">data</span> -&gt;\n            println(<span class=\"hljs-keyword\">data</span>.comment)\n        }\n    }\n}</code></pre><p>以上です。</p>\n<h1>追加する方法</h1>\n<p>SQLite時代の<code>ContentValues</code>よりずっとわかりやすい。</p>\n<pre><code class=\"hljs\">GlobalScope.launch(Dispatchers.Main) { \n    withContext(Dispatchers.IO){\n        <span class=\"hljs-keyword\">val</span> commentCollectionEntity = CommentCollectionEntity(comment = <span class=\"hljs-string\">\"comment\"</span>, yomi = <span class=\"hljs-string\">\"yomi\"</span>, description = <span class=\"hljs-string\">\"\"</span>)\n        commentCollectionDB.commentCollectionDAO().insert(commentCollectionEntity)\n    }\n}</code></pre><h1>これ今まで通りSQLiteOpenHelper経由でアクセスするとどうなるの？</h1>\n<pre><code class=\"hljs\">android.database.sqlite.SQLiteException: Can't downgrade database from version 2 to 1</code></pre><p>バージョン下げんなって怒られた。</p>\n<h1>おわりに</h1>\n<p>カラムが縦か横かわからん時がよくあるのでその時は<strong>TweetDeckがマルチカラム</strong>だってことを思い出してあ～横並びのことか～って思い出すようにしています。</p>\n<p>作らないと行けないファイルが多くて初見さんは大変そうだと思った（こなみ）</p>\n<h1>参考にしました</h1>\n<p><a href=\"https://developer.android.com/training/data-storage/room/migrating-db-versions\">https://developer.android.com/training/data-storage/room/migrating-db-versions</a><br>\n<a href=\"https://medium.com/@manuelvicnt/android-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9\">https://medium.com/@manuelvicnt/android-room-upgrading-alpha-versions-needs-a-migration-with-kotlin-or-nonnull-7a2d140f05b9</a><br>\n<a href=\"https://stackoverflow.com/questions/47562157/android-room-migration-null-error\">https://stackoverflow.com/questions/47562157/android-room-migration-null-error</a><br>\n<a href=\"https://qiita.com/arara_tepi/items/7267418ca4b6bd65d744#notnull%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B\">https://qiita.com/arara_tepi/items/7267418ca4b6bd65d744#notnullを合わせる</a></p>\n",
  "dir": "contents/posts/json",
  "base": "android_sqlite_to_room.json",
  "ext": ".json",
  "sourceBase": "android_sqlite_to_room.md",
  "sourceExt": ".md"
}