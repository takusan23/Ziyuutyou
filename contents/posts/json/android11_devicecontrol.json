{
  "title": "Android 11 のデバイスコントロールAPIを試す",
  "created_at": "2020-06-11T00:00:00.000Z",
  "tags": [
    "Android",
    "Android11",
    "Kotlin",
    "Android R"
  ],
  "bodyContent": "Android 11 Beta きたぞおおおおおおおおお   \r\n🥳←これすき\r\n\r\n# 追記：2020/06/13\r\nGoogle Payが使えないと言いました。が、Suicaで電車に乗れたので多分**おｻｲﾌｹｰﾀｲ**アプリでは対応していない**NFC Pay**あたりが使えないんだと思います。  \r\nFelica使う系は多分行けるんじゃないですかね？\r\n\r\nあとスライダー(RangeTemplate)動いたのでそれも\r\n\r\n# 本題\r\nAndroid 11 Beta 1 来ました。  \r\nわたし的に楽しみにしてる機能は\r\n- Device Control API (正式名称しらん)\r\n    - 証明のON/OFFとか明るさスライダーなど\r\n    - Quick Settings のスマートホーム版\r\n    - **スマートホームなんて金かかるからやらないと思う（よって使わない）**\r\n- Dynamic Intent Filter\r\n- Wi-Fi経由のADB\r\n    - カスROMには前からあるって？\r\n    - 公式で対応なんですよ！！！\r\n- Bubble\r\n    - **他のアプリに重ねて表示**が年々厳しくなってるので（最近、設定アプリの上に表示できなくなった）代替。\r\n    - ポップアップ再生の代替にはならなそう。あくまでメッセージアプリ向けなのかな。\r\n\r\n## Android 11 Beta入れようとしている各位\r\nGoogle Pay 使えなくなるらしいよ。DP4の段階では使えたんだけどまた使えなくなった。  \r\n![Imgur](https://imgur.com/r914HON.png)  \r\nSuica使えるんかな？  \r\n\r\n# Device Control API を試す\r\n**スマートホームなんてする予定なけど**せっかくBeta版の登場と一緒にAPIが文書化されてるので試しに追加してみる。\r\n\r\n[ドキュメント](https://developer.android.com/preview/features/device-control)\r\n\r\n# 環境\r\n|なまえ|あたい|\r\n|---|---|\r\n|言語|Kotlin|\r\n|Android|11 Beta 1|\r\n|端末|Pixel 3 XL|\r\n\r\n## Android R Betaの環境を揃えます。\r\nSDK Manager開いて、SDK Platformsタブを押して、**Android 10.0+(R)**にチェックを入れて**Apply**押してダウンロードしましょう。\r\n\r\n# build.gradle\r\n## バージョン\r\n```gradle\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"io.github.takusan23.devicecontrolstest\"\r\n        minSdkVersion 30\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`compileSdkVersion 30`と`targetSdkVersion 30`になってればいいと思います。多分\r\n\r\n## ライブラリいれる\r\nドキュメントがRxJava入れてることを前提にしているので私も入れます。  \r\nRxJavaなんて使ったことないんだけどね。\r\n```gradle\r\ndependencies {\r\n    implementation 'org.reactivestreams:reactive-streams:1.0.3'\r\n    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'\r\n}\r\n```\r\n\r\n# AndroidManifest書く\r\nおまじないです。\r\n```xml\r\n<service\r\n    android:name=\".DeviceControlsService\"\r\n    android:label=\"@string/app_name\"\r\n    android:permission=\"android.permission.BIND_CONTROLS\">\r\n    <intent-filter>\r\n        <action android:name=\"android.service.controls.ControlsProviderService\" />\r\n    </intent-filter>\r\n</service>\r\n```\r\n\r\n# DeviceControlsService っていうサービス作成\r\n`DeviceControlsService.kt`を作成します。  \r\n作成したら、`ControlsProviderService()`を継承します。\r\n```kotlin\r\nclass DeviceControlsService : ControlsProviderService() {\r\n    override fun createPublisherForAllAvailable(): Flow.Publisher<Control> {\r\n\r\n    }\r\n\r\n    override fun performControlAction(p0: String, p1: ControlAction, p2: Consumer<Int>) {\r\n\r\n    }\r\n\r\n    override fun createPublisherFor(p0: MutableList<String>): Flow.Publisher<Control> {\r\n\r\n    }\r\n}\r\n```\r\n\r\nでもこのままだと返り値なにもないのでIDEが赤いなみなみ出すので今から書いていきましょう。\r\n\r\n## 利用可能コントローラーの一覧を用意する\r\nこれから追加可能コントローラーを作っていきます。  \r\nここからユーザーが選ぶわけですね。  \r\n`createPublisherForAllAvailable()`に書いていきます。\r\n```kotlin\r\n// 追加するデバイスのID\r\nval TOGGLE_BUTTON_ID = \"toggle_button_id\"\r\n/**\r\n * 追加可能コントローラーを用意する。\r\n * */\r\noverride fun createPublisherForAllAvailable(): Flow.Publisher<Control> {\r\n    // コントローラーを長押しした時に表示するActivity\r\n    val intent = Intent(baseContext, MainActivity::class.java)\r\n    val pendingIntent =\r\n        PendingIntent.getActivity(baseContext, 10, intent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n    // まとめてコントローラーを追加するので配列に\r\n    val controlList = mutableListOf<Control>()\r\n    // ON/OFFサンプル。\r\n    val toggleControl = Control.StatelessBuilder(TOGGLE_BUTTON_ID, pendingIntent)\r\n        .setTitle(\"ON/OFFサンプル\") // たいとる\r\n        .setSubtitle(\"おすとON/OFFが切り替わります。\") // サブタイトル\r\n        .setDeviceType(DeviceTypes.TYPE_LIGHT) // あいこんといろの設定。\r\n        .build()\r\n    // 配列に追加\r\n    controlList.add(toggleControl)\r\n    // Reactive Streamsの知識が必要な模様。私にはないのでサンプルコピペする。\r\n    return FlowAdapters.toFlowPublisher(Flowable.fromIterable(controlList))\r\n}\r\n```\r\n\r\nコメント文は各自消してね。  \r\n### 注意\r\nここで使う`Control`は`Control.StatelessBuilder`の方です。  \r\nこれはまだ状態が（スイッチがONとかOFFとかって話）が分からない時に使うとか書いてあるけど多分この時に使います。\r\n\r\n## ユーザーが選んだコントローラーを用意する\r\n`利用可能コントローラーの一覧を用意する`で選んだコントローラーをユーザーが操作できるようにします。\r\n\r\n```kotlin\r\nlateinit var updatePublisher: ReplayProcessor<Control>\r\n/**\r\n * ユーザーが選んだコントローラーを用意する\r\n * 電源ボタン長押しでよばれる\r\n * */\r\noverride fun createPublisherFor(p0: MutableList<String>): Flow.Publisher<Control> {\r\n    // コントローラーを長押ししたときに表示するActivity\r\n    val intent = Intent(baseContext, MainActivity::class.java)\r\n    val pendingIntent =\r\n        PendingIntent.getActivity(baseContext, 12, intent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n    // 知識不足でわからん\r\n    updatePublisher = ReplayProcessor.create()\r\n    // コントローラー\r\n    if(p0.contains(TOGGLE_BUTTON_ID)) {\r\n        // ON/OFF\r\n        val toggle = ToggleTemplate(\"toggle_template\", ControlButton(false, \"OFFですねえ！\"))\r\n        // ここで作るControlは StatefulBuilder を使う。\r\n        val control = Control.StatefulBuilder(TOGGLE_BUTTON_ID, pendingIntent)\r\n            .setTitle(\"ON/OFFサンプル\") // たいとる\r\n            .setSubtitle(\"おすとON/OFFが切り替わります。\") // サブタイトル\r\n            .setDeviceType(DeviceTypes.TYPE_LIGHT) // 多分アイコンに使われてる？\r\n            .setStatus(Control.STATUS_OK) // 現在の状態\r\n            .setControlTemplate(toggle) // 今回はON/OFFボタン\r\n            .build()\r\n        updatePublisher.onNext(control)\r\n    }\r\n    return FlowAdapters.toFlowPublisher(updatePublisher)\r\n}\r\n```\r\n\r\nこれでエラーは一応消えるので、早速実行してみましょう。\r\n\r\n# コントローラー追加\r\n電源ボタン長押しすると、**デバイス コントロール**が追加されているので、押してみましょう。  \r\n押すと、コントローラーが提供されているアプリ一覧画面が表示されるので、今作っているアプリを選びましょう。  \r\nすると、さっき作ったコントローラーが現れるのでチェックを入れて、右下の保存ボタンを押しましょう。  \r\n\r\n![Imgur](https://imgur.com/r2Wyog1.png)\r\n\r\nするとコントローラーが追加されているはずです。  \r\nですがこの段階では押してもなにも変わらないのでこれから押した時に`ON/OFF`を切り替える処理を書いていきたいと思います。\r\n\r\nちなみにエミュレータでAndroid 11動かすのにダウンロードが長かった。\r\n\r\n# コントローラーを押したときの処理\r\n押した時にON/OFFを切り替えられるようにします。\r\n```kotlin\r\n/**\r\n * コントローラーを押したとき\r\n * */\r\noverride fun performControlAction(p0: String, p1: ControlAction, p2: Consumer<Int>) {\r\n    // コントローラーを長押ししたときに表示するActivity\r\n    val intent = Intent(baseContext, MainActivity::class.java)\r\n    val pendingIntent =\r\n        PendingIntent.getActivity(baseContext, 11, intent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n    // システムに処理中とおしえる\r\n    p2.accept(ControlAction.RESPONSE_OK)\r\n    // コントローラー分岐\r\n    when (p0) {\r\n        TOGGLE_BUTTON_ID -> {\r\n            // ON/OFF切り替え\r\n            // ToggleTemplate は BooleanAction\r\n            if (p1 is BooleanAction) {\r\n                // ONかどうか\r\n                val isOn = p1.newState\r\n                val message = if (isOn) \"ONです\" else \"OFFです\"\r\n                val toggle = ToggleTemplate(\"toggle_template\", ControlButton(isOn, message))\r\n                // Control更新\r\n                val control = Control.StatefulBuilder(TOGGLE_BUTTON_ID, pendingIntent)\r\n                    .setTitle(\"ON/OFFサンプル\") // たいとる\r\n                    .setSubtitle(\"おすとON/OFFが切り替わります。\") // サブタイトル\r\n                    .setDeviceType(DeviceTypes.TYPE_LIGHT) // 多分アイコンに使われてる？\r\n                    .setStatus(Control.STATUS_OK) // 現在の状態\r\n                    .setControlTemplate(toggle) // 今回はON/OFFボタン\r\n                    .setStatusText(message)\r\n                    .build()\r\n                updatePublisher.onNext(control)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nこれで押した時にON/OFFが切り替わるようになりました。  \r\n`DeviceType#TYPE_LIGHT`見た目いい感じ。  \r\nスマートホームやってみたい（金ないけど）\r\n\r\n![Imgur](https://imgur.com/2TNFYZz.png)\r\n\r\n# おわりに\r\nソースコードです。https://github.com/takusan23/DeviceControlsTest\r\n\r\n~~それと**本当**はスライダー（値を調整できる`RangeTemplate`てやつ）コントローラーがあったんですけど、私の環境ではうまく動きませんでした。Beta版だからなのかそもそも私が間違ってるのか？~~\r\n\r\n**RangeTemplate**動きました。[参考にしました](https://gist.github.com/KieronQuinn/c9950f3ee09e11f305ce16e7f48f03b8)\r\n\r\n```kotlin\r\nval sliderControl = Control.StatefulBuilder(SLIDER_BUTTON_ID, pendingIntent)\r\n    .setTitle(\"スライダーサンプル\") // たいとる\r\n    .setSubtitle(\"スライダーです。\") // サブタイトル\r\n    .setDeviceType(DeviceTypes.TYPE_LIGHT) // 多分アイコンに使われてる？\r\n    .setControlId(SLIDER_BUTTON_ID)\r\n    .setStatus(Control.STATUS_OK) // 現在の状態\r\nsliderControl.setControlTemplate(\r\n    ToggleRangeTemplate(\r\n        \"slider_template\",\r\n        ControlButton(true, \"slider_button\"),\r\n        RangeTemplate(\"range\", 0f, 10f, 1f, 1f, null)\r\n    )\r\n)\r\nupdatePublisher.onNext(sliderControl.build())\r\n```\r\n\r\nperformControlAction()はこうです。\r\n\r\n```kotlin\r\n// スライダー\r\n// RangeTemplate は FloatAction\r\nif (p1 is FloatAction) {\r\n    // 現在の値\r\n    val currentValue = p1.newValue\r\n    val sliderControl = Control.StatefulBuilder(SLIDER_BUTTON_ID, pendingIntent)\r\n        .setTitle(\"スライダーサンプル\") // たいとる\r\n        .setSubtitle(\"スライダーです。\") // サブタイトル\r\n        .setDeviceType(DeviceTypes.TYPE_LIGHT) // 多分アイコンに使われてる？\r\n        .setControlId(SLIDER_BUTTON_ID)\r\n        .setStatus(Control.STATUS_OK) // 現在の状態\r\n    val controlButton = ControlButton(true, \"slider_button\")\r\n    sliderControl.setControlTemplate(\r\n        ToggleRangeTemplate(\r\n            \"slider_template\",\r\n            controlButton,\r\n            RangeTemplate(\"range\", 0f, 10f, currentValue, 1f, null)\r\n        )\r\n    )\r\n    updatePublisher.onNext(sliderControl.build())\r\n}\r\n```\r\n\r\n\r\nあと`DeviceType`がいっぱいあるので全種類アイコンと色を見てみたい。やってみるか。\r\n\r\nやりました→ https://github.com/takusan23/DeviceControlAllDeviceTypeSample\r\n\r\n\r\nDynamic Intent Filterもやりたい",
  "bodyHtml": "<p>Android 11 Beta きたぞおおおおおおおおお<br>\n🥳←これすき</p>\n<h1>追記：2020/06/13</h1>\n<p>Google Payが使えないと言いました。が、Suicaで電車に乗れたので多分<strong>おｻｲﾌｹｰﾀｲ</strong>アプリでは対応していない<strong>NFC Pay</strong>あたりが使えないんだと思います。<br>\nFelica使う系は多分行けるんじゃないですかね？</p>\n<p>あとスライダー(RangeTemplate)動いたのでそれも</p>\n<h1>本題</h1>\n<p>Android 11 Beta 1 来ました。<br>\nわたし的に楽しみにしてる機能は</p>\n<ul>\n<li>Device Control API (正式名称しらん)\n<ul>\n<li>証明のON/OFFとか明るさスライダーなど</li>\n<li>Quick Settings のスマートホーム版</li>\n<li><strong>スマートホームなんて金かかるからやらないと思う（よって使わない）</strong></li>\n</ul>\n</li>\n<li>Dynamic Intent Filter</li>\n<li>Wi-Fi経由のADB\n<ul>\n<li>カスROMには前からあるって？</li>\n<li>公式で対応なんですよ！！！</li>\n</ul>\n</li>\n<li>Bubble\n<ul>\n<li><strong>他のアプリに重ねて表示</strong>が年々厳しくなってるので（最近、設定アプリの上に表示できなくなった）代替。</li>\n<li>ポップアップ再生の代替にはならなそう。あくまでメッセージアプリ向けなのかな。</li>\n</ul>\n</li>\n</ul>\n<h2>Android 11 Beta入れようとしている各位</h2>\n<p>Google Pay 使えなくなるらしいよ。DP4の段階では使えたんだけどまた使えなくなった。<br>\n<img src=\"https://imgur.com/r914HON.png\" alt=\"Imgur\"><br>\nSuica使えるんかな？</p>\n<h1>Device Control API を試す</h1>\n<p><strong>スマートホームなんてする予定なけど</strong>せっかくBeta版の登場と一緒にAPIが文書化されてるので試しに追加してみる。</p>\n<p><a href=\"https://developer.android.com/preview/features/device-control\">ドキュメント</a></p>\n<h1>環境</h1>\n<table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>11 Beta 1</td>\n</tr>\n<tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n</tbody>\n</table>\n<h2>Android R Betaの環境を揃えます。</h2>\n<p>SDK Manager開いて、SDK Platformsタブを押して、<strong>Android 10.0+(R)<strong>にチェックを入れて</strong>Apply</strong>押してダウンロードしましょう。</p>\n<h1>build.gradle</h1>\n<h2>バージョン</h2>\n<pre><code class=\"hljs\">android {\n    compileSdkVersion <span class=\"hljs-number\">30</span>\n    buildToolsVersion <span class=\"hljs-string\">\"29.0.3\"</span>\n\n    defaultConfig {\n        applicationId <span class=\"hljs-string\">\"io.github.takusan23.devicecontrolstest\"</span>\n        minSdkVersion <span class=\"hljs-number\">30</span>\n        targetSdkVersion <span class=\"hljs-number\">30</span>\n        versionCode <span class=\"hljs-number\">1</span>\n        versionName <span class=\"hljs-string\">\"1.0\"</span>\n        testInstrumentationRunner <span class=\"hljs-string\">\"androidx.test.runner.AndroidJUnitRunner\"</span>\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled <span class=\"hljs-keyword\">false</span>\n            proguardFiles getDefaultProguardFile(<span class=\"hljs-string\">'proguard-android-optimize.txt'</span>), <span class=\"hljs-string\">'proguard-rules.pro'</span>\n        }\n    }\n}</code></pre><p><code>compileSdkVersion 30</code>と<code>targetSdkVersion 30</code>になってればいいと思います。多分</p>\n<h2>ライブラリいれる</h2>\n<p>ドキュメントがRxJava入れてることを前提にしているので私も入れます。<br>\nRxJavaなんて使ったことないんだけどね。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">dependencies</span> {\n    implementation <span class=\"hljs-string\">'org.reactivestreams:reactive-streams:1.0.3'</span>\n    implementation <span class=\"hljs-string\">'io.reactivex.rxjava2:rxjava:2.2.0'</span>\n}</code></pre><h1>AndroidManifest書く</h1>\n<p>おまじないです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">service</span>\n    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".DeviceControlsService\"</span>\n    <span class=\"hljs-attr\">android:label</span>=<span class=\"hljs-string\">\"@string/app_name\"</span>\n    <span class=\"hljs-attr\">android:permission</span>=<span class=\"hljs-string\">\"android.permission.BIND_CONTROLS\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.service.controls.ControlsProviderService\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">service</span>&gt;</span></code></pre><h1>DeviceControlsService っていうサービス作成</h1>\n<p><code>DeviceControlsService.kt</code>を作成します。<br>\n作成したら、<code>ControlsProviderService()</code>を継承します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeviceControlsService</span> : <span class=\"hljs-type\">ControlsProviderService</span></span>() {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createPublisherForAllAvailable</span><span class=\"hljs-params\">()</span></span>: Flow.Publisher&lt;Control&gt; {\n\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">performControlAction</span><span class=\"hljs-params\">(p0: <span class=\"hljs-type\">String</span>, p1: <span class=\"hljs-type\">ControlAction</span>, p2: <span class=\"hljs-type\">Consumer</span>&lt;<span class=\"hljs-type\">Int</span>&gt;)</span></span> {\n\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createPublisherFor</span><span class=\"hljs-params\">(p0: <span class=\"hljs-type\">MutableList</span>&lt;<span class=\"hljs-type\">String</span>&gt;)</span></span>: Flow.Publisher&lt;Control&gt; {\n\n    }\n}</code></pre><p>でもこのままだと返り値なにもないのでIDEが赤いなみなみ出すので今から書いていきましょう。</p>\n<h2>利用可能コントローラーの一覧を用意する</h2>\n<p>これから追加可能コントローラーを作っていきます。<br>\nここからユーザーが選ぶわけですね。<br>\n<code>createPublisherForAllAvailable()</code>に書いていきます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// 追加するデバイスのID</span>\n<span class=\"hljs-keyword\">val</span> TOGGLE_BUTTON_ID = <span class=\"hljs-string\">\"toggle_button_id\"</span>\n<span class=\"hljs-comment\">/**\n * 追加可能コントローラーを用意する。\n * */</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createPublisherForAllAvailable</span><span class=\"hljs-params\">()</span></span>: Flow.Publisher&lt;Control&gt; {\n    <span class=\"hljs-comment\">// コントローラーを長押しした時に表示するActivity</span>\n    <span class=\"hljs-keyword\">val</span> intent = Intent(baseContext, MainActivity::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>)</span>\n    <span class=\"hljs-keyword\">val</span> pendingIntent =\n        PendingIntent.getActivity(baseContext, <span class=\"hljs-number\">10</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT)\n    <span class=\"hljs-comment\">// まとめてコントローラーを追加するので配列に</span>\n    <span class=\"hljs-keyword\">val</span> controlList = mutableListOf&lt;Control&gt;()\n    <span class=\"hljs-comment\">// ON/OFFサンプル。</span>\n    <span class=\"hljs-keyword\">val</span> toggleControl = Control.StatelessBuilder(TOGGLE_BUTTON_ID, pendingIntent)\n        .setTitle(<span class=\"hljs-string\">\"ON/OFFサンプル\"</span>) <span class=\"hljs-comment\">// たいとる</span>\n        .setSubtitle(<span class=\"hljs-string\">\"おすとON/OFFが切り替わります。\"</span>) <span class=\"hljs-comment\">// サブタイトル</span>\n        .setDeviceType(DeviceTypes.TYPE_LIGHT) <span class=\"hljs-comment\">// あいこんといろの設定。</span>\n        .build()\n    <span class=\"hljs-comment\">// 配列に追加</span>\n    controlList.add(toggleControl)\n    <span class=\"hljs-comment\">// Reactive Streamsの知識が必要な模様。私にはないのでサンプルコピペする。</span>\n    <span class=\"hljs-keyword\">return</span> FlowAdapters.toFlowPublisher(Flowable.fromIterable(controlList))\n}</code></pre><p>コメント文は各自消してね。</p>\n<h3>注意</h3>\n<p>ここで使う<code>Control</code>は<code>Control.StatelessBuilder</code>の方です。<br>\nこれはまだ状態が（スイッチがONとかOFFとかって話）が分からない時に使うとか書いてあるけど多分この時に使います。</p>\n<h2>ユーザーが選んだコントローラーを用意する</h2>\n<p><code>利用可能コントローラーの一覧を用意する</code>で選んだコントローラーをユーザーが操作できるようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> updatePublisher: ReplayProcessor&lt;Control&gt;\n<span class=\"hljs-comment\">/**\n * ユーザーが選んだコントローラーを用意する\n * 電源ボタン長押しでよばれる\n * */</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createPublisherFor</span><span class=\"hljs-params\">(p0: <span class=\"hljs-type\">MutableList</span>&lt;<span class=\"hljs-type\">String</span>&gt;)</span></span>: Flow.Publisher&lt;Control&gt; {\n    <span class=\"hljs-comment\">// コントローラーを長押ししたときに表示するActivity</span>\n    <span class=\"hljs-keyword\">val</span> intent = Intent(baseContext, MainActivity::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>)</span>\n    <span class=\"hljs-keyword\">val</span> pendingIntent =\n        PendingIntent.getActivity(baseContext, <span class=\"hljs-number\">12</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT)\n    <span class=\"hljs-comment\">// 知識不足でわからん</span>\n    updatePublisher = ReplayProcessor.create()\n    <span class=\"hljs-comment\">// コントローラー</span>\n    <span class=\"hljs-keyword\">if</span>(p0.contains(TOGGLE_BUTTON_ID)) {\n        <span class=\"hljs-comment\">// ON/OFF</span>\n        <span class=\"hljs-keyword\">val</span> toggle = ToggleTemplate(<span class=\"hljs-string\">\"toggle_template\"</span>, ControlButton(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"OFFですねえ！\"</span>))\n        <span class=\"hljs-comment\">// ここで作るControlは StatefulBuilder を使う。</span>\n        <span class=\"hljs-keyword\">val</span> control = Control.StatefulBuilder(TOGGLE_BUTTON_ID, pendingIntent)\n            .setTitle(<span class=\"hljs-string\">\"ON/OFFサンプル\"</span>) <span class=\"hljs-comment\">// たいとる</span>\n            .setSubtitle(<span class=\"hljs-string\">\"おすとON/OFFが切り替わります。\"</span>) <span class=\"hljs-comment\">// サブタイトル</span>\n            .setDeviceType(DeviceTypes.TYPE_LIGHT) <span class=\"hljs-comment\">// 多分アイコンに使われてる？</span>\n            .setStatus(Control.STATUS_OK) <span class=\"hljs-comment\">// 現在の状態</span>\n            .setControlTemplate(toggle) <span class=\"hljs-comment\">// 今回はON/OFFボタン</span>\n            .build()\n        updatePublisher.onNext(control)\n    }\n    <span class=\"hljs-keyword\">return</span> FlowAdapters.toFlowPublisher(updatePublisher)\n}</code></pre><p>これでエラーは一応消えるので、早速実行してみましょう。</p>\n<h1>コントローラー追加</h1>\n<p>電源ボタン長押しすると、<strong>デバイス コントロール</strong>が追加されているので、押してみましょう。<br>\n押すと、コントローラーが提供されているアプリ一覧画面が表示されるので、今作っているアプリを選びましょう。<br>\nすると、さっき作ったコントローラーが現れるのでチェックを入れて、右下の保存ボタンを押しましょう。</p>\n<p><img src=\"https://imgur.com/r2Wyog1.png\" alt=\"Imgur\"></p>\n<p>するとコントローラーが追加されているはずです。<br>\nですがこの段階では押してもなにも変わらないのでこれから押した時に<code>ON/OFF</code>を切り替える処理を書いていきたいと思います。</p>\n<p>ちなみにエミュレータでAndroid 11動かすのにダウンロードが長かった。</p>\n<h1>コントローラーを押したときの処理</h1>\n<p>押した時にON/OFFを切り替えられるようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/**\n * コントローラーを押したとき\n * */</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">performControlAction</span><span class=\"hljs-params\">(p0: <span class=\"hljs-type\">String</span>, p1: <span class=\"hljs-type\">ControlAction</span>, p2: <span class=\"hljs-type\">Consumer</span>&lt;<span class=\"hljs-type\">Int</span>&gt;)</span></span> {\n    <span class=\"hljs-comment\">// コントローラーを長押ししたときに表示するActivity</span>\n    <span class=\"hljs-keyword\">val</span> intent = Intent(baseContext, MainActivity::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>)</span>\n    <span class=\"hljs-keyword\">val</span> pendingIntent =\n        PendingIntent.getActivity(baseContext, <span class=\"hljs-number\">11</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT)\n    <span class=\"hljs-comment\">// システムに処理中とおしえる</span>\n    p2.accept(ControlAction.RESPONSE_OK)\n    <span class=\"hljs-comment\">// コントローラー分岐</span>\n    <span class=\"hljs-keyword\">when</span> (p0) {\n        TOGGLE_BUTTON_ID -&gt; {\n            <span class=\"hljs-comment\">// ON/OFF切り替え</span>\n            <span class=\"hljs-comment\">// ToggleTemplate は BooleanAction</span>\n            <span class=\"hljs-keyword\">if</span> (p1 <span class=\"hljs-keyword\">is</span> BooleanAction) {\n                <span class=\"hljs-comment\">// ONかどうか</span>\n                <span class=\"hljs-keyword\">val</span> isOn = p1.newState\n                <span class=\"hljs-keyword\">val</span> message = <span class=\"hljs-keyword\">if</span> (isOn) <span class=\"hljs-string\">\"ONです\"</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"OFFです\"</span>\n                <span class=\"hljs-keyword\">val</span> toggle = ToggleTemplate(<span class=\"hljs-string\">\"toggle_template\"</span>, ControlButton(isOn, message))\n                <span class=\"hljs-comment\">// Control更新</span>\n                <span class=\"hljs-keyword\">val</span> control = Control.StatefulBuilder(TOGGLE_BUTTON_ID, pendingIntent)\n                    .setTitle(<span class=\"hljs-string\">\"ON/OFFサンプル\"</span>) <span class=\"hljs-comment\">// たいとる</span>\n                    .setSubtitle(<span class=\"hljs-string\">\"おすとON/OFFが切り替わります。\"</span>) <span class=\"hljs-comment\">// サブタイトル</span>\n                    .setDeviceType(DeviceTypes.TYPE_LIGHT) <span class=\"hljs-comment\">// 多分アイコンに使われてる？</span>\n                    .setStatus(Control.STATUS_OK) <span class=\"hljs-comment\">// 現在の状態</span>\n                    .setControlTemplate(toggle) <span class=\"hljs-comment\">// 今回はON/OFFボタン</span>\n                    .setStatusText(message)\n                    .build()\n                updatePublisher.onNext(control)\n            }\n        }\n    }\n}</code></pre><p>これで押した時にON/OFFが切り替わるようになりました。<br>\n<code>DeviceType#TYPE_LIGHT</code>見た目いい感じ。<br>\nスマートホームやってみたい（金ないけど）</p>\n<p><img src=\"https://imgur.com/2TNFYZz.png\" alt=\"Imgur\"></p>\n<h1>おわりに</h1>\n<p>ソースコードです。<a href=\"https://github.com/takusan23/DeviceControlsTest\">https://github.com/takusan23/DeviceControlsTest</a></p>\n<p><s>それと<strong>本当</strong>はスライダー（値を調整できる<code>RangeTemplate</code>てやつ）コントローラーがあったんですけど、私の環境ではうまく動きませんでした。Beta版だからなのかそもそも私が間違ってるのか？</s></p>\n<p><strong>RangeTemplate</strong>動きました。<a href=\"https://gist.github.com/KieronQuinn/c9950f3ee09e11f305ce16e7f48f03b8\">参考にしました</a></p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">val</span> sliderControl = Control.StatefulBuilder(SLIDER_BUTTON_ID, pendingIntent)\n    .setTitle(<span class=\"hljs-string\">\"スライダーサンプル\"</span>) <span class=\"hljs-comment\">// たいとる</span>\n    .setSubtitle(<span class=\"hljs-string\">\"スライダーです。\"</span>) <span class=\"hljs-comment\">// サブタイトル</span>\n    .setDeviceType(DeviceTypes.TYPE_LIGHT) <span class=\"hljs-comment\">// 多分アイコンに使われてる？</span>\n    .setControlId(SLIDER_BUTTON_ID)\n    .setStatus(Control.STATUS_OK) <span class=\"hljs-comment\">// 現在の状態</span>\nsliderControl.setControlTemplate(\n    ToggleRangeTemplate(\n        <span class=\"hljs-string\">\"slider_template\"</span>,\n        ControlButton(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"slider_button\"</span>),\n        RangeTemplate(<span class=\"hljs-string\">\"range\"</span>, <span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">10f</span>, <span class=\"hljs-number\">1f</span>, <span class=\"hljs-number\">1f</span>, <span class=\"hljs-literal\">null</span>)\n    )\n)\nupdatePublisher.onNext(sliderControl.build())</code></pre><p>performControlAction()はこうです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// スライダー</span>\n<span class=\"hljs-comment\">// RangeTemplate は FloatAction</span>\n<span class=\"hljs-keyword\">if</span> (p1 <span class=\"hljs-keyword\">is</span> FloatAction) {\n    <span class=\"hljs-comment\">// 現在の値</span>\n    <span class=\"hljs-keyword\">val</span> currentValue = p1.newValue\n    <span class=\"hljs-keyword\">val</span> sliderControl = Control.StatefulBuilder(SLIDER_BUTTON_ID, pendingIntent)\n        .setTitle(<span class=\"hljs-string\">\"スライダーサンプル\"</span>) <span class=\"hljs-comment\">// たいとる</span>\n        .setSubtitle(<span class=\"hljs-string\">\"スライダーです。\"</span>) <span class=\"hljs-comment\">// サブタイトル</span>\n        .setDeviceType(DeviceTypes.TYPE_LIGHT) <span class=\"hljs-comment\">// 多分アイコンに使われてる？</span>\n        .setControlId(SLIDER_BUTTON_ID)\n        .setStatus(Control.STATUS_OK) <span class=\"hljs-comment\">// 現在の状態</span>\n    <span class=\"hljs-keyword\">val</span> controlButton = ControlButton(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"slider_button\"</span>)\n    sliderControl.setControlTemplate(\n        ToggleRangeTemplate(\n            <span class=\"hljs-string\">\"slider_template\"</span>,\n            controlButton,\n            RangeTemplate(<span class=\"hljs-string\">\"range\"</span>, <span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">10f</span>, currentValue, <span class=\"hljs-number\">1f</span>, <span class=\"hljs-literal\">null</span>)\n        )\n    )\n    updatePublisher.onNext(sliderControl.build())\n}</code></pre><p>あと<code>DeviceType</code>がいっぱいあるので全種類アイコンと色を見てみたい。やってみるか。</p>\n<p>やりました→ <a href=\"https://github.com/takusan23/DeviceControlAllDeviceTypeSample\">https://github.com/takusan23/DeviceControlAllDeviceTypeSample</a></p>\n<p>Dynamic Intent Filterもやりたい</p>\n",
  "dir": "contents/posts/json",
  "base": "android11_devicecontrol.json",
  "ext": ".json",
  "sourceBase": "android11_devicecontrol.md",
  "sourceExt": ".md"
}