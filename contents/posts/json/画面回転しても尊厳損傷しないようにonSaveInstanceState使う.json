{
  "title": "画面回転しても尊厳損傷しないようにonSaveInstanceState使う",
  "created_at": "2020-05-17T00:32:19.000Z",
  "tags": [
    "Android",
    "Kotlin"
  ],
  "bodyContent": "あなたのインナーチャイルド、今日も元気？  \nカツドンチャンネルで好きな動画置いときますね  \n<iframe width=\"312\" height=\"176\" src=\"https://ext.nicovideo.jp/thumb/sm27998318\" scrolling=\"no\" style=\"border:solid 1px #ccc;\" frameborder=\"0\"><a href=\"https://www.nicovideo.jp/watch/sm27998318\">キレて食器を破壊したのでみなさん見て下さい</a></iframe>\n<iframe width=\"312\" height=\"176\" src=\"https://ext.nicovideo.jp/thumb/sm30369283\" scrolling=\"no\" style=\"border:solid 1px #ccc;\" frameborder=\"0\"><a href=\"https://www.nicovideo.jp/watch/sm30369283\">パワー系ガイジのムーブを披露しながら歌うサイコマルマイン</a></iframe>\n\n# 本題\n画面回転する→onSaveInstanceState()→onDestroy()→onCreate()という感じ（超省略）でふりだしに戻ります。\n\n# つくる\n## ScreenRotationFragment.kt / fragment_screen_roration.xml\n今回はFragmentでの値の引き継ぎですのでまずFragment作ります\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n    <EditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:ems=\"10\"\n        android:inputType=\"textPersonName\"\n        android:text=\"Name\" />\n</LinearLayout>\n```\n\n```kotlin\nclass ScreenRotationFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_screen_roration, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        // 画面回転のときは savedInstanceState が null 以外になる\n        if (savedInstanceState != null) {\n            editText.setText(savedInstanceState.getString(\"text\"))\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        outState.apply {\n            putString(\"text\", editText.text.toString())\n        }\n    }\n\n}\n```\n\n## MainActivity.kt / activity_main.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main_fragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\"\n    tools:context=\".MainActivity\">\n\n</LinearLayout>\n```\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // 画面回転してもFragmentが残るらしい\n        val fragment = if (supportFragmentManager.findFragmentByTag(\"rotation_fragment\") != null) {\n            supportFragmentManager.findFragmentByTag(\"rotation_fragment\") as ScreenRotationFragment\n        } else {\n            ScreenRotationFragment()\n        }\n        supportFragmentManager\n            .beginTransaction()\n            .replace(R.id.activity_main_fragment, fragment, \"rotation_fragment\") // 第三引数にタグ入れる\n            .commit()\n\n    }\n}\n```\n\nこれで実行してEditTextにテキスト入れて画面回転してもなんと！値が復元されてるんですね～\n\n{%asset_img port.png port%}\n\n{%asset_img land.png lanf%}\n\n# データクラスのときは？\n複数の値をまとめたデータクラスのときはどうやって引き継ぐのかって話ですが`Serializable`ってのを使うそうですよ？\n\n## データクラスつくる\n### TestData.kt\n```kotlin\ndata class TestData(\n    val text: String\n) : Serializable\n```\n`Serializable`ってのを使います\n\n## Fragment書き換え\n```kotlin\nclass ScreenRotationFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_screen_roration, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        // 画面回転のときは savedInstanceState が null 以外になる\n        if (savedInstanceState != null) {\n            // データクラスもらう\n            val testData = savedInstanceState.getSerializable(\"data\") as TestData\n            editText.setText(testData.text)\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        // 画面回転時に保存するときはここに書く\n        outState.apply {\n            val testData = TestData(editText.text.toString())\n            putSerializable(\"data\", testData)\n        }\n    }\n\n}\n```\n\nこれでも値が復元されるはずです。\n\n{%asset_img data_port.png port%}\n\n{%asset_img data_land.png lanf%}\n\n# 終わりに\n`Serializable`ともう一個、`Parcelable`ってのが有るんだけどなんか実装がだるい（IDEがやってくれるけど）ので今回は見送った。  \n別に今回のような使い方なら`Serializable`で十分だと思う。",
  "bodyHtml": "<p>あなたのインナーチャイルド、今日も元気？<br>\nカツドンチャンネルで好きな動画置いときますね<br>\n&lt;iframe width=&quot;312&quot; height=&quot;176&quot; src=&quot;https://ext.nicovideo.jp/thumb/sm27998318&quot; scrolling=&quot;no&quot; style=&quot;border:solid 1px #ccc;&quot; frameborder=&quot;0&quot;&gt;&lt;a href=&quot;https://www.nicovideo.jp/watch/sm27998318&quot;&gt;キレて食器を破壊したのでみなさん見て下さい&lt;/a&gt;&lt;/iframe&gt;\n&lt;iframe width=&quot;312&quot; height=&quot;176&quot; src=&quot;https://ext.nicovideo.jp/thumb/sm30369283&quot; scrolling=&quot;no&quot; style=&quot;border:solid 1px #ccc;&quot; frameborder=&quot;0&quot;&gt;&lt;a href=&quot;https://www.nicovideo.jp/watch/sm30369283&quot;&gt;パワー系ガイジのムーブを披露しながら歌うサイコマルマイン&lt;/a&gt;&lt;/iframe&gt;</p>\n<h1>本題</h1>\n<p>画面回転する→onSaveInstanceState()→onDestroy()→onCreate()という感じ（超省略）でふりだしに戻ります。</p>\n<h1>つくる</h1>\n<h2>ScreenRotationFragment.kt / fragment_screen_roration.xml</h2>\n<p>今回はFragmentでの値の引き継ぎですのでまずFragment作ります</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:gravity</span>=<span class=\"hljs-string\">\"center\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EditText</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/editText\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:ems</span>=<span class=\"hljs-string\">\"10\"</span>\n        <span class=\"hljs-attr\">android:inputType</span>=<span class=\"hljs-string\">\"textPersonName\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"Name\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ScreenRotationFragment</span> : <span class=\"hljs-type\">Fragment</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreateView</span><span class=\"hljs-params\">(inflater: <span class=\"hljs-type\">LayoutInflater</span>, container: <span class=\"hljs-type\">ViewGroup</span>?, savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span>: View? {\n        <span class=\"hljs-keyword\">return</span> inflater.inflate(R.layout.fragment_screen_roration, container, <span class=\"hljs-literal\">false</span>)\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onViewCreated</span><span class=\"hljs-params\">(view: <span class=\"hljs-type\">View</span>, savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onViewCreated(view, savedInstanceState)\n        <span class=\"hljs-comment\">// 画面回転のときは savedInstanceState が null 以外になる</span>\n        <span class=\"hljs-keyword\">if</span> (savedInstanceState != <span class=\"hljs-literal\">null</span>) {\n            editText.setText(savedInstanceState.getString(<span class=\"hljs-string\">\"text\"</span>))\n        }\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onSaveInstanceState</span><span class=\"hljs-params\">(outState: <span class=\"hljs-type\">Bundle</span>)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onSaveInstanceState(outState)\n        outState.apply {\n            putString(<span class=\"hljs-string\">\"text\"</span>, editText.text.toString())\n        }\n    }\n\n}</code></pre><h2>MainActivity.kt / activity_main.xml</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/activity_main_fragment\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span>\n    <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        <span class=\"hljs-comment\">// 画面回転してもFragmentが残るらしい</span>\n        <span class=\"hljs-keyword\">val</span> fragment = <span class=\"hljs-keyword\">if</span> (supportFragmentManager.findFragmentByTag(<span class=\"hljs-string\">\"rotation_fragment\"</span>) != <span class=\"hljs-literal\">null</span>) {\n            supportFragmentManager.findFragmentByTag(<span class=\"hljs-string\">\"rotation_fragment\"</span>) <span class=\"hljs-keyword\">as</span> ScreenRotationFragment\n        } <span class=\"hljs-keyword\">else</span> {\n            ScreenRotationFragment()\n        }\n        supportFragmentManager\n            .beginTransaction()\n            .replace(R.id.activity_main_fragment, fragment, <span class=\"hljs-string\">\"rotation_fragment\"</span>) <span class=\"hljs-comment\">// 第三引数にタグ入れる</span>\n            .commit()\n\n    }\n}</code></pre><p>これで実行してEditTextにテキスト入れて画面回転してもなんと！値が復元されてるんですね～</p>\n<p>{%asset_img port.png port%}</p>\n<p>{%asset_img land.png lanf%}</p>\n<h1>データクラスのときは？</h1>\n<p>複数の値をまとめたデータクラスのときはどうやって引き継ぐのかって話ですが<code>Serializable</code>ってのを使うそうですよ？</p>\n<h2>データクラスつくる</h2>\n<h3>TestData.kt</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestData</span></span>(\n    <span class=\"hljs-keyword\">val</span> text: String\n) : Serializable</code></pre><p><code>Serializable</code>ってのを使います</p>\n<h2>Fragment書き換え</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ScreenRotationFragment</span> : <span class=\"hljs-type\">Fragment</span></span>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreateView</span><span class=\"hljs-params\">(inflater: <span class=\"hljs-type\">LayoutInflater</span>, container: <span class=\"hljs-type\">ViewGroup</span>?, savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span>: View? {\n        <span class=\"hljs-keyword\">return</span> inflater.inflate(R.layout.fragment_screen_roration, container, <span class=\"hljs-literal\">false</span>)\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onViewCreated</span><span class=\"hljs-params\">(view: <span class=\"hljs-type\">View</span>, savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onViewCreated(view, savedInstanceState)\n        <span class=\"hljs-comment\">// 画面回転のときは savedInstanceState が null 以外になる</span>\n        <span class=\"hljs-keyword\">if</span> (savedInstanceState != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-comment\">// データクラスもらう</span>\n            <span class=\"hljs-keyword\">val</span> testData = savedInstanceState.getSerializable(<span class=\"hljs-string\">\"data\"</span>) <span class=\"hljs-keyword\">as</span> TestData\n            editText.setText(testData.text)\n        }\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onSaveInstanceState</span><span class=\"hljs-params\">(outState: <span class=\"hljs-type\">Bundle</span>)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onSaveInstanceState(outState)\n        <span class=\"hljs-comment\">// 画面回転時に保存するときはここに書く</span>\n        outState.apply {\n            <span class=\"hljs-keyword\">val</span> testData = TestData(editText.text.toString())\n            putSerializable(<span class=\"hljs-string\">\"data\"</span>, testData)\n        }\n    }\n\n}</code></pre><p>これでも値が復元されるはずです。</p>\n<p>{%asset_img data_port.png port%}</p>\n<p>{%asset_img data_land.png lanf%}</p>\n<h1>終わりに</h1>\n<p><code>Serializable</code>ともう一個、<code>Parcelable</code>ってのが有るんだけどなんか実装がだるい（IDEがやってくれるけど）ので今回は見送った。<br>\n別に今回のような使い方なら<code>Serializable</code>で十分だと思う。</p>\n",
  "dir": "contents/posts/json",
  "base": "画面回転しても尊厳損傷しないようにonSaveInstanceState使う.json",
  "ext": ".json",
  "sourceBase": "画面回転しても尊厳損傷しないようにonSaveInstanceState使う.md",
  "sourceExt": ".md"
}